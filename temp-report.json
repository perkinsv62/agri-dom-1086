[{"filePath":"E:\\Github\\agri-dom-1086\\src\\utils\\crm-data-operations.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":61,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1988,1991],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1988,1991],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":61,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2026,2029],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2026,2029],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":65,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2257,2260],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2257,2260],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":65,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2295,2298],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2295,2298],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":66,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2364,2367],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2364,2367],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":66,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2392,2395],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2392,2395],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2568,2571],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2568,2571],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2606,2609],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2606,2609],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":71,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2675,2678],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2675,2678],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":71,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2703,2706],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2703,2706],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { toast } from 'sonner';\r\nimport Papa from 'papaparse';\r\n\r\n/**\r\n * Export any module data to CSV format\r\n */\r\nexport const exportToCSV = (data: Record<string, unknown>[], fileName: string): boolean => {\r\n  try {\r\n    // Convert data to CSV format\r\n    const csv = Papa.unparse(data);\r\n    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\r\n    const link = document.createElement('a');\r\n    const url = URL.createObjectURL(blob);\r\n    \r\n    link.setAttribute('href', url);\r\n    link.setAttribute('download', `${fileName}_${new Date().toISOString().split('T')[0]}.csv`);\r\n    link.style.visibility = 'hidden';\r\n    \r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n    \r\n    toast.success(\"Dữ liệu đã được xuất thành công ở định dạng CSV\");\r\n    return true;\r\n  } catch (error) {\r\n    console.error(\"Export error:\", error);\r\n    toast.error(\"Lỗi khi xuất dữ liệu\");\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Export data to Excel format (simulated with CSV for now)\r\n */\r\nexport const exportToExcel = (data: Record<string, unknown>[], fileName: string): boolean => {\r\n  try {\r\n    // For now, we'll use CSV as a stand-in for Excel\r\n    // In a production app, you'd use a library like xlsx\r\n    return exportToCSV(data, fileName);\r\n  } catch (error) {\r\n    console.error(\"Export error:\", error);\r\n    toast.error(\"Erreur lors de l'exportation des données\");\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Export data to PDF format\r\n */\r\nexport const exportToPDF = async (data: Record<string, unknown>[], fileName: string, options: Record<string, unknown> = {}): Promise<boolean> => {\r\n  try {\r\n    // Show toast notification\r\n    toast.info(\"Đang tạo PDF...\");\r\n    \r\n    // Create HTML content based on template type\r\n    let htmlContent = '';\r\n    \r\n    if (options.template === 'technical_sheet' && data.length > 0) {\r\n      // Create technical sheet layout\r\n      const item = data[0];\r\n      const title = typeof (options as any).title === 'string' ? (options as any).title : 'Fiche Technique';\r\n      htmlContent = createTechnicalSheetHTML(item, title);\r\n    } else if (options.template === 'report' && data.length > 0) {\r\n      // Create report layout\r\n      const title = typeof (options as any).title === 'string' ? (options as any).title : fileName;\r\n      const cols = Array.isArray((options as any).columns) ? (options as any).columns : [];\r\n      htmlContent = createReportHTML(data, title, cols);\r\n    } else {\r\n      // Create standard table-based layout\r\n      const title = typeof (options as any).title === 'string' ? (options as any).title : fileName;\r\n      const cols = Array.isArray((options as any).columns) ? (options as any).columns : [];\r\n      htmlContent = createTableBasedHTML(data, title, cols);\r\n    }\r\n    \r\n    // Create and open print window\r\n    const printWindow = window.open('', '_blank');\r\n    \r\n    if (!printWindow) {\r\n      toast.error(\"Không thể mở cửa sổ in\");\r\n      return false;\r\n    }\r\n    \r\n    // Write content and trigger print\r\n    printWindow.document.open();\r\n    printWindow.document.write(htmlContent);\r\n    printWindow.document.close();\r\n    \r\n    // Wait a moment for styles to load then print\r\n    setTimeout(() => {\r\n      try {\r\n        printWindow.focus();\r\n        printWindow.print();\r\n        toast.success(\"PDF được tạo thành công\");\r\n      } catch (printError) {\r\n        console.error(\"Print error:\", printError);\r\n        toast.error(\"Lỗi khi in PDF\");\r\n      }\r\n    }, 1000);\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error(\"PDF export error:\", error);\r\n    toast.error(\"Lỗi khi tạo PDF\");\r\n    return false;\r\n  }\r\n};\r\n\r\n// Helper function to create technical sheet HTML\r\nconst createTechnicalSheetHTML = (item: Record<string, unknown>, title: string): string => {\r\n  return `\r\n    <!DOCTYPE html>\r\n    <html>\r\n      <head>\r\n        <title>${title}</title>\r\n        <meta charset=\"UTF-8\">\r\n        <style>\r\n          body { font-family: Arial, sans-serif; margin: 0; padding: 20px; }\r\n          .technical-sheet { max-width: 800px; margin: 0 auto; border: 1px solid #ddd; padding: 20px; }\r\n          .technical-sheet-header { text-align: center; margin-bottom: 30px; }\r\n          h1 { color: #2e7d32; }\r\n          .section { margin-bottom: 20px; }\r\n          .section h2 { color: #1565c0; border-bottom: 1px solid #eee; padding-bottom: 5px; }\r\n          .property-grid { display: grid; grid-template-columns: repeat(2, 1fr); gap: 15px; }\r\n          .property { margin-bottom: 10px; }\r\n          .property-label { font-weight: bold; display: block; }\r\n          .notes { background: #f5f5f5; padding: 15px; border-radius: 5px; }\r\n          @media print {\r\n            body { padding: 0; }\r\n            .technical-sheet { border: none; }\r\n          }\r\n        </style>\r\n      </head>\r\n      <body>\r\n        <div class=\"technical-sheet\">\r\n          <div class=\"technical-sheet-header\">\r\n            <h1>${item.nom || 'Culture'}</h1>\r\n            <p><em>${item.nomScientifique || ''}</em></p>\r\n          </div>\r\n          \r\n          <div class=\"section\">\r\n            <h2>Informations générales</h2>\r\n            <div class=\"property-grid\">\r\n              <div class=\"property\">\r\n                <span class=\"property-label\">Famille:</span>\r\n                ${item.famille || ''}\r\n              </div>\r\n              <div class=\"property\">\r\n                <span class=\"property-label\">Origine:</span>\r\n                ${item.origine || ''}\r\n              </div>\r\n              <div class=\"property\">\r\n                <span class=\"property-label\">Type:</span>\r\n                ${item.type || ''}\r\n              </div>\r\n              <div class=\"property\">\r\n                <span class=\"property-label\">Saison de culture:</span>\r\n                ${item.saisonCulture || ''}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"section\">\r\n            <h2>Conditions de culture</h2>\r\n            <div class=\"property-grid\">\r\n              <div class=\"property\">\r\n                <span class=\"property-label\">Type de sol:</span>\r\n                ${item.typeSol || ''}\r\n              </div>\r\n              <div class=\"property\">\r\n                <span class=\"property-label\">Besoin en eau:</span>\r\n                ${item.besoinEau || ''}\r\n              </div>\r\n              <div class=\"property\">\r\n                <span class=\"property-label\">Fertilisation:</span>\r\n                ${item.fertilisation || ''}\r\n              </div>\r\n              <div class=\"property\">\r\n                <span class=\"property-label\">Période de récolte:</span>\r\n                ${item.periodeRecolte || ''}\r\n              </div>\r\n              <div class=\"property\">\r\n                <span class=\"property-label\">Rendement par hectare:</span>\r\n                ${item.rendementHectare || ''}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"section\">\r\n            <h2>Problèmes phytosanitaires</h2>\r\n            <div class=\"property-grid\">\r\n              <div class=\"property\">\r\n                <span class=\"property-label\">Ravageurs:</span>\r\n                ${item.ravageurs || ''}\r\n              </div>\r\n              <div class=\"property\">\r\n                <span class=\"property-label\">Maladies:</span>\r\n                ${item.maladies || ''}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"section\">\r\n            <h2>Notes</h2>\r\n            <div class=\"notes\">\r\n              ${item.notes || 'Aucune note disponible'}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </body>\r\n    </html>\r\n  `;\r\n};\r\n\r\n// Helper function to create enhanced report HTML\r\nconst createReportHTML = (data: Record<string, unknown>[], title: string, columns: { key: string, header: string }[]): string => {\r\n  // Generate table headers\r\n  const tableHeaders = columns\r\n    .map(col => `<th>${col.header}</th>`)\r\n    .join('');\r\n    \r\n  // Generate table rows\r\n  const tableRows = data.map((row) => {\r\n    const cells = columns.map((column) => {\r\n      const value = (row as Record<string, unknown>)[column.key];\r\n      return `<td>${typeof value === 'object' ? JSON.stringify(value) : value || ''}</td>`;\r\n    }).join('');\r\n    return `<tr>${cells}</tr>`;\r\n  }).join('');\r\n\r\n  const currentDate = new Date().toLocaleDateString('fr-FR', {\r\n    year: 'numeric',\r\n    month: 'long',\r\n    day: 'numeric'\r\n  });\r\n  \r\n  return `\r\n    <!DOCTYPE html>\r\n    <html>\r\n      <head>\r\n        <title>${title}</title>\r\n        <meta charset=\"UTF-8\">\r\n        <style>\r\n          body { font-family: Arial, sans-serif; margin: 0; padding: 20px; }\r\n          .report { max-width: 100%; margin: 0 auto; }\r\n          .report-header { display: flex; justify-content: space-between; margin-bottom: 30px; border-bottom: 2px solid #4CAF50; padding-bottom: 10px; }\r\n          .report-title { margin: 0; color: #2e7d32; }\r\n          .report-date { text-align: right; color: #666; }\r\n          .report-summary { background-color: #f9f9f9; padding: 15px; margin-bottom: 20px; border-radius: 4px; }\r\n          h1 { color: #2e7d32; }\r\n          table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }\r\n          th { background-color: #4CAF50; color: white; text-align: left; padding: 10px; }\r\n          td { padding: 8px; text-align: left; border-bottom: 1px solid #ddd; }\r\n          tr:nth-child(even) { background-color: #f2f2f2; }\r\n          .footer { margin-top: 30px; text-align: center; font-size: 0.9em; color: #666; border-top: 1px solid #ddd; padding-top: 10px; }\r\n          @media print {\r\n            body { padding: 0; }\r\n            .report { border: none; }\r\n          }\r\n        </style>\r\n      </head>\r\n      <body>\r\n        <div class=\"report\">\r\n          <div class=\"report-header\">\r\n            <h1 class=\"report-title\">${title}</h1>\r\n            <div class=\"report-date\">\r\n              <p>Date: ${currentDate}</p>\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"report-summary\">\r\n            <p>Ce rapport contient ${data.length} enregistrement${data.length > 1 ? 's' : ''} au total.</p>\r\n          </div>\r\n          \r\n          <table>\r\n            <thead>\r\n              <tr>${tableHeaders}</tr>\r\n            </thead>\r\n            <tbody>\r\n              ${tableRows}\r\n            </tbody>\r\n          </table>\r\n          \r\n          <div class=\"footer\">\r\n            <p>Agri Dom - Rapport généré le ${currentDate}</p>\r\n          </div>\r\n        </div>\r\n      </body>\r\n    </html>\r\n  `;\r\n};\r\n\r\n// Helper function to create table-based HTML\r\nconst createTableBasedHTML = (data: Record<string, unknown>[], title: string, columns: { key: string, header: string }[]): string => {\r\n  // Generate table headers\r\n  const tableHeaders = columns\r\n    .map(col => `<th>${col.header}</th>`)\r\n    .join('');\r\n    \r\n  // Generate table rows\r\n  const tableRows = data.map((row) => {\r\n    const cells = columns.map((column) => {\r\n      const value = (row as Record<string, unknown>)[column.key];\r\n      return `<td>${typeof value === 'object' ? JSON.stringify(value) : value || ''}</td>`;\r\n    }).join('');\r\n    return `<tr>${cells}</tr>`;\r\n  }).join('');\r\n  \r\n  return `\r\n    <!DOCTYPE html>\r\n    <html>\r\n      <head>\r\n        <title>${title}</title>\r\n        <meta charset=\"UTF-8\">\r\n        <style>\r\n          body { font-family: Arial, sans-serif; margin: 0; padding: 20px; }\r\n          h1 { text-align: center; margin-bottom: 20px; }\r\n          table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }\r\n          th, td { padding: 8px; text-align: left; border-bottom: 1px solid #ddd; }\r\n          th { background-color: #f2f2f2; }\r\n          .print-header { display: flex; justify-content: space-between; margin-bottom: 20px; }\r\n          .print-date { text-align: right; font-size: 0.9em; color: #666; }\r\n          @media print {\r\n            body { padding: 0; }\r\n          }\r\n        </style>\r\n      </head>\r\n      <body>\r\n        <div class=\"print-header\">\r\n          <h1>${title}</h1>\r\n          <div class=\"print-date\">\r\n            <p>Date: ${new Date().toLocaleDateString()}</p>\r\n          </div>\r\n        </div>\r\n        <table>\r\n          <thead>\r\n            <tr>${tableHeaders}</tr>\r\n          </thead>\r\n          <tbody>\r\n            ${tableRows}\r\n          </tbody>\r\n        </table>\r\n      </body>\r\n    </html>\r\n  `;\r\n};\r\n\r\n/**\r\n * Import data from CSV file\r\n */\r\nexport const importFromCSV = (file: File): Promise<Record<string, unknown>[]> => {\r\n  return new Promise((resolve, reject) => {\r\n    Papa.parse(file, {\r\n      header: true,\r\n      complete: (results) => {\r\n  const parsedData = results.data as Record<string, unknown>[];\r\n        \r\n        if (parsedData.length === 0) {\r\n          toast.error(\"Không tìm thấy dữ liệu hợp lệ trong tệp\");\r\n          reject(\"No valid data found\");\r\n          return;\r\n        }\r\n        \r\n        toast.success(`${parsedData.length} bản ghi đã được nhập thành công`);\r\n        resolve(parsedData);\r\n      },\r\n      error: (error) => {\r\n        console.error(\"Import error:\", error);\r\n        toast.error(\"Lỗi khi nhập dữ liệu\");\r\n        reject(error);\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * Print data\r\n */\r\nexport const printData = (\r\n  data: Record<string, unknown>[], \r\n  title: string, \r\n  columns: { key: string, header: string }[],\r\n  options: Record<string, unknown> = {}\r\n): Promise<boolean> => {\r\n  return new Promise((resolve) => {\r\n    try {\r\n      let htmlContent;\r\n      \r\n      // For technical sheet template\r\n      if (options.template === 'technical_sheet' && data.length > 0) {\r\n        // For technical sheet\r\n        htmlContent = createTechnicalSheetHTML(data[0], title);\r\n      } else if (options.template === 'report' && data.length > 0) {\r\n        // For report\r\n        htmlContent = createReportHTML(data, title, columns);\r\n      } else {\r\n        // Default table-based print template\r\n        htmlContent = createTableBasedHTML(data, title, columns);\r\n      }\r\n      \r\n      // Create print window\r\n      const printWindow = window.open('', '_blank');\r\n      \r\n      if (!printWindow) {\r\n        toast.error(\"Impossible d'ouvrir la fenêtre d'impression\");\r\n        resolve(false);\r\n        return;\r\n      }\r\n      \r\n      // Write to print window\r\n      printWindow.document.open();\r\n      printWindow.document.write(htmlContent);\r\n      printWindow.document.close();\r\n      \r\n      // Auto print after a short delay\r\n      setTimeout(() => {\r\n        try {\r\n          printWindow.focus();\r\n          printWindow.print();\r\n          toast.success(\"Document prêt pour impression\");\r\n          resolve(true);\r\n        } catch (printError) {\r\n          console.error(\"Print error:\", printError);\r\n          toast.error(\"Erreur lors de l'impression\");\r\n          resolve(false);\r\n        }\r\n      }, 1000);\r\n      \r\n    } catch (error) {\r\n      console.error(\"Print error:\", error);\r\n      toast.error(\"Erreur lors de la préparation de l'impression\");\r\n      resolve(false);\r\n    }\r\n  });\r\n};\r\n","usedDeprecatedRules":[]}]
