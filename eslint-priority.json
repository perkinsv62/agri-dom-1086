{
  "generatedAt": "2025-09-23T08:12:31.698Z",
  "totalFiles": 139,
  "top": [
    {
      "filePath": "E:\\Github\\agri-dom-1086\\src\\utils\\crm-operations.ts",
      "errorCount": 12,
      "warningCount": 0,
      "messages": [
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 46,
          "column": 39,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 46,
          "endColumn": 42,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  1184,
                  1187
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  1184,
                  1187
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        },
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 53,
          "column": 36,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 53,
          "endColumn": 39,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  1394,
                  1397
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  1394,
                  1397
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        },
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 53,
          "column": 87,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 53,
          "endColumn": 90,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  1445,
                  1448
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  1445,
                  1448
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        },
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 77,
          "column": 9,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 77,
          "endColumn": 12,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  2118,
                  2121
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  2118,
                  2121
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        },
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 81,
          "column": 4,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 81,
          "endColumn": 7,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  2216,
                  2219
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  2216,
                  2219
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        },
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 110,
          "column": 36,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 110,
          "endColumn": 39,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  2897,
                  2900
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  2897,
                  2900
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        },
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 110,
          "column": 74,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 110,
          "endColumn": 77,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  2935,
                  2938
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  2935,
                  2938
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        },
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 169,
          "column": 9,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 169,
          "endColumn": 12,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  4631,
                  4634
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  4631,
                  4634
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        },
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 213,
          "column": 22,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 213,
          "endColumn": 25,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  5700,
                  5703
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  5700,
                  5703
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        },
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 215,
          "column": 23,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 215,
          "endColumn": 26,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  5773,
                  5776
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  5773,
                  5776
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        },
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 270,
          "column": 46,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 270,
          "endColumn": 49,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  7345,
                  7348
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  7345,
                  7348
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        },
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 270,
          "column": 56,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 270,
          "endColumn": 59,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  7355,
                  7358
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  7355,
                  7358
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        }
      ]
    },
    {
      "filePath": "E:\\Github\\agri-dom-1086\\src\\utils\\crm-data-operations.ts",
      "errorCount": 11,
      "warningCount": 0,
      "messages": [
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 7,
          "column": 35,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 7,
          "endColumn": 38,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  151,
                  154
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  151,
                  154
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        },
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 35,
          "column": 37,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 35,
          "endColumn": 40,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  1054,
                  1057
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  1054,
                  1057
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        },
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 50,
          "column": 41,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 50,
          "endColumn": 44,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  1495,
                  1498
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  1495,
                  1498
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        },
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 50,
          "column": 75,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 50,
          "endColumn": 78,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  1529,
                  1532
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  1529,
                  1532
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        },
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 104,
          "column": 41,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 104,
          "endColumn": 44,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  3281,
                  3284
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  3281,
                  3284
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        },
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 210,
          "column": 33,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 210,
          "endColumn": 36,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  7258,
                  7261
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  7258,
                  7261
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        },
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 287,
          "column": 37,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 287,
          "endColumn": 40,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  10092,
                  10095
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  10092,
                  10095
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        },
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 343,
          "column": 52,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 343,
          "endColumn": 55,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  11882,
                  11885
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  11882,
                  11885
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        },
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 348,
          "column": 44,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 348,
          "endColumn": 47,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  12060,
                  12063
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  12060,
                  12063
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        },
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 372,
          "column": 9,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 372,
          "endColumn": 12,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  12624,
                  12627
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  12624,
                  12627
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        },
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 375,
          "column": 12,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 375,
          "endColumn": 15,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  12710,
                  12713
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  12710,
                  12713
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        }
      ]
    },
    {
      "filePath": "E:\\Github\\agri-dom-1086\\src\\components\\inventory\\ImportExportFunctions.tsx",
      "errorCount": 5,
      "warningCount": 0,
      "messages": [
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 19,
          "column": 18,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 19,
          "endColumn": 21,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  376,
                  379
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  376,
                  379
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        },
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 41,
          "column": 44,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 41,
          "endColumn": 47,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  936,
                  939
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  936,
                  939
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        },
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 51,
          "column": 44,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 51,
          "endColumn": 47,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  1315,
                  1318
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  1315,
                  1318
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        },
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 61,
          "column": 46,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 61,
          "endColumn": 49,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  1620,
                  1623
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  1620,
                  1623
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        },
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 109,
          "column": 44,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 109,
          "endColumn": 47,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  3135,
                  3138
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  3135,
                  3138
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        }
      ]
    },
    {
      "filePath": "E:\\Github\\agri-dom-1086\\src\\components\\ui\\editable-table.tsx",
      "errorCount": 5,
      "warningCount": 0,
      "messages": [
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 16,
          "column": 24,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 16,
          "endColumn": 27,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  424,
                  427
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  424,
                  427
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        },
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 18,
          "column": 57,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 18,
          "endColumn": 60,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  511,
                  514
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  511,
                  514
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        },
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 20,
          "column": 35,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 20,
          "endColumn": 38,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  602,
                  605
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  602,
                  605
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        },
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 72,
          "column": 31,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 72,
          "endColumn": 34,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  1970,
                  1973
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  1970,
                  1973
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        },
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 78,
          "column": 44,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 78,
          "endColumn": 47,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  2066,
                  2069
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  2066,
                  2069
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        }
      ]
    },
    {
      "filePath": "E:\\Github\\agri-dom-1086\\src\\components\\GuadeloupeHarvestTracking.tsx",
      "errorCount": 4,
      "warningCount": 0,
      "messages": [
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 47,
          "column": 73,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 47,
          "endColumn": 76,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  2163,
                  2166
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  2163,
                  2166
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        },
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 52,
          "column": 22,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 52,
          "endColumn": 25,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  2392,
                  2395
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  2392,
                  2395
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        },
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 54,
          "column": 22,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 54,
          "endColumn": 25,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  2534,
                  2537
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  2534,
                  2537
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        },
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 69,
          "column": 48,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 69,
          "endColumn": 51,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  2996,
                  2999
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  2996,
                  2999
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        }
      ]
    },
    {
      "filePath": "E:\\Github\\agri-dom-1086\\src\\hooks\\use-crm-context.ts",
      "errorCount": 4,
      "warningCount": 0,
      "messages": [
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 22,
          "column": 63,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 22,
          "endColumn": 66,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  1136,
                  1139
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  1136,
                  1139
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        },
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 118,
          "column": 67,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 118,
          "endColumn": 70,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  4884,
                  4887
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  4884,
                  4887
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        },
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 140,
          "column": 18,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 140,
          "endColumn": 21,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  5502,
                  5505
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  5502,
                  5505
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        },
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 206,
          "column": 76,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 206,
          "endColumn": 79,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  7522,
                  7525
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  7522,
                  7525
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        }
      ]
    },
    {
      "filePath": "E:\\Github\\agri-dom-1086\\src\\hooks\\use-form-operations.ts",
      "errorCount": 4,
      "warningCount": 0,
      "messages": [
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 23,
          "column": 60,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 23,
          "endColumn": 63,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  549,
                  552
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  549,
                  552
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        },
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 38,
          "column": 25,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 38,
          "endColumn": 28,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  1150,
                  1153
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  1150,
                  1153
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        },
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 61,
          "column": 61,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 61,
          "endColumn": 64,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  1846,
                  1849
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  1846,
                  1849
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        },
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 97,
          "column": 48,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 97,
          "endColumn": 51,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  2985,
                  2988
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  2985,
                  2988
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        }
      ]
    },
    {
      "filePath": "E:\\Github\\agri-dom-1086\\src\\components\\Dashboard.tsx",
      "errorCount": 3,
      "warningCount": 0,
      "messages": [
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 64,
          "column": 32,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 64,
          "endColumn": 35,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  2811,
                  2814
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  2811,
                  2814
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        },
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 65,
          "column": 30,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 65,
          "endColumn": 33,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  2993,
                  2996
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  2993,
                  2996
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        },
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 66,
          "column": 27,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 66,
          "endColumn": 30,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  3082,
                  3085
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  3082,
                  3085
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        }
      ]
    },
    {
      "filePath": "E:\\Github\\agri-dom-1086\\src\\contexts\\AppSettingsContext.tsx",
      "errorCount": 2,
      "warningCount": 1,
      "messages": [
        {
          "ruleId": "react-refresh/only-export-components",
          "severity": 1,
          "message": "Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.",
          "line": 27,
          "column": 14,
          "nodeType": "Identifier",
          "messageId": "namedExport",
          "endLine": 27,
          "endColumn": 28
        },
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 36,
          "column": 46,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 36,
          "endColumn": 49,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  1032,
                  1035
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  1032,
                  1035
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        },
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 47,
          "column": 69,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 47,
          "endColumn": 72,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  1378,
                  1381
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  1378,
                  1381
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        }
      ]
    },
    {
      "filePath": "E:\\Github\\agri-dom-1086\\src\\contexts\\CRMContext.tsx",
      "errorCount": 2,
      "warningCount": 1,
      "messages": [
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 12,
          "column": 48,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 12,
          "endColumn": 51,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  386,
                  389
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  386,
                  389
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        },
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 13,
          "column": 42,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 13,
          "endColumn": 45,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  442,
                  445
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  442,
                  445
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        },
        {
          "ruleId": "react-refresh/only-export-components",
          "severity": 1,
          "message": "Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.",
          "line": 38,
          "column": 14,
          "nodeType": "Identifier",
          "messageId": "namedExport",
          "endLine": 38,
          "endColumn": 20
        }
      ]
    },
    {
      "filePath": "E:\\Github\\agri-dom-1086\\src\\components\\Inventory.tsx",
      "errorCount": 2,
      "warningCount": 0,
      "messages": [
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 411,
          "column": 63,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 411,
          "endColumn": 66,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  12915,
                  12918
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  12915,
                  12918
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        },
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 506,
          "column": 73,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 506,
          "endColumn": 76,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  16297,
                  16300
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  16297,
                  16300
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        }
      ]
    },
    {
      "filePath": "E:\\Github\\agri-dom-1086\\src\\contexts\\StatisticsContext.tsx",
      "errorCount": 1,
      "warningCount": 1,
      "messages": [
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 47,
          "column": 21,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 47,
          "endColumn": 24,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  1093,
                  1096
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  1093,
                  1096
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        },
        {
          "ruleId": "react-refresh/only-export-components",
          "severity": 1,
          "message": "Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.",
          "line": 80,
          "column": 14,
          "nodeType": "Identifier",
          "messageId": "namedExport",
          "endLine": 80,
          "endColumn": 27
        }
      ]
    },
    {
      "filePath": "E:\\Github\\agri-dom-1086\\src\\contexts\\UserContext.tsx",
      "errorCount": 1,
      "warningCount": 1,
      "messages": [
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 156,
          "column": 38,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 156,
          "endColumn": 41,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  3772,
                  3775
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  3772,
                  3775
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        },
        {
          "ruleId": "react-refresh/only-export-components",
          "severity": 1,
          "message": "Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.",
          "line": 198,
          "column": 14,
          "nodeType": "Identifier",
          "messageId": "namedExport",
          "endLine": 198,
          "endColumn": 21
        }
      ]
    },
    {
      "filePath": "E:\\Github\\agri-dom-1086\\src\\components\\common\\PreviewPrintButton.tsx",
      "errorCount": 1,
      "warningCount": 0,
      "messages": [
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 48,
          "column": 41,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 48,
          "endColumn": 44,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  1204,
                  1207
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  1204,
                  1207
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        }
      ]
    },
    {
      "filePath": "E:\\Github\\agri-dom-1086\\src\\components\\inventory\\InventoryAlerts.tsx",
      "errorCount": 1,
      "warningCount": 0,
      "messages": [
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 16,
          "column": 56,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 16,
          "endColumn": 59,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  392,
                  395
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  392,
                  395
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        }
      ]
    },
    {
      "filePath": "E:\\Github\\agri-dom-1086\\src\\components\\Statistics.tsx",
      "errorCount": 1,
      "warningCount": 0,
      "messages": [
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 50,
          "column": 42,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 50,
          "endColumn": 45,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  1893,
                  1896
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  1893,
                  1896
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        }
      ]
    },
    {
      "filePath": "E:\\Github\\agri-dom-1086\\src\\components\\ui\\chart-config.tsx",
      "errorCount": 1,
      "warningCount": 0,
      "messages": [
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 41,
          "column": 61,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 41,
          "endColumn": 64,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  1199,
                  1202
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  1199,
                  1202
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        }
      ]
    },
    {
      "filePath": "E:\\Github\\agri-dom-1086\\src\\hooks\\use-data-operations.ts",
      "errorCount": 1,
      "warningCount": 0,
      "messages": [
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 15,
          "column": 60,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 15,
          "endColumn": 63,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  485,
                  488
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  485,
                  488
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        }
      ]
    },
    {
      "filePath": "E:\\Github\\agri-dom-1086\\src\\hooks\\use-notifications.ts",
      "errorCount": 1,
      "warningCount": 0,
      "messages": [
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "severity": 2,
          "message": "Unexpected any. Specify a different type.",
          "line": 27,
          "column": 88,
          "nodeType": "TSAnyKeyword",
          "messageId": "unexpectedAny",
          "endLine": 27,
          "endColumn": 91,
          "suggestions": [
            {
              "messageId": "suggestUnknown",
              "fix": {
                "range": [
                  844,
                  847
                ],
                "text": "unknown"
              },
              "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
            },
            {
              "messageId": "suggestNever",
              "fix": {
                "range": [
                  844,
                  847
                ],
                "text": "never"
              },
              "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
            }
          ]
        }
      ]
    },
    {
      "filePath": "E:\\Github\\agri-dom-1086\\src\\components\\ParcelManagement.tsx",
      "errorCount": 0,
      "warningCount": 3,
      "messages": [
        {
          "ruleId": null,
          "message": "Unused eslint-disable directive (no problems were reported from 'no-unused-vars').",
          "line": 125,
          "column": 3,
          "severity": 1,
          "nodeType": null,
          "fix": {
            "range": [
              2750,
              2792
            ],
            "text": " "
          }
        },
        {
          "ruleId": null,
          "message": "Unused eslint-disable directive (no problems were reported from 'no-unused-vars').",
          "line": 127,
          "column": 3,
          "severity": 1,
          "nodeType": null,
          "fix": {
            "range": [
              2839,
              2881
            ],
            "text": " "
          }
        },
        {
          "ruleId": null,
          "message": "Unused eslint-disable directive (no problems were reported from 'no-unused-vars').",
          "line": 129,
          "column": 3,
          "severity": 1,
          "nodeType": null,
          "fix": {
            "range": [
              2926,
              2968
            ],
            "text": " "
          }
        }
      ]
    },
    {
      "filePath": "E:\\Github\\agri-dom-1086\\src\\components\\GuadeloupeParcelManagement.tsx",
      "errorCount": 0,
      "warningCount": 2,
      "messages": [
        {
          "ruleId": null,
          "message": "Unused eslint-disable directive (no problems were reported from 'no-unused-vars').",
          "line": 117,
          "column": 3,
          "severity": 1,
          "nodeType": null,
          "fix": {
            "range": [
              2787,
              2829
            ],
            "text": " "
          }
        },
        {
          "ruleId": null,
          "message": "Unused eslint-disable directive (no problems were reported from 'no-unused-vars').",
          "line": 119,
          "column": 3,
          "severity": 1,
          "nodeType": null,
          "fix": {
            "range": [
              2876,
              2918
            ],
            "text": " "
          }
        }
      ]
    },
    {
      "filePath": "E:\\Github\\agri-dom-1086\\src\\App.tsx",
      "errorCount": 0,
      "warningCount": 1,
      "messages": [
        {
          "ruleId": "react-hooks/exhaustive-deps",
          "severity": 1,
          "message": "React Hook useEffect has an unnecessary dependency: 'location.pathname'. Either exclude it or remove the dependency array. Outer scope values like 'location.pathname' aren't valid dependencies because mutating them doesn't re-render the component.",
          "line": 58,
          "column": 6,
          "nodeType": "ArrayExpression",
          "endLine": 58,
          "endColumn": 25,
          "suggestions": [
            {
              "desc": "Update the dependencies array to be: []",
              "fix": {
                "range": [
                  2243,
                  2262
                ],
                "text": "[]"
              }
            }
          ]
        }
      ]
    },
    {
      "filePath": "E:\\Github\\agri-dom-1086\\src\\components\\admin\\AddUserDialog.tsx",
      "errorCount": 0,
      "warningCount": 1,
      "messages": [
        {
          "ruleId": null,
          "message": "Unused eslint-disable directive (no problems were reported from 'no-unused-vars').",
          "line": 23,
          "column": 18,
          "severity": 1,
          "nodeType": null,
          "fix": {
            "range": [
              976,
              1013
            ],
            "text": " "
          }
        }
      ]
    },
    {
      "filePath": "E:\\Github\\agri-dom-1086\\src\\components\\admin\\EditUserDialog.tsx",
      "errorCount": 0,
      "warningCount": 1,
      "messages": [
        {
          "ruleId": null,
          "message": "Unused eslint-disable directive (no problems were reported from 'no-unused-vars').",
          "line": 24,
          "column": 18,
          "severity": 1,
          "nodeType": null,
          "fix": {
            "range": [
              1032,
              1069
            ],
            "text": " "
          }
        }
      ]
    },
    {
      "filePath": "E:\\Github\\agri-dom-1086\\src\\components\\common\\PreviewDialog.tsx",
      "errorCount": 0,
      "warningCount": 1,
      "messages": [
        {
          "ruleId": null,
          "message": "Unused eslint-disable directive (no problems were reported from 'no-unused-vars').",
          "line": 2,
          "column": 1,
          "severity": 1,
          "nodeType": null,
          "fix": {
            "range": [
              2,
              37
            ],
            "text": " "
          }
        }
      ]
    },
    {
      "filePath": "E:\\Github\\agri-dom-1086\\src\\components\\dashboard\\ReusableDashboard.tsx",
      "errorCount": 0,
      "warningCount": 1,
      "messages": [
        {
          "ruleId": "react-refresh/only-export-components",
          "severity": 1,
          "message": "Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.",
          "line": 184,
          "column": 14,
          "nodeType": "Identifier",
          "messageId": "namedExport",
          "endLine": 184,
          "endColumn": 31
        }
      ]
    },
    {
      "filePath": "E:\\Github\\agri-dom-1086\\src\\components\\parcels\\ParcelActionButtons.tsx",
      "errorCount": 0,
      "warningCount": 1,
      "messages": [
        {
          "ruleId": null,
          "message": "Unused eslint-disable directive (no problems were reported from 'no-unused-vars').",
          "line": 41,
          "column": 52,
          "severity": 1,
          "nodeType": null,
          "fix": {
            "range": [
              1110,
              1147
            ],
            "text": " "
          }
        }
      ]
    },
    {
      "filePath": "E:\\Github\\agri-dom-1086\\src\\components\\parcels\\ParcelMapDialog.tsx",
      "errorCount": 0,
      "warningCount": 1,
      "messages": [
        {
          "ruleId": "react-hooks/exhaustive-deps",
          "severity": 1,
          "message": "React Hook useEffect has a missing dependency: 'simulateMeasurement'. Either include it or remove the dependency array.",
          "line": 126,
          "column": 6,
          "nodeType": "ArrayExpression",
          "endLine": 126,
          "endColumn": 27,
          "suggestions": [
            {
              "desc": "Update the dependencies array to be: [isOpen, measureMode, simulateMeasurement]",
              "fix": {
                "range": [
                  4055,
                  4076
                ],
                "text": "[isOpen, measureMode, simulateMeasurement]"
              }
            }
          ]
        }
      ]
    },
    {
      "filePath": "E:\\Github\\agri-dom-1086\\src\\components\\ui\\badge.tsx",
      "errorCount": 0,
      "warningCount": 1,
      "messages": [
        {
          "ruleId": "react-refresh/only-export-components",
          "severity": 1,
          "message": "Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.",
          "line": 36,
          "column": 17,
          "nodeType": "Identifier",
          "messageId": "namedExport",
          "endLine": 36,
          "endColumn": 30
        }
      ]
    },
    {
      "filePath": "E:\\Github\\agri-dom-1086\\src\\components\\ui\\button.tsx",
      "errorCount": 0,
      "warningCount": 1,
      "messages": [
        {
          "ruleId": "react-refresh/only-export-components",
          "severity": 1,
          "message": "Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.",
          "line": 56,
          "column": 18,
          "nodeType": "Identifier",
          "messageId": "namedExport",
          "endLine": 56,
          "endColumn": 32
        }
      ]
    },
    {
      "filePath": "E:\\Github\\agri-dom-1086\\src\\components\\ui\\form.tsx",
      "errorCount": 0,
      "warningCount": 1,
      "messages": [
        {
          "ruleId": "react-refresh/only-export-components",
          "severity": 1,
          "message": "Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.",
          "line": 168,
          "column": 3,
          "nodeType": "Identifier",
          "messageId": "namedExport",
          "endLine": 168,
          "endColumn": 15
        }
      ]
    },
    {
      "filePath": "E:\\Github\\agri-dom-1086\\src\\components\\ui\\navigation-menu.tsx",
      "errorCount": 0,
      "warningCount": 1,
      "messages": [
        {
          "ruleId": "react-refresh/only-export-components",
          "severity": 1,
          "message": "Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.",
          "line": 119,
          "column": 3,
          "nodeType": "Identifier",
          "messageId": "namedExport",
          "endLine": 119,
          "endColumn": 29
        }
      ]
    },
    {
      "filePath": "E:\\Github\\agri-dom-1086\\src\\components\\ui\\sidebar.tsx",
      "errorCount": 0,
      "warningCount": 1,
      "messages": [
        {
          "ruleId": "react-refresh/only-export-components",
          "severity": 1,
          "message": "Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.",
          "line": 760,
          "column": 3,
          "nodeType": "Identifier",
          "messageId": "namedExport",
          "endLine": 760,
          "endColumn": 13
        }
      ]
    },
    {
      "filePath": "E:\\Github\\agri-dom-1086\\src\\components\\ui\\toggle.tsx",
      "errorCount": 0,
      "warningCount": 1,
      "messages": [
        {
          "ruleId": "react-refresh/only-export-components",
          "severity": 1,
          "message": "Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.",
          "line": 43,
          "column": 18,
          "nodeType": "Identifier",
          "messageId": "namedExport",
          "endLine": 43,
          "endColumn": 32
        }
      ]
    },
    {
      "filePath": "E:\\Github\\agri-dom-1086\\src\\components\\admin\\UserManagement.tsx",
      "errorCount": 0,
      "warningCount": 0,
      "messages": []
    },
    {
      "filePath": "E:\\Github\\agri-dom-1086\\src\\components\\BudgetPlanning.tsx",
      "errorCount": 0,
      "warningCount": 0,
      "messages": []
    },
    {
      "filePath": "E:\\Github\\agri-dom-1086\\src\\components\\common\\ImportExportButtons.tsx",
      "errorCount": 0,
      "warningCount": 0,
      "messages": []
    },
    {
      "filePath": "E:\\Github\\agri-dom-1086\\src\\components\\common\\NotificationButton.tsx",
      "errorCount": 0,
      "warningCount": 0,
      "messages": []
    },
    {
      "filePath": "E:\\Github\\agri-dom-1086\\src\\components\\common\\NotificationCenter.tsx",
      "errorCount": 0,
      "warningCount": 0,
      "messages": []
    },
    {
      "filePath": "E:\\Github\\agri-dom-1086\\src\\components\\common\\PreviewContainer.tsx",
      "errorCount": 0,
      "warningCount": 0,
      "messages": []
    },
    {
      "filePath": "E:\\Github\\agri-dom-1086\\src\\components\\common\\ReportGenerationButton.tsx",
      "errorCount": 0,
      "warningCount": 0,
      "messages": []
    },
    {
      "filePath": "E:\\Github\\agri-dom-1086\\src\\components\\common\\TechnicalSheetButton.tsx",
      "errorCount": 0,
      "warningCount": 0,
      "messages": []
    },
    {
      "filePath": "E:\\Github\\agri-dom-1086\\src\\components\\CropPlanning.tsx",
      "errorCount": 0,
      "warningCount": 0,
      "messages": []
    },
    {
      "filePath": "E:\\Github\\agri-dom-1086\\src\\components\\CultureDetailTable.tsx",
      "errorCount": 0,
      "warningCount": 0,
      "messages": []
    },
    {
      "filePath": "E:\\Github\\agri-dom-1086\\src\\components\\cultures\\TaskList.tsx",
      "errorCount": 0,
      "warningCount": 0,
      "messages": []
    },
    {
      "filePath": "E:\\Github\\agri-dom-1086\\src\\components\\dashboard\\AlertsPanel.tsx",
      "errorCount": 0,
      "warningCount": 0,
      "messages": []
    },
    {
      "filePath": "E:\\Github\\agri-dom-1086\\src\\components\\dashboard\\StatCards.tsx",
      "errorCount": 0,
      "warningCount": 0,
      "messages": []
    },
    {
      "filePath": "E:\\Github\\agri-dom-1086\\src\\components\\dashboard\\TasksPanel.tsx",
      "errorCount": 0,
      "warningCount": 0,
      "messages": []
    },
    {
      "filePath": "E:\\Github\\agri-dom-1086\\src\\components\\data\\ImportExportControls.tsx",
      "errorCount": 0,
      "warningCount": 0,
      "messages": []
    },
    {
      "filePath": "E:\\Github\\agri-dom-1086\\src\\components\\finance\\FinancialDataFilter.tsx",
      "errorCount": 0,
      "warningCount": 0,
      "messages": []
    }
  ]
}