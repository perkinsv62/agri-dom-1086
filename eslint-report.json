[{"filePath":"E:\\Github\\agri-dom-1086\\src\\App.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has an unnecessary dependency: 'location.pathname'. Either exclude it or remove the dependency array. Outer scope values like 'location.pathname' aren't valid dependencies because mutating them doesn't re-render the component.","line":58,"column":6,"nodeType":"ArrayExpression","endLine":58,"endColumn":25,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2243,2262],"text":"[]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\r\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\r\nimport { BrowserRouter, Routes, Route, Navigate } from \"react-router-dom\";\r\nimport Index from \"./pages/Index\";\r\n\r\nimport DonatePage from \"./pages/DonatePage\";\r\nimport FinancePage from \"./pages/FinancePage\";\r\nimport StatsPage from \"./pages/StatsPage\";\r\nimport AdminPage from \"./pages/AdminPage\";\r\nimport NotFound from \"./pages/NotFound\";\r\nimport ParametresPage from \"./pages/ParametresPage\";\r\nimport { useEffect } from \"react\";\r\nimport { CRMProvider } from \"./contexts/CRMContext\";\r\nimport { StatisticsProvider } from \"./contexts/StatisticsContext\";\r\nimport { AppSettingsProvider } from \"./contexts/AppSettingsContext\";\r\nimport { UserProvider } from \"./contexts/UserContext\";\r\nimport { trackPageView } from \"./utils/analytics\";\r\nimport RapportsPage from \"./pages/RapportsPage\";\r\nimport NewsPage from \"./pages/NewsPage\";\r\n\r\n// Define routes configuration with redirects\r\nconst routes = [\r\n  { path: \"/\", element: <Index /> },\r\n  { path: \"/rapports\", element: <RapportsPage /> },\r\n  { path: \"/finances\", element: <FinancePage /> },\r\n  { path: \"/statistiques\", element: <StatisticsProvider><StatsPage /></StatisticsProvider> },\r\n  { path: \"/admin\", element: <AdminPage /> },\r\n  { path: \"/news\", element: <NewsPage /> },\r\n  { path: \"/parametres\", element: <ParametresPage /> },\r\n  { path: \"/donations\", element: <DonatePage /> },\r\n  { path: \"/dashboard\", element: <Navigate to=\"/\" replace /> },\r\n  { path: \"*\", element: <NotFound /> }\r\n];\r\n\r\n// Create query client with enhanced configuration\r\nconst queryClient = new QueryClient({\r\n  defaultOptions: {\r\n    queries: {\r\n      refetchOnWindowFocus: false,\r\n      retry: 1,\r\n      staleTime: 5 * 60 * 1000, // 5 minutes\r\n      gcTime: 10 * 60 * 1000, // 10 minutes\r\n    },\r\n  },\r\n});\r\n\r\n// Router change handler component\r\nconst RouterChangeHandler = () => {\r\n  useEffect(() => {\r\n    // Scroll to top on route change\r\n    window.scrollTo(0, 0);\r\n\r\n    // Track page view for analytics\r\n    const currentPath = window.location.pathname;\r\n    const pageName = currentPath === '/' ? 'dashboard' : currentPath.replace(/^\\//, '');\r\n    trackPageView(pageName);\r\n  }, [location.pathname]);\r\n\r\n  return null;\r\n};\r\n\r\n// Application main component with properly nested providers\r\nconst App = () => {\r\n  return (\r\n    <QueryClientProvider client={queryClient}>\r\n      <AppSettingsProvider>\r\n        <UserProvider>\r\n          <CRMProvider>\r\n            <BrowserRouter>\r\n              <TooltipProvider>\r\n                <RouterChangeHandler />\r\n                <Routes>\r\n                  {routes.map((route) => (\r\n                    <Route\r\n                      key={route.path}\r\n                      path={route.path}\r\n                      element={route.element}\r\n                    />\r\n                  ))}\r\n                </Routes>\r\n              </TooltipProvider>\r\n            </BrowserRouter>\r\n          </CRMProvider>\r\n        </UserProvider>\r\n      </AppSettingsProvider>\r\n    </QueryClientProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\BudgetPlanning.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\CropPlanning.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\CultureDetailTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\Dashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":64,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2811,2814],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2811,2814],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":65,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2993,2996],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2993,2996],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":66,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3082,3085],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3082,3085],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { TrendingUp, TrendingDown } from 'lucide-react';\r\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\r\n\r\n// Dữ liệu mẫu theo tháng cho biểu đồ - Phù hợp cho Guadeloupe\r\nconst revenueData = [\r\n  { month: 'Tháng 1', revenue: 1500 },\r\n  { month: 'Tháng 2', revenue: 2200 },\r\n  { month: 'Tháng 3', revenue: 2500 },\r\n  { month: 'Tháng 4', revenue: 2800 },\r\n  { month: 'Tháng 5', revenue: 3200 },\r\n  { month: 'Tháng 6', revenue: 3500 },\r\n  { month: 'Tháng 7', revenue: 4000 },\r\n];\r\n\r\n// Mở rộng dữ liệu theo tháng thành chuỗi theo ngày bằng cách chia mỗi tháng thành 30 ngày.\r\n// Đây là dữ liệu giả lập (proxy); thay bằng dữ liệu ngày thực tế khi có sẵn.\r\nconst dailyRevenueData = revenueData.flatMap((m, idx) => {\r\n  const perDay = m.revenue / 30;\r\n  // create label as DD/MM (zero-padded). We approximate each month as 30 days.\r\n  return Array.from({ length: 30 }).map((_, dayIndex) => {\r\n    const day = dayIndex + 1;\r\n    const month = idx + 1;\r\n    const pad = (n: number) => n.toString().padStart(2, '0');\r\n    return {\r\n      day: `${pad(day)}/${pad(month)}`,\r\n      revenue: Math.round(perDay),\r\n    };\r\n  });\r\n});\r\n\r\n// Chỉ sử dụng 10 ngày gần nhất cho chế độ hiển thị nhỏ gọn\r\nconst last10Daily = dailyRevenueData.slice(-10);\r\n\r\n// Compute min/max for revenue to set YAxis domain (start near min, not 0)\r\nconst revenueValues = last10Daily.map(d => d.revenue);\r\nconst minRevenue = Math.min(...revenueValues);\r\nconst maxRevenue = Math.max(...revenueValues);\r\nconst revenuePadding = Math.max(1, Math.round((maxRevenue - minRevenue) * 0.1));\r\nconst revenueDomainMin = Math.max(0, minRevenue - revenuePadding);\r\nconst revenueDomainMax = maxRevenue + revenuePadding;\r\n\r\n// Simulated users series for the last 10 days (small daily fluctuations around usersCount)\r\nconst last10Users = last10Daily.map((d, i) => ({\r\n  day: d.day,\r\n  users: Math.round(3500 + (i - 5) * 10 + (i % 2 === 0 ? 5 : -5)),\r\n}));\r\n\r\n// Compute min/max for users to set YAxis domain (start near min, not 0)\r\nconst usersValues = last10Users.map(u => u.users);\r\nconst minUsers = Math.min(...usersValues);\r\nconst maxUsers = Math.max(...usersValues);\r\nconst usersPadding = Math.max(5, Math.round((maxUsers - minUsers) * 0.1));\r\nconst usersDomainMin = Math.max(0, minUsers - usersPadding);\r\nconst usersDomainMax = maxUsers + usersPadding;\r\n\r\n// (productionData removed — not used in Dashboard)\r\n\r\n// Các kiểu và formatter dùng chung cho biểu đồ\r\nconst axisTickStyle = { fontSize: 12, fill: '#6b7280' };\r\nconst tooltipContentStyle = { fontSize: 12, padding: '6px 8px', background: '#ffffff', border: '1px solid #e5e7eb' };\r\nconst tooltipItemStyle = { fontSize: 12 };\r\nconst tooltipLabelStyle = { fontSize: 11, color: '#6b7280' };\r\nconst formatCurrency = (value: any, opts?: Intl.NumberFormatOptions) => new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'EUR', ...(opts || {}) }).format(Number(value));\r\nconst formatNumber = (value: any) => new Intl.NumberFormat('vi-VN').format(Number(value));\r\nconst formatVND = (value: any) => new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(Number(value));\r\n\r\n// (weather/alerts removed — not used in this Dashboard)\r\n\r\n// Sample recent donations (Quyên góp gần nhất)\r\nconst initialDonations = [\r\n  { id: 1, donor: 'Nguyễn Văn A', amount: 500000, datetime: '2025-09-20 14:32', method: 'Thẻ', message: 'Ủng hộ dự án trồng chuối' },\r\n  { id: 2, donor: 'Công ty ABC', amount: 2000000, datetime: '2025-09-18 09:10', method: 'Chuyển khoản', message: 'Quyên góp máy tưới' },\r\n  { id: 3, donor: 'Trần Thị B', amount: 250000, datetime: '2025-09-15 18:45', method: 'Tiền mặt', message: 'Hỗ trợ cộng đồng' },\r\n];\r\n\r\n// (weather alerts removed — replaced by donations table)\r\n\r\nconst Dashboard = () => {\r\n  // Stats cards\r\n  // Users stats (display and growth)\r\n  const usersCount = 3500;\r\n  const usersGrowth = 0.05; // 5% growth\r\n  // Calculate average monthly revenue per user\r\n  const avgMonthlyRevenue = revenueData.reduce((sum, r) => sum + r.revenue, 0) / revenueData.length;\r\n  const revenuePerUser = avgMonthlyRevenue / usersCount;\r\n  // Latest month revenue and growth vs previous month\r\n  const latestRevenue = revenueData.length ? revenueData[revenueData.length - 1].revenue : 0;\r\n  const prevRevenue = revenueData.length > 1 ? revenueData[revenueData.length - 2].revenue : latestRevenue;\r\n  const revenueGrowth = prevRevenue ? (latestRevenue - prevRevenue) / prevRevenue : 0;\r\n  // Estimate today's revenue by dividing latest monthly revenue by 30\r\n  const todayRevenue = 132;\r\n  // Estimate yesterday's revenue similarly (use previous month's revenue as a proxy)\r\n  const yesterdayRevenue = 400;\r\n  // Compute growth vs yesterday (use proxy values); guard division by zero\r\n  const todayGrowth = yesterdayRevenue ? (todayRevenue - yesterdayRevenue) / yesterdayRevenue : 0;\r\n  \r\n  // Tasks\r\n  const donations = initialDonations;\r\n  \r\n  // (weather alert dialog/state removed)\r\n  \r\n  // (alerts management removed - moved to AlertsPanel component)\r\n  \r\n  return (\r\n    <div className=\"p-6 space-y-6 animate-enter\">\r\n      \r\n\r\n      {/* Hàng Thống Kê Nhanh - phù hợp với nông nghiệp địa phương */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\r\n        <div className=\"stat-card card-hover\">\r\n          <p className=\"stat-label\">Doanh thu hôm nay</p>\r\n          <div className=\"flex items-baseline justify-between mt-2\">\r\n            <p className=\"stat-value\">\r\n              {formatCurrency(todayRevenue, { maximumFractionDigits: 0 })}\r\n            </p>\r\n            <span className={`text-sm font-medium flex items-center ${todayGrowth > 0 ? 'text-agri-success' : todayGrowth < 0 ? 'text-agri-danger' : 'text-agri-primary'}`}>\r\n              {todayGrowth < 0 ? (\r\n                <TrendingDown className=\"h-4 w-4 mr-1\" />\r\n              ) : (\r\n                <TrendingUp className=\"h-4 w-4 mr-1\" />\r\n              )}\r\n              {todayGrowth > 0 ? '+' : ''}{(todayGrowth * 100).toFixed(1)}%\r\n            </span>\r\n          </div>\r\n          <div className=\"text-xs text-muted-foreground mt-1\">So sánh với hôm qua</div>\r\n        </div>\r\n        \r\n        <div className=\"stat-card card-hover\">\r\n          <p className=\"stat-label\">Người dùng</p>\r\n          <div className=\"flex items-baseline justify-between mt-2\">\r\n            <p className=\"stat-value\">\r\n              {formatNumber(usersCount)}\r\n            </p>\r\n            <span className={`text-sm font-medium flex items-center ${usersGrowth > 0 ? 'text-agri-success' : usersGrowth < 0 ? 'text-agri-danger' : 'text-agri-primary'}`}>\r\n              {usersGrowth < 0 ? (\r\n                <TrendingDown className=\"h-4 w-4 mr-1\" />\r\n              ) : (\r\n                <TrendingUp className=\"h-4 w-4 mr-1\" />\r\n              )}\r\n              {usersGrowth > 0 ? '+' : ''}{Math.round(usersGrowth * 100)}%\r\n            </span>\r\n          </div>\r\n          <div className=\"text-xs text-muted-foreground mt-1\">So với tháng trước</div>\r\n        </div>\r\n        \r\n        <div className=\"stat-card card-hover\">\r\n          <p className=\"stat-label\">Doanh thu trung bình</p>\r\n          <div className=\"flex items-baseline justify-between mt-2\">\r\n            <p className=\"stat-value\">\r\n              {formatCurrency(revenuePerUser, { maximumFractionDigits: 2 })}\r\n            </p>\r\n            <span className=\"text-agri-success text-sm font-medium flex items-center\">\r\n              <TrendingUp className=\"h-4 w-4 mr-1\" /> +\r\n              5.2%\r\n            </span>\r\n          </div>\r\n          <div className=\"text-xs text-muted-foreground mt-1\">Trung bình hàng tháng / người</div>\r\n        </div>\r\n        \r\n        <div className=\"stat-card card-hover\">\r\n          <p className=\"stat-label\">Doanh thu hàng tháng</p>\r\n          <div className=\"flex items-baseline justify-between mt-2\">\r\n            <p className=\"stat-value\">\r\n              {formatCurrency(latestRevenue, { maximumFractionDigits: 0 })}\r\n            </p>\r\n            <span className={`text-sm font-medium flex items-center ${revenueGrowth > 0 ? 'text-agri-success' : revenueGrowth < 0 ? 'text-agri-danger' : 'text-agri-primary'}`}>\r\n              {revenueGrowth < 0 ? (\r\n                <TrendingDown className=\"h-4 w-4 mr-1\" />\r\n              ) : (\r\n                <TrendingUp className=\"h-4 w-4 mr-1\" />\r\n              )}\r\n              {revenueGrowth > 0 ? '+' : ''}{(revenueGrowth * 100).toFixed(1)}%\r\n            </span>\r\n          </div>\r\n          <div className=\"text-xs text-muted-foreground mt-1\">So với tháng trước</div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Recent Donations section (Quyên góp gần nhất) */}\r\n      <div className=\"bg-white rounded-xl border p-6\">\r\n        <div className=\"flex justify-between items-center mb-4\">\r\n          <h2 className=\"text-xl font-semibold\">Hoạt động Nạp thẻ </h2>\r\n        </div>\r\n        <p className=\"text-muted-foreground mb-6\">Danh sách các khoản nạp thẻ mới nhất</p>\r\n\r\n        <div className=\"overflow-x-auto\">\r\n          <table className=\"w-full text-sm\">\r\n            <thead className=\"bg-muted text-xs uppercase\">\r\n              <tr>\r\n                <th className=\"px-4 py-3 text-left\">Người quyên góp</th>\r\n                <th className=\"px-4 py-3 text-left\">Số tiền</th>\r\n                <th className=\"px-4 py-3 text-left\">Ngày</th>\r\n                <th className=\"px-4 py-3 text-left\">Phương thức</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {donations.map(d => (\r\n                <tr key={d.id} className=\"border-t hover:bg-muted/30\">\r\n                  <td className=\"px-4 py-3\">{d.donor}</td>\r\n                  <td className=\"px-4 py-3\">{formatVND(d.amount)}</td>\r\n                  <td className=\"px-4 py-3\">{d.datetime}</td>\r\n                  <td className=\"px-4 py-3\">{d.method}</td>\r\n                  \r\n                </tr>\r\n              ))}\r\n              {donations.length === 0 && (\r\n                <tr>\r\n                  <td colSpan={4} className=\"px-4 py-4 text-center text-muted-foreground\">Không có khoản quyên góp nào</td>\r\n                </tr>\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Main Content Area */}\r\n      <div className=\"grid grid-cols-1 xl:grid-cols-2 gap-6\">\r\n        {/* Revenue Chart (daily proxy) */}\r\n        <div className=\"dashboard-card col-span-full lg:col-span-1 card-hover\">\r\n          <div className=\"flex justify-between items-center mb-4\">\r\n            <h2 className=\"text-xl font-semibold\">Doanh thu theo ngày</h2>\r\n          </div>\r\n          <p className=\"text-muted-foreground mb-6\">\r\n          Theo dõi doanh thu hàng ngày trong 10 ngày qua\r\n        </p>\r\n          <div className=\"h-80\">\r\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n              <AreaChart\r\n                data={last10Daily}\r\n                syncId=\"dashboard-sync\"\r\n                margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\r\n              >\r\n                <defs>\r\n                  <linearGradient id=\"colorRevenue\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                    <stop offset=\"5%\" stopColor=\"#4CAF50\" stopOpacity={0.8}/>\r\n                    <stop offset=\"95%\" stopColor=\"#4CAF50\" stopOpacity={0}/>\r\n                  </linearGradient>\r\n                </defs>\r\n                <CartesianGrid strokeDasharray=\"3 3\" vertical={false} stroke=\"#f5f5f5\" />\r\n                <XAxis dataKey=\"day\" axisLine={false} tickLine={false} tick={axisTickStyle} />\r\n                <YAxis axisLine={false} tickLine={false} tick={axisTickStyle} tickFormatter={(value) => `${value} €`} domain={[revenueDomainMin, revenueDomainMax]} />\r\n                <Tooltip\r\n                  formatter={(value) => [formatCurrency(value)]}\r\n                  contentStyle={tooltipContentStyle}\r\n                  itemStyle={tooltipItemStyle}\r\n                  labelStyle={tooltipLabelStyle}\r\n                />\r\n                <Area \r\n                  type=\"monotone\" \r\n                  dataKey=\"revenue\" \r\n                  stroke=\"#4CAF50\" \r\n                  fillOpacity={1} \r\n                  fill=\"url(#colorRevenue)\" \r\n                  activeDot={{ r: 8 }} \r\n                />\r\n              </AreaChart>\r\n            </ResponsiveContainer>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Users small chart */}\r\n          <div className=\"dashboard-card col-span-full sm:col-span-1 card-hover\">\r\n            <div className=\"flex justify-between items-center mb-4\">\r\n              <h2 className=\"text-xl font-semibold\">Người dùng</h2>\r\n            </div>\r\n            <p className=\"text-muted-foreground mb-6\">\r\n          Theo dõi tốc độ tăng trưởng người dùng trong 10 ngày qua\r\n        </p>\r\n            {/* Keep a matching visual height ratio to the revenue chart for alignment */}\r\n            <div className=\"h-80\">\r\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                <AreaChart data={last10Users} syncId=\"dashboard-sync\" margin={{ top: 10, right: 10, left: 0, bottom: 0 }}>\r\n                  <CartesianGrid strokeDasharray=\"3 3\" vertical={false} stroke=\"#f5f5f5\" />\r\n                    <XAxis dataKey=\"day\" axisLine={false} tickLine={false} tick={axisTickStyle} />\r\n                    <YAxis axisLine={false} tickLine={false} tick={axisTickStyle} tickFormatter={(v) => formatNumber(v)} domain={[usersDomainMin, usersDomainMax]} />\r\n                    <Tooltip\r\n                      formatter={(value) => [formatNumber(value)]}\r\n                      contentStyle={tooltipContentStyle}\r\n                      itemStyle={tooltipItemStyle}\r\n                      labelStyle={tooltipLabelStyle}\r\n                    />\r\n                  <Area type=\"monotone\" dataKey=\"users\" stroke=\"#2196F3\" fillOpacity={0.2} fill=\"#BBDEFB\" />\r\n                </AreaChart>\r\n              </ResponsiveContainer>\r\n            </div>\r\n          </div>\r\n\r\n      </div>\r\n\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\FinancialTracking.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\GuadeloupeHarvestTracking.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":47,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2163,2166],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2163,2166],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":52,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2392,2395],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2392,2395],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":54,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2534,2537],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2534,2537],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":69,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2996,2999],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2996,2999],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport React, { useState } from 'react';\r\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from 'recharts';\r\nimport { EditableTable, Column } from './ui/editable-table';\r\nimport { Tractor, Carrot, ArrowUp, ArrowDown } from 'lucide-react';\r\nimport { useStatistics } from '../contexts/StatisticsContext';\r\nimport PreviewPrintButton from './common/PreviewPrintButton';\r\n\r\ninterface HarvestData {\r\n  crop: string;\r\n  currentYield: number;\r\n  previousYield: number;\r\n  unit: string;\r\n  harvestArea: number;\r\n  quality: 'Xuất sắc' | 'Tốt' | 'Trung bình' | 'Kém';\r\n}\r\n\r\nconst GuadeloupeHarvestTracking = () => {\r\n  const { yieldData } = useStatistics();\r\n  \r\n  // Convertir les données de rendement pour les adapter au format attendu\r\n  const [harvestData, setHarvestData] = useState<HarvestData[]>(\r\n    yieldData.map(item => ({\r\n      crop: item.name,\r\n      currentYield: item.current,\r\n      previousYield: item.previous,\r\n      unit: item.unit,\r\n      harvestArea: item.name === 'Canne à Sucre' ? 12500 :\r\n                   item.name === 'Banane' ? 2300 :\r\n                   item.name === 'Ananas' ? 350 :\r\n                   item.name === 'Igname' ? 420 : 180,\r\n      quality: item.name === 'Banane' ? 'Xuất sắc' :\r\n               item.name === 'Ananas' || item.name === 'Canne à Sucre' || item.name === 'Madère' ? 'Tốt' : 'Trung bình'\r\n    }))\r\n  );\r\n  \r\n  // Colonnes pour le tableau éditable\r\n  const columns: Column[] = [\r\n    { id: 'crop', header: 'Cây trồng', accessorKey: 'crop', isEditable: true },\r\n    { id: 'currentYield', header: 'Năng suất hiện tại', accessorKey: 'currentYield', type: 'number', isEditable: true },\r\n    { id: 'previousYield', header: 'Năng suất trước đó', accessorKey: 'previousYield', type: 'number', isEditable: true },\r\n    { id: 'unit', header: 'Đơn vị', accessorKey: 'unit', isEditable: true },\r\n    { id: 'harvestArea', header: 'Diện tích (ha)', accessorKey: 'harvestArea', type: 'number', isEditable: true },\r\n    { id: 'quality', header: 'Chất lượng', accessorKey: 'quality', isEditable: true }\r\n  ];\r\n  \r\n  const handleTableUpdate = (rowIndex: number, columnId: string, value: any) => {\r\n    const newData = [...harvestData];\r\n    const updatedRow = { ...newData[rowIndex] };\r\n    \r\n    if (columnId === 'currentYield' || columnId === 'previousYield' || columnId === 'harvestArea') {\r\n      (updatedRow as any)[columnId] = Number(value);\r\n    } else if (columnId === 'crop' || columnId === 'unit' || columnId === 'quality') {\r\n      (updatedRow as any)[columnId] = String(value);\r\n    }\r\n    \r\n    newData[rowIndex] = updatedRow as HarvestData;\r\n    setHarvestData(newData);\r\n    console.log('Dữ liệu thu hoạch đã được cập nhật');\r\n  };\r\n  \r\n  const handleDeleteRow = (rowIndex: number) => {\r\n    const newData = [...harvestData];\r\n    newData.splice(rowIndex, 1);\r\n    setHarvestData(newData);\r\n    console.log('Cây trồng đã được xóa khỏi theo dõi');\r\n  };\r\n  \r\n  const handleAddRow = (newRow: Record<string, any>) => {\r\n    const typedRow: HarvestData = {\r\n      crop: String(newRow.crop || ''),\r\n      currentYield: Number(newRow.currentYield || 0),\r\n      previousYield: Number(newRow.previousYield || 0),\r\n      unit: String(newRow.unit || 't/ha'),\r\n      harvestArea: Number(newRow.harvestArea || 0),\r\n      quality: (newRow.quality as HarvestData['quality']) || 'Trung bình'\r\n    };\r\n    setHarvestData([...harvestData, typedRow]);\r\n    console.log('Cây trồng mới đã được thêm vào theo dõi');\r\n  };\r\n  \r\n  // Données pour le graphique comparatif\r\n  const chartData = harvestData.map(item => ({\r\n    name: item.crop,\r\n    actuel: item.currentYield,\r\n    précédent: item.previousYield,\r\n    différence: item.currentYield - item.previousYield,\r\n    unité: item.unit\r\n  }));\r\n\r\n  // Prepare data for preview/print\r\n  const printData = harvestData.map(item => ({\r\n    culture: item.crop,\r\n    rendement_actuel: `${item.currentYield} ${item.unit}`,\r\n    rendement_precedent: `${item.previousYield} ${item.unit}`,\r\n    surface: `${item.harvestArea} ha`,\r\n    qualite: item.quality,\r\n    evolution: `${item.currentYield > item.previousYield ? '+' : ''}${(item.currentYield - item.previousYield)} ${item.unit}`\r\n  }));\r\n  \r\n  // Columns for preview/print\r\n  const printColumns = [\r\n    { key: \"culture\", header: \"Cây trồng\" },\r\n    { key: \"rendement_actuel\", header: \"Năng suất hiện tại\" },\r\n    { key: \"rendement_precedent\", header: \"Năng suất trước đó\" },\r\n    { key: \"surface\", header: \"Diện tích (ha)\" },\r\n    { key: \"qualite\", header: \"Chất lượng\" },\r\n    { key: \"evolution\", header: \"Sự thay đổi\" }\r\n  ];\r\n  \r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"bg-white rounded-xl border p-6\">\r\n        <div className=\"mb-4 flex justify-between items-start\">\r\n          <div>\r\n            <h2 className=\"text-xl font-bold flex items-center\">\r\n              <Tractor className=\"h-6 w-6 mr-2 text-agri-primary\" />\r\n              Theo dõi Thu hoạch tại Guadeloupe\r\n            </h2>\r\n            <p className=\"text-muted-foreground\">\r\n              Theo dõi năng suất và chất lượng thu hoạch cho các loại cây trồng chính của Guadeloupe\r\n            </p>\r\n          </div>\r\n          \r\n          <PreviewPrintButton \r\n            data={printData} \r\n            moduleName=\"harvest_data\"\r\n            title=\"Theo dõi Thu hoạch tại Guadeloupe\"\r\n            columns={printColumns}\r\n            variant=\"outline\"\r\n          />\r\n        </div>\r\n        \r\n        <div className=\"h-80 mb-6\">\r\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n            <BarChart\r\n              data={chartData}\r\n              margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\r\n            >\r\n              <CartesianGrid strokeDasharray=\"3 3\" vertical={false} />\r\n              <XAxis dataKey=\"name\" />\r\n              <YAxis />\r\n              <Tooltip \r\n                formatter={(value, name, props) => {\r\n                  if (name === 'différence') {\r\n                    return [`${Number(value) > 0 ? '+' : ''}${value} ${props.payload.unité}`, 'Sự thay đổi'];\r\n                  }\r\n                  return [`${value} ${props.payload.unité}`, name];\r\n                }}\r\n              />\r\n              <Legend />\r\n              <Bar name=\"Năng suất hiện tại\" dataKey=\"actuel\" fill=\"#4CAF50\" />\r\n              <Bar name=\"Năng suất trước đó\" dataKey=\"précédent\" fill=\"#8D6E63\" />\r\n            </BarChart>\r\n          </ResponsiveContainer>\r\n        </div>\r\n        \r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\r\n          {harvestData.map(item => {\r\n            const change = item.currentYield - item.previousYield;\r\n            const changePercent = ((change / item.previousYield) * 100).toFixed(1);\r\n            const isPositive = change >= 0;\r\n            \r\n            return (\r\n              <div key={item.crop} className=\"bg-muted/30 rounded-lg p-4 border\">\r\n                <h3 className=\"font-medium mb-1 flex items-center\">\r\n                  <Carrot className=\"h-4 w-4 mr-1.5 text-agri-primary\" />\r\n                  {item.crop}\r\n                </h3>\r\n                <div className=\"text-2xl font-bold\">{item.currentYield} {item.unit}</div>\r\n                <div className={`text-sm flex items-center ${isPositive ? 'text-agri-success' : 'text-agri-danger'}`}>\r\n                  {isPositive ? (\r\n                    <ArrowUp className=\"h-3 w-3 mr-1\" />\r\n                  ) : (\r\n                    <ArrowDown className=\"h-3 w-3 mr-1\" />\r\n                  )}\r\n                  <span>{isPositive ? '+' : ''}{change} {item.unit} ({isPositive ? '+' : ''}{changePercent}%)</span>\r\n                </div>\r\n                <div className=\"mt-2 text-xs text-muted-foreground\">\r\n                  Chất lượng: <span className=\"font-medium\">{item.quality}</span>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n        \r\n        <EditableTable\r\n          data={harvestData}\r\n          columns={columns}\r\n          onUpdate={handleTableUpdate}\r\n          onDelete={handleDeleteRow}\r\n          onAdd={handleAddRow}\r\n          className=\"border-none\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GuadeloupeHarvestTracking;\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\GuadeloupeParcelDetail.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":157,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":157,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4631,4634],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4631,4634],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":170,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":170,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5124,5127],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5124,5127],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\GuadeloupeParcelManagement.tsx","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from 'no-unused-vars').","line":117,"column":3,"severity":1,"nodeType":null,"fix":{"range":[2787,2829],"text":" "}},{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from 'no-unused-vars').","line":119,"column":3,"severity":1,"nodeType":null,"fix":{"range":[2876,2918],"text":" "}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"\r\nimport React, { useState } from 'react';\r\nimport { \r\n  MapPin, \r\n  Layers, \r\n  Calendar, \r\n  Filter,\r\n  Plus,\r\n  Search,\r\n  Edit,\r\n  Trash2,\r\n  AlertCircle,\r\n  Save\r\n} from 'lucide-react';\r\n// EditableField previously removed from top-level components; keep internal editors in UI primitives\r\nimport { toast } from 'sonner';\r\n\r\n// Types pour les parcelles adaptées à la Guadeloupe\r\ninterface ParcelData {\r\n  id: number;\r\n  name: string;\r\n  area: number;\r\n  crop: string;\r\n  status: 'active' | 'inactive' | 'planned';\r\n  lastActivity: string;\r\n  soilType: string;\r\n  coordinates: { lat: number; lng: number };\r\n  irrigation: string;\r\n  plantingDate?: string;\r\n  harvestDate?: string;\r\n  owner?: string;\r\n  rainfall?: number;\r\n  notes?: string;\r\n}\r\n\r\n// Données de parcelles adaptées à l'agriculture en Guadeloupe\r\nconst initialParcelData: ParcelData[] = [\r\n  { \r\n    id: 1, \r\n    name: 'Grande-Terre Nord', \r\n    area: 12.5, \r\n    crop: 'Canne à Sucre', \r\n    status: 'active', \r\n    lastActivity: '2023-08-15', \r\n    soilType: 'Argilo-calcaire', \r\n    coordinates: { lat: 16.3772, lng: -61.4483 },\r\n    irrigation: 'Goutte à goutte',\r\n    plantingDate: '2023-02-15',\r\n    harvestDate: '2024-02-15',\r\n    rainfall: 1200\r\n  },\r\n  { \r\n    id: 2, \r\n    name: 'Basse-Terre Sud', \r\n    area: 8.3, \r\n    crop: 'Banane', \r\n    status: 'active', \r\n    lastActivity: '2023-08-10', \r\n    soilType: 'Volcanique', \r\n    coordinates: { lat: 16.0220, lng: -61.7425 },\r\n    irrigation: 'Aspersion',\r\n    plantingDate: '2023-04-10',\r\n    harvestDate: '2023-12-10',\r\n    rainfall: 2500\r\n  },\r\n  { \r\n    id: 3, \r\n    name: 'Capesterre', \r\n    area: 15.7, \r\n    crop: 'Ananas', \r\n    status: 'active', \r\n    lastActivity: '2023-08-05', \r\n    soilType: 'Volcanique', \r\n    coordinates: { lat: 16.0504, lng: -61.5643 },\r\n    irrigation: 'Goutte à goutte',\r\n    plantingDate: '2023-05-20',\r\n    harvestDate: '2024-01-20',\r\n    rainfall: 2300\r\n  },\r\n  { \r\n    id: 4, \r\n    name: 'Marie-Galante', \r\n    area: 10.2, \r\n    crop: 'Madère', \r\n    status: 'inactive', \r\n    lastActivity: '2023-07-20', \r\n    soilType: 'Sableux', \r\n    coordinates: { lat: 15.9412, lng: -61.2983 },\r\n    irrigation: 'Manuel',\r\n    plantingDate: '2023-03-15',\r\n    harvestDate: '2023-11-01',\r\n    rainfall: 1100\r\n  },\r\n  { \r\n    id: 5, \r\n    name: 'Nord Grande-Terre', \r\n    area: 6.8, \r\n    crop: 'Igname', \r\n    status: 'planned', \r\n    lastActivity: '2023-08-01', \r\n    soilType: 'Limono-argileux', \r\n    coordinates: { lat: 16.3943, lng: -61.4789 },\r\n    irrigation: 'Aucune',\r\n    plantingDate: '2023-09-15',\r\n    harvestDate: '2024-03-15',\r\n    rainfall: 1400\r\n  },\r\n];\r\n\r\n// Composant pour la représentation visuelle d'une parcelle\r\nconst ParcelCard = ({ \r\n  parcel, \r\n  onSelect, \r\n  onEdit \r\n}: { \r\n  parcel: ParcelData, \r\n  // eslint-disable-next-line no-unused-vars\r\n  onSelect: (parcel: ParcelData) => void,\r\n  // eslint-disable-next-line no-unused-vars\r\n  onEdit: (parcel: ParcelData) => void\r\n}) => {\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'active': return 'bg-agri-success';\r\n      case 'inactive': return 'bg-agri-danger';\r\n      case 'planned': return 'bg-agri-warning';\r\n      default: return 'bg-gray-300';\r\n    }\r\n  };\r\n\r\n  const getStatusLabel = (status: string) => {\r\n    switch (status) {\r\n      case 'active': return 'Hoạt động';\r\n      case 'inactive': return 'Không hoạt động';\r\n      case 'planned': return 'Đã lên kế hoạch';\r\n      default: return 'Không xác định';\r\n    }\r\n  };\r\n\r\n  const calculateDays = (dateString: string | undefined) => {\r\n    if (!dateString) return '-';\r\n    const today = new Date();\r\n    const targetDate = new Date(dateString);\r\n    const diffTime = Math.abs(targetDate.getTime() - today.getTime());\r\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n    return diffDays;\r\n  };\r\n\r\n  return (\r\n    <div \r\n      className=\"border rounded-xl p-4 bg-white hover:shadow-md transition-shadow cursor-pointer card-hover\"\r\n      onClick={() => onSelect(parcel)}\r\n    >\r\n      <div className=\"flex justify-between items-start mb-3\">\r\n        <h3 className=\"font-medium\">{parcel.name}</h3>\r\n        <div className={`flex items-center px-2 py-0.5 rounded-full text-xs ${getStatusColor(parcel.status)} bg-opacity-10 text-foreground`}>\r\n          <span className={`w-2 h-2 rounded-full ${getStatusColor(parcel.status)} mr-1.5`}></span>\r\n          {getStatusLabel(parcel.status)}\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"grid grid-cols-2 gap-y-2 text-sm text-muted-foreground mb-3\">\r\n        <div className=\"flex items-center\">\r\n          <Layers className=\"h-4 w-4 mr-1.5\" />\r\n          <span>{parcel.area} ha</span>\r\n        </div>\r\n        <div className=\"flex items-center\">\r\n          <Calendar className=\"h-4 w-4 mr-1.5\" />\r\n          <span>{new Date(parcel.lastActivity).toLocaleDateString()}</span>\r\n        </div>\r\n        <div className=\"col-span-2 mt-1 py-1 px-2 bg-agri-primary/5 rounded-md text-center\">\r\n          <span className=\"text-agri-primary font-medium\">{parcel.crop}</span>\r\n          {parcel.harvestDate && (\r\n            <p className=\"text-xs mt-1\">Récolte dans: {calculateDays(parcel.harvestDate)} jours</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"flex justify-between mt-2 pt-2 border-t border-border\">\r\n        <button \r\n          className=\"p-1.5 hover:bg-gray-100 rounded\"\r\n          onClick={(e) => {\r\n            e.stopPropagation();\r\n            onEdit(parcel);\r\n          }}\r\n        >\r\n          <Edit className=\"h-4 w-4 text-muted-foreground\" />\r\n        </button>\r\n        <button className=\"p-1.5 hover:bg-gray-100 rounded\">\r\n          <MapPin className=\"h-4 w-4 text-muted-foreground\" />\r\n        </button>\r\n        <button className=\"p-1.5 hover:bg-gray-100 rounded text-agri-danger\">\r\n          <Trash2 className=\"h-4 w-4\" />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst GuadeloupeParcelManagement = () => {\r\n  const [parcels, setParcels] = useState<ParcelData[]>(initialParcelData);\r\n  const [selectedParcel, setSelectedParcel] = useState<ParcelData | null>(null);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [filter, setFilter] = useState('all');\r\n  const [isEditMode, setIsEditMode] = useState(false);\r\n  const [editedParcel, setEditedParcel] = useState<ParcelData | null>(null);\r\n  \r\n  // Filtrer les parcelles en fonction des critères de recherche et du filtre\r\n  const filteredParcels = parcels.filter(parcel => {\r\n    const matchesSearch = parcel.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                         parcel.crop.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                         parcel.soilType.toLowerCase().includes(searchTerm.toLowerCase());\r\n    \r\n    if (filter === 'all') return matchesSearch;\r\n    return matchesSearch && parcel.status === filter;\r\n  });\r\n\r\n  const handleSelectParcel = (parcel: ParcelData) => {\r\n    setSelectedParcel(parcel);\r\n    setIsEditMode(false);\r\n  };\r\n\r\n  const handleEditStart = (parcel: ParcelData) => {\r\n    setEditedParcel({...parcel});\r\n    setSelectedParcel(parcel);\r\n    setIsEditMode(true);\r\n  };\r\n\r\n  const handleAddParcel = () => {\r\n    const newId = Math.max(0, ...parcels.map(p => p.id)) + 1;\r\n    const newParcel: ParcelData = {\r\n      id: newId,\r\n      name: 'Nouvelle Parcelle',\r\n      area: 0,\r\n      crop: '',\r\n      status: 'planned',\r\n      lastActivity: new Date().toISOString().split('T')[0],\r\n      soilType: '',\r\n      coordinates: { lat: 16.2650, lng: -61.5510 }, // Coordonnées de Pointe-à-Pitre\r\n      irrigation: '',\r\n    };\r\n    setParcels([...parcels, newParcel]);\r\n    setEditedParcel(newParcel);\r\n    setSelectedParcel(newParcel);\r\n    setIsEditMode(true);\r\n    toast.success('Nouvelle parcelle créée');\r\n  };\r\n\r\n  const handleSaveEdit = () => {\r\n    if (!editedParcel) return;\r\n    \r\n    setParcels(parcels.map(p => p.id === editedParcel.id ? editedParcel : p));\r\n    setSelectedParcel(editedParcel);\r\n    setIsEditMode(false);\r\n    toast.success('Modifications enregistrées');\r\n  };\r\n\r\n  const handleCancelEdit = () => {\r\n    setIsEditMode(false);\r\n    setEditedParcel(null);\r\n  };\r\n\r\n  const handleInputChange = (field: keyof ParcelData, value: string | number) => {\r\n    if (!editedParcel) return;\r\n    \r\n    setEditedParcel(prev => {\r\n      if (!prev) return null;\r\n      \r\n      if (field === 'area' || field === 'rainfall') {\r\n        return { ...prev, [field]: Number(value) };\r\n      }\r\n      \r\n      if (field === 'coordinates') {\r\n        return prev; // Gérer séparément si nécessaire\r\n      }\r\n\r\n      return { ...prev, [field]: value };\r\n    });\r\n  };\r\n\r\n  const handleStatusChange = (status: 'active' | 'inactive' | 'planned') => {\r\n    if (!editedParcel) return;\r\n    setEditedParcel({...editedParcel, status});\r\n  };\r\n  \r\n  return (\r\n    <div className=\"p-6 animate-enter\">\r\n      <header className=\"flex flex-col md:flex-row md:justify-between md:items-center mb-6 gap-4\">\r\n        <div>\r\n          <h1 className=\"text-2xl font-bold mb-1\">Quản lý thửa đất - Guadeloupe</h1>\r\n          <p className=\"text-muted-foreground\">Quản lý và theo dõi tất cả thửa đất nông nghiệp trên quần đảo</p>\r\n        </div>\r\n        <button \r\n          className=\"inline-flex items-center justify-center px-4 py-2 bg-agri-primary text-white rounded-lg hover:bg-agri-primary-dark transition-colors whitespace-nowrap\"\r\n          onClick={handleAddParcel}\r\n        >\r\n          <Plus className=\"h-4 w-4 mr-2\" />\r\n          Thêm thửa đất\r\n        </button>\r\n      </header>\r\n\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\r\n        {/* Colonne de gauche - Liste des parcelles */}\r\n        <div className=\"lg:col-span-1 space-y-4\">\r\n          <div className=\"flex gap-3 mb-4\">\r\n            <div className=\"relative flex-grow\">\r\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\r\n              <input \r\n                type=\"text\" \r\n                placeholder=\"Tìm kiếm...\" \r\n                className=\"pl-10 pr-4 py-2 w-full border border-input rounded-lg focus:outline-none focus:ring-2 focus:ring-ring\"\r\n                value={searchTerm}\r\n                onChange={(e) => setSearchTerm(e.target.value)}\r\n              />\r\n            </div>\r\n            <div className=\"relative\">\r\n              <select \r\n                className=\"appearance-none pl-3 pr-8 py-2 border border-input rounded-lg focus:outline-none focus:ring-2 focus:ring-ring bg-white\"\r\n                value={filter}\r\n                onChange={(e) => setFilter(e.target.value)}\r\n              >\r\n                <option value=\"all\">Tất cả</option>\r\n                <option value=\"active\">Hoạt động</option>\r\n                <option value=\"inactive\">Không hoạt động</option>\r\n                <option value=\"planned\">Đã lên kế hoạch</option>\r\n              </select>\r\n              <Filter className=\"absolute right-2 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground pointer-events-none\" />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"space-y-3 max-h-[calc(100vh-220px)] overflow-y-auto pr-2 custom-scrollbar\">\r\n            {filteredParcels.length > 0 ? (\r\n              filteredParcels.map(parcel => (\r\n                <ParcelCard \r\n                  key={parcel.id} \r\n                  parcel={parcel} \r\n                  onSelect={handleSelectParcel}\r\n                  onEdit={handleEditStart}\r\n                />\r\n              ))\r\n            ) : (\r\n              <div className=\"text-center py-8 px-4 border border-dashed rounded-lg\">\r\n                <AlertCircle className=\"h-8 w-8 mx-auto mb-2 text-muted-foreground\" />\r\n                <p className=\"text-muted-foreground\">Không tìm thấy thửa đất nào phù hợp</p>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Colonne de droite - Carte et détails */}\r\n        <div className=\"lg:col-span-2\">\r\n          {selectedParcel ? (\r\n            <div className=\"border rounded-xl overflow-hidden h-full\">\r\n              <div className=\"bg-agri-primary text-white p-4 flex justify-between items-center\">\r\n                {isEditMode ? (\r\n                  <input \r\n                    type=\"text\" \r\n                    value={editedParcel?.name || ''} \r\n                    onChange={(e) => handleInputChange('name', e.target.value)}\r\n                    className=\"px-2 py-1 bg-white/10 border border-white/30 rounded text-white text-xl w-full\"\r\n                  />\r\n                ) : (\r\n                  <h2 className=\"text-xl font-semibold\">{selectedParcel.name}</h2>\r\n                )}\r\n                \r\n                {isEditMode ? (\r\n                  <div className=\"flex space-x-2\">\r\n                    <button \r\n                      onClick={handleSaveEdit}\r\n                      className=\"p-1.5 bg-white/10 hover:bg-white/20 rounded-full\"\r\n                    >\r\n                      <Save className=\"h-5 w-5 text-white\" />\r\n                    </button>\r\n                    <button \r\n                      onClick={handleCancelEdit}\r\n                      className=\"p-1.5 bg-white/10 hover:bg-white/20 rounded-full\"\r\n                    >\r\n                      <Trash2 className=\"h-5 w-5 text-white\" />\r\n                    </button>\r\n                  </div>\r\n                ) : (\r\n                  <button \r\n                    onClick={() => handleEditStart(selectedParcel)}\r\n                    className=\"p-1.5 bg-white/10 hover:bg-white/20 rounded-full\"\r\n                  >\r\n                    <Edit className=\"h-5 w-5 text-white\" />\r\n                  </button>\r\n                )}\r\n              </div>\r\n              \r\n              <div className=\"p-4\">\r\n                <div className=\"bg-muted h-[300px] rounded-lg flex items-center justify-center mb-4\">\r\n                  <p className=\"text-muted-foreground\">Bản đồ thửa đất</p>\r\n                  {/* Tại đây có thể tích hợp bản đồ thực (Google Maps, Leaflet, v.v.) */}\r\n                </div>\r\n                \r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mt-6\">\r\n                  <div className=\"border rounded-lg p-4\">\r\n                    <h3 className=\"font-medium mb-3 flex items-center\">\r\n                      <Calendar className=\"h-4 w-4 mr-2\" />\r\n                              Cây trồng hiện tại\r\n                    </h3>\r\n                    \r\n                    {isEditMode ? (\r\n                      <div className=\"space-y-3\">\r\n                        <div>\r\n                          <label className=\"text-sm text-muted-foreground\">Cây trồng</label>\r\n                          <input \r\n                            type=\"text\" \r\n                            value={editedParcel?.crop || ''} \r\n                            onChange={(e) => handleInputChange('crop', e.target.value)}\r\n                            className=\"w-full px-3 py-2 border border-input rounded-md mt-1\"\r\n                          />\r\n                        </div>\r\n                        <div className=\"grid grid-cols-2 gap-2\">\r\n                          <div>\r\n                            <label className=\"text-sm text-muted-foreground\">Ngày trồng</label>\r\n                            <input \r\n                              type=\"date\" \r\n                              value={editedParcel?.plantingDate || ''} \r\n                              onChange={(e) => handleInputChange('plantingDate', e.target.value)}\r\n                              className=\"w-full px-3 py-2 border border-input rounded-md mt-1\"\r\n                            />\r\n                          </div>\r\n                          <div>\r\n                            <label className=\"text-sm text-muted-foreground\">Ngày thu hoạch</label>\r\n                            <input \r\n                              type=\"date\" \r\n                              value={editedParcel?.harvestDate || ''} \r\n                              onChange={(e) => handleInputChange('harvestDate', e.target.value)}\r\n                              className=\"w-full px-3 py-2 border border-input rounded-md mt-1\"\r\n                            />\r\n                          </div>\r\n                        </div>\r\n                        <div>\r\n                          <label className=\"text-sm text-muted-foreground\">Trạng thái</label>\r\n                          <div className=\"flex space-x-2 mt-1\">\r\n                            <button \r\n                              className={`px-3 py-1.5 text-xs rounded-md ${editedParcel?.status === 'active' ? 'bg-agri-success text-white' : 'bg-muted'}`}\r\n                              onClick={() => handleStatusChange('active')}\r\n                            >\r\n                              Hoạt động\r\n                            </button>\r\n                            <button \r\n                              className={`px-3 py-1.5 text-xs rounded-md ${editedParcel?.status === 'planned' ? 'bg-agri-warning text-white' : 'bg-muted'}`}\r\n                              onClick={() => handleStatusChange('planned')}\r\n                            >\r\n                              Đã lên kế hoạch\r\n                            </button>\r\n                            <button \r\n                              className={`px-3 py-1.5 text-xs rounded-md ${editedParcel?.status === 'inactive' ? 'bg-agri-danger text-white' : 'bg-muted'}`}\r\n                              onClick={() => handleStatusChange('inactive')}\r\n                            >\r\n                              Không hoạt động\r\n                            </button>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    ) : (\r\n                      <div className=\"bg-agri-primary/10 rounded-lg p-3 text-center\">\r\n                        <span className=\"font-semibold text-agri-primary\">{selectedParcel.crop}</span>\r\n                        {selectedParcel.plantingDate && (\r\n                          <p className=\"text-sm mt-1\">Ngày trồng: {new Date(selectedParcel.plantingDate).toLocaleDateString()}</p>\r\n                        )}\r\n                        {selectedParcel.harvestDate && (\r\n                          <p className=\"text-sm\">Dự kiến thu hoạch: {new Date(selectedParcel.harvestDate).toLocaleDateString()}</p>\r\n                        )}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  \r\n                  <div className=\"border rounded-lg p-4\">\r\n                    <h3 className=\"font-medium mb-3 flex items-center\">\r\n                      <Layers className=\"h-4 w-4 mr-2\" />\r\n                      Đặc tính đất\r\n                    </h3>\r\n                    \r\n                    {isEditMode ? (\r\n                      <div className=\"space-y-3\">\r\n                        <div>\r\n                          <label className=\"text-sm text-muted-foreground\">Loại đất</label>\r\n                          <input \r\n                            type=\"text\" \r\n                            value={editedParcel?.soilType || ''} \r\n                            onChange={(e) => handleInputChange('soilType', e.target.value)}\r\n                            className=\"w-full px-3 py-2 border border-input rounded-md mt-1\"\r\n                          />\r\n                        </div>\r\n                        <div>\r\n                          <label className=\"text-sm text-muted-foreground\">Tưới</label>\r\n                          <input \r\n                            type=\"text\" \r\n                            value={editedParcel?.irrigation || ''} \r\n                            onChange={(e) => handleInputChange('irrigation', e.target.value)}\r\n                            className=\"w-full px-3 py-2 border border-input rounded-md mt-1\"\r\n                          />\r\n                        </div>\r\n                        <div>\r\n                          <label className=\"text-sm text-muted-foreground\">Lượng mưa hàng năm (mm)</label>\r\n                          <input \r\n                            type=\"number\" \r\n                            value={editedParcel?.rainfall || ''} \r\n                            onChange={(e) => handleInputChange('rainfall', e.target.value)}\r\n                            className=\"w-full px-3 py-2 border border-input rounded-md mt-1\"\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    ) : (\r\n                      <div className=\"space-y-2\">\r\n                        <div className=\"flex justify-between\">\r\n                          <span className=\"text-sm\">Loại:</span>\r\n                          <span className=\"text-sm font-medium\">{selectedParcel.soilType}</span>\r\n                        </div>\r\n                        <div className=\"flex justify-between\">\r\n                          <span className=\"text-sm\">Tưới:</span>\r\n                          <span className=\"text-sm font-medium\">{selectedParcel.irrigation}</span>\r\n                        </div>\r\n                        <div className=\"flex justify-between\">\r\n                          <span className=\"text-sm\">Lượng mưa:</span>\r\n                          <span className=\"text-sm font-medium\">{selectedParcel.rainfall ? `${selectedParcel.rainfall} mm/năm` : 'Chưa xác định'}</span>\r\n                        </div>\r\n                        <div className=\"flex justify-between\">\r\n                          <span className=\"text-sm\">Diện tích:</span>\r\n                          <span className=\"text-sm font-medium\">{selectedParcel.area} ha</span>\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  \r\n                  <div className=\"border rounded-lg p-4 md:col-span-2\">\r\n                    <h3 className=\"font-medium mb-3\">Ghi chú</h3>\r\n                    \r\n                    {isEditMode ? (\r\n                        <textarea \r\n                        value={editedParcel?.notes || ''}\r\n                        onChange={(e) => handleInputChange('notes', e.target.value)}\r\n                        placeholder=\"Thêm ghi chú của bạn ở đây...\"\r\n                        className=\"w-full px-3 py-2 border border-input rounded-md h-24 resize-none\"\r\n                      />\r\n                    ) : (\r\n                      <div className=\"p-3 bg-muted/30 rounded-lg min-h-[80px]\">\r\n                        {selectedParcel.notes || <span className=\"text-muted-foreground italic\">Chưa có ghi chú cho thửa này</span>}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div className=\"border rounded-xl bg-muted h-full flex flex-col items-center justify-center p-6\">\r\n              <MapPin className=\"h-12 w-12 text-muted-foreground opacity-50 mb-4\" />\r\n              <h3 className=\"text-xl font-medium text-foreground mb-2\">Chọn một thửa đất</h3>\r\n              <p className=\"text-muted-foreground text-center max-w-md\">\r\n                Nhấp vào một thửa ở danh sách bên trái để xem chi tiết và bản đồ\r\n              </p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GuadeloupeParcelManagement;\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\GuadeloupeRainfallTracking.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\GuadeloupeSpecificCrops.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\GuadeloupeWeatherAlerts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\Inventory.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":411,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":411,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12915,12918],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12915,12918],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":506,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":506,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16297,16300],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16297,16300],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef, useEffect } from 'react';\r\nimport { \r\n  Plus, \r\n  ArrowUp, \r\n  ArrowDown,\r\n  ChevronRight,\r\n  X,\r\n  Save,\r\n  FileUp,\r\n  FileDown,\r\n  BarChart2,\r\n  Trash2\r\n} from 'lucide-react';\r\nimport { EditableTable, Column } from './ui/editable-table';\r\nimport { Button } from './ui/button';\r\nimport { Input } from './ui/input';\r\nimport { Label } from './ui/label';\r\nimport { Textarea } from './ui/textarea';\r\nimport { toast } from 'sonner';\r\n// EditableField removed; using inputs/static text instead\r\nimport ConfirmDialog from './inventory/ConfirmDialog';\r\nimport { \r\n  exportInventoryToCSV, \r\n  importInventoryFromCSV,\r\n  exportInventoryToPDF,\r\n  InventoryItem \r\n} from './inventory/ImportExportFunctions';\r\nimport InventoryFilters from './inventory/InventoryFilters';\r\nimport InventoryStats from './inventory/InventoryStats';\r\nimport InventoryAlerts from './inventory/InventoryAlerts';\r\nimport { \r\n  BarChart, \r\n  Bar, \r\n  XAxis, \r\n  YAxis, \r\n  CartesianGrid, \r\n  Tooltip,\r\n  ResponsiveContainer \r\n} from 'recharts';\r\n\r\nconst initialInventoryData = [\r\n  { \r\n    id: 1, \r\n    name: 'Semences de blé', \r\n    category: 'Semences', \r\n    quantity: 500, \r\n    unit: 'kg', \r\n    minQuantity: 100, \r\n    price: 2.5,\r\n    location: 'Hangar principal',\r\n    lastUpdated: '2023-08-01'\r\n  },\r\n  { \r\n    id: 2, \r\n    name: 'Engrais NPK', \r\n    category: 'Engrais', \r\n    quantity: 800, \r\n    unit: 'kg', \r\n    minQuantity: 200, \r\n    price: 1.2,\r\n    location: 'Hangar principal',\r\n    lastUpdated: '2023-07-15'\r\n  },\r\n  { \r\n    id: 3, \r\n    name: 'Herbicide RoundUp', \r\n    category: 'Produits phytosanitaires', \r\n    quantity: 50, \r\n    unit: 'L', \r\n    minQuantity: 20, \r\n    price: 15,\r\n    location: 'Local sécurisé',\r\n    lastUpdated: '2023-08-10'\r\n  },\r\n  { \r\n    id: 4, \r\n    name: 'Carburant Diesel', \r\n    category: 'Carburants', \r\n    quantity: 350, \r\n    unit: 'L', \r\n    minQuantity: 100, \r\n    price: 1.8,\r\n    location: 'Cuve extérieure',\r\n    lastUpdated: '2023-08-18'\r\n  },\r\n  { \r\n    id: 5, \r\n    name: 'Semences de maïs', \r\n    category: 'Semences', \r\n    quantity: 80, \r\n    unit: 'kg', \r\n    minQuantity: 100, \r\n    price: 4.5,\r\n    location: 'Hangar principal',\r\n    lastUpdated: '2023-07-22'\r\n  },\r\n  { \r\n    id: 6, \r\n    name: 'Huile moteur', \r\n    category: 'Lubrifiants', \r\n    quantity: 25, \r\n    unit: 'L', \r\n    minQuantity: 10, \r\n    price: 5.2,\r\n    location: 'Atelier',\r\n    lastUpdated: '2023-06-30'\r\n  },\r\n  { \r\n    id: 7, \r\n    name: 'Ficelle pour bottes', \r\n    category: 'Consommables', \r\n    quantity: 15, \r\n    unit: 'rouleaux', \r\n    minQuantity: 5, \r\n    price: 25,\r\n    location: 'Hangar matériel',\r\n    lastUpdated: '2023-07-05'\r\n  }\r\n];\r\n\r\nconst initialTransactionHistory = [\r\n  { id: 1, itemId: 1, type: 'out', quantity: 50, date: '2023-08-20', user: 'Jean Dupont', notes: 'Semis parcelle nord' },\r\n  { id: 2, itemId: 2, type: 'out', quantity: 200, date: '2023-08-18', user: 'Jean Dupont', notes: 'Application parcelle est' },\r\n  { id: 3, itemId: 4, type: 'in', quantity: 500, date: '2023-08-18', user: 'Marie Martin', notes: 'Livraison mensuelle' },\r\n  { id: 4, itemId: 3, type: 'out', quantity: 5, date: '2023-08-15', user: 'Jean Dupont', notes: 'Application parcelle sud' },\r\n  { id: 5, itemId: 1, type: 'in', quantity: 200, date: '2023-08-10', user: 'Marie Martin', notes: 'Achat supplémentaire' },\r\n  { id: 6, itemId: 6, type: 'out', quantity: 5, date: '2023-08-05', user: 'Pierre Leroy', notes: 'Vidange tracteur' },\r\n];\r\n\r\nconst initialCategoryStats = [\r\n  { name: 'Semences', value: 580, fill: '#4CAF50' },\r\n  { name: 'Engrais', value: 800, fill: '#8D6E63' },\r\n  { name: 'Phytosanitaires', value: 50, fill: '#F44336' },\r\n  { name: 'Carburants', value: 350, fill: '#2196F3' },\r\n  { name: 'Lubrifiants', value: 25, fill: '#FFC107' },\r\n  { name: 'Consommables', value: 15, fill: '#9C27B0' }\r\n];\r\n\r\ninterface InventoryProps {\r\n  searchTerm?: string;\r\n}\r\n\r\nconst Inventory: React.FC<InventoryProps> = ({ searchTerm: externalSearchTerm }) => {\r\n  const [inventoryData, setInventoryData] = useState(initialInventoryData);\r\n  const [transactionHistory, setTransactionHistory] = useState(initialTransactionHistory);\r\n  const [categoryStats, setCategoryStats] = useState(initialCategoryStats);\r\n  \r\n  const [searchTerm, setSearchTerm] = useState(externalSearchTerm || '');\r\n  const [categoryFilter, setCategoryFilter] = useState('all');\r\n  const [sortBy, setSortBy] = useState('name');\r\n  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('asc');\r\n  const [showAddForm, setShowAddForm] = useState(false);\r\n  const [newItem, setNewItem] = useState({\r\n    name: '',\r\n    category: '',\r\n    quantity: 0,\r\n    unit: '',\r\n    minQuantity: 0,\r\n    price: 0,\r\n    location: '',\r\n    notes: ''\r\n  });\r\n  const [selectedItem, setSelectedItem] = useState<InventoryItem | null>(null);\r\n  const [view, setView] = useState<'list' | 'detail' | 'stats'>('list');\r\n  const [showTransactionForm, setShowTransactionForm] = useState<'in' | 'out' | null>(null);\r\n  const [newTransaction, setNewTransaction] = useState({\r\n    quantity: 0,\r\n    notes: '',\r\n    date: new Date().toISOString().split('T')[0]\r\n  });\r\n  \r\n  const [deleteConfirmOpen, setDeleteConfirmOpen] = useState(false);\r\n  const [itemToDelete, setItemToDelete] = useState<number | null>(null);\r\n  const [transactionToDelete, setTransactionToDelete] = useState<number | null>(null);\r\n  const [transactionDeleteConfirmOpen, setTransactionDeleteConfirmOpen] = useState(false);\r\n  \r\n  const fileInputRef = useRef<HTMLInputElement>(null);\r\n  \r\n  useEffect(() => {\r\n    if (externalSearchTerm !== undefined) {\r\n      setSearchTerm(externalSearchTerm);\r\n    }\r\n  }, [externalSearchTerm]);\r\n  \r\n  const generateAlerts = () => {\r\n    return inventoryData\r\n      .filter(item => item.quantity <= item.minQuantity)\r\n      .map(item => ({\r\n        id: item.id,\r\n        name: item.name,\r\n        current: item.quantity,\r\n        min: item.minQuantity,\r\n        status: item.quantity < item.minQuantity * 0.5 ? 'critical' as const : 'warning' as const\r\n      }));\r\n  };\r\n  \r\n  const alerts = generateAlerts();\r\n  \r\n  const filteredItems = inventoryData\r\n    .filter(item => {\r\n      const matchesSearch = item.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                          item.category.toLowerCase().includes(searchTerm.toLowerCase());\r\n      \r\n      if (categoryFilter === 'all') return matchesSearch;\r\n      return matchesSearch && item.category === categoryFilter;\r\n    })\r\n    .sort((a, b) => {\r\n      if (sortBy === 'name') {\r\n        return sortOrder === 'asc' \r\n          ? a.name.localeCompare(b.name)\r\n          : b.name.localeCompare(a.name);\r\n      } else if (sortBy === 'quantity') {\r\n        return sortOrder === 'asc' \r\n          ? a.quantity - b.quantity\r\n          : b.quantity - a.quantity;\r\n      } else if (sortBy === 'price') {\r\n        return sortOrder === 'asc' \r\n          ? a.price - b.price\r\n          : b.price - a.price;\r\n      } else if (sortBy === 'lastUpdated') {\r\n        return sortOrder === 'asc'\r\n          ? new Date(a.lastUpdated).getTime() - new Date(b.lastUpdated).getTime()\r\n          : new Date(b.lastUpdated).getTime() - new Date(a.lastUpdated).getTime();\r\n      }\r\n      return 0;\r\n    });\r\n  \r\n  const categories = ['all', ...new Set(inventoryData.map(item => item.category))];\r\n  \r\n  const handleExportData = () => {\r\n    if (view === 'list') {\r\n      exportInventoryToCSV(inventoryData);\r\n    } else if (view === 'stats') {\r\n      exportInventoryToPDF(inventoryData);\r\n    }\r\n  };\r\n  \r\n  const handleImportClick = () => {\r\n    if (fileInputRef.current) {\r\n      fileInputRef.current.click();\r\n    }\r\n  };\r\n  \r\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = e.target.files?.[0];\r\n    if (!file) return;\r\n    \r\n    importInventoryFromCSV(file, (importedData) => {\r\n      const existingIds = new Set(inventoryData.map(item => item.id));\r\n      const newItems = importedData.filter(item => !existingIds.has(item.id));\r\n      const updatedItems = importedData.filter(item => existingIds.has(item.id));\r\n      \r\n      const updatedInventory = inventoryData.map(item => {\r\n        const updatedItem = updatedItems.find(update => update.id === item.id);\r\n        return updatedItem || item;\r\n      });\r\n      \r\n      setInventoryData([...updatedInventory, ...newItems]);\r\n      \r\n      updateCategoryStats([...updatedInventory, ...newItems]);\r\n    }, {\r\n      onProgress: (progress) => {\r\n        if (progress === 100) {\r\n          toast.success(\"Import terminé avec succès\");\r\n        }\r\n      }\r\n    });\r\n    \r\n    if (fileInputRef.current) {\r\n      fileInputRef.current.value = '';\r\n    }\r\n  };\r\n  \r\n  const updateCategoryStats = (items: typeof inventoryData) => {\r\n    const categories: Record<string, number> = {};\r\n    const colors: Record<string, string> = {};\r\n    \r\n    categoryStats.forEach(stat => {\r\n      colors[stat.name] = stat.fill;\r\n    });\r\n    \r\n    items.forEach(item => {\r\n      if (!categories[item.category]) {\r\n        categories[item.category] = 0;\r\n        if (!colors[item.category]) {\r\n          colors[item.category] = getRandomColor();\r\n        }\r\n      }\r\n      categories[item.category] += item.quantity;\r\n    });\r\n    \r\n    const newStats = Object.entries(categories).map(([name, value]) => ({\r\n      name,\r\n      value,\r\n      fill: colors[name]\r\n    }));\r\n    \r\n    setCategoryStats(newStats);\r\n  };\r\n  \r\n  const confirmDeleteItem = (id: number) => {\r\n    setItemToDelete(id);\r\n    setDeleteConfirmOpen(true);\r\n  };\r\n  \r\n  const handleDeleteItem = () => {\r\n    if (itemToDelete === null) return;\r\n    \r\n    const itemToDeleteObj = inventoryData.find(item => item.id === itemToDelete);\r\n    if (!itemToDeleteObj) return;\r\n    \r\n    setInventoryData(inventoryData.filter(item => item.id !== itemToDelete));\r\n    \r\n    setCategoryStats(categoryStats.map(stat => \r\n      stat.name === itemToDeleteObj.category \r\n        ? { ...stat, value: Math.max(0, stat.value - itemToDeleteObj.quantity) }\r\n        : stat\r\n    ));\r\n    \r\n    if (selectedItem && selectedItem.id === itemToDelete) {\r\n      setSelectedItem(null);\r\n    }\r\n    \r\n    toast.success(`${itemToDeleteObj.name} đã được xóa khỏi kho`);\r\n    setItemToDelete(null);\r\n    setDeleteConfirmOpen(false);\r\n  };\r\n  \r\n  const confirmDeleteTransaction = (id: number) => {\r\n    setTransactionToDelete(id);\r\n    setTransactionDeleteConfirmOpen(true);\r\n  };\r\n  \r\n  const handleDeleteTransaction = () => {\r\n    if (transactionToDelete === null || !selectedItem) return;\r\n    \r\n    const transaction = transactionHistory.find(t => t.id === transactionToDelete);\r\n    if (!transaction) return;\r\n    \r\n    const updatedTransactions = transactionHistory.filter(t => t.id !== transactionToDelete);\r\n    setTransactionHistory(updatedTransactions);\r\n    \r\n    const quantityChange = transaction.type === 'in' \r\n      ? -transaction.quantity \r\n      : transaction.quantity;\r\n    \r\n    handleUpdateItem(\r\n      selectedItem.id, \r\n      'quantity', \r\n      Math.max(0, selectedItem.quantity + quantityChange)\r\n    );\r\n    \r\n    toast.success(\"Giao dịch đã được xóa và kho đã được điều chỉnh\");\r\n    setTransactionToDelete(null);\r\n    setTransactionDeleteConfirmOpen(false);\r\n  };\r\n  \r\n  const handleAddItem = () => {\r\n    if (!newItem.name || !newItem.category || !newItem.unit) {\r\n      toast.error(\"Vui lòng điền đầy đủ các trường bắt buộc\");\r\n      return;\r\n    }\r\n    \r\n    const newId = Math.max(...inventoryData.map(item => item.id), 0) + 1;\r\n    const itemToAdd = {\r\n      ...newItem,\r\n      id: newId,\r\n      lastUpdated: new Date().toISOString().split('T')[0],\r\n      quantity: Number(newItem.quantity),\r\n      minQuantity: Number(newItem.minQuantity),\r\n      price: Number(newItem.price)\r\n    };\r\n    \r\n    setInventoryData([...inventoryData, itemToAdd]);\r\n    \r\n    const existingCategoryStat = categoryStats.find(stat => stat.name === newItem.category);\r\n    if (existingCategoryStat) {\r\n      setCategoryStats(categoryStats.map(stat => \r\n        stat.name === newItem.category \r\n          ? { ...stat, value: stat.value + Number(newItem.quantity) }\r\n          : stat\r\n      ));\r\n    } else {\r\n      setCategoryStats([...categoryStats, { \r\n        name: newItem.category, \r\n        value: Number(newItem.quantity),\r\n        fill: getRandomColor()\r\n      }]);\r\n    }\r\n    \r\n    setShowAddForm(false);\r\n    setNewItem({\r\n      name: '',\r\n      category: '',\r\n      quantity: 0,\r\n      unit: '',\r\n      minQuantity: 0,\r\n      price: 0,\r\n      location: '',\r\n      notes: ''\r\n    });\r\n    \r\n    toast.success(`${newItem.name} đã được thêm vào kho`);\r\n  };\r\n  \r\n  const getRandomColor = () => {\r\n    const colors = ['#4CAF50', '#8D6E63', '#F44336', '#2196F3', '#FFC107', '#9C27B0', '#FF5722', '#3F51B5'];\r\n    return colors[Math.floor(Math.random() * colors.length)];\r\n  };\r\n  \r\n  const handleUpdateItem = (id: number, field: string, value: any) => {\r\n    setInventoryData(inventoryData.map(item => {\r\n      if (item.id !== id) return item;\r\n      \r\n      const updatedItem = { \r\n        ...item, \r\n        [field]: value,\r\n        lastUpdated: new Date().toISOString().split('T')[0] \r\n      };\r\n      \r\n      if (selectedItem && selectedItem.id === id) {\r\n        setSelectedItem(updatedItem);\r\n      }\r\n      \r\n      return updatedItem;\r\n    }));\r\n    \r\n    if (field === 'quantity') {\r\n      const item = inventoryData.find(item => item.id === id);\r\n      if (item) {\r\n        const oldQuantity = item.quantity;\r\n        const newQuantity = value;\r\n        const diff = newQuantity - oldQuantity;\r\n        \r\n        setCategoryStats(categoryStats.map(stat => \r\n          stat.name === item.category \r\n            ? { ...stat, value: stat.value + diff }\r\n            : stat\r\n        ));\r\n      }\r\n    }\r\n  };\r\n  \r\n  const handleAddTransaction = (type: 'in' | 'out') => {\r\n    setShowTransactionForm(type);\r\n  };\r\n  \r\n  const handleSubmitTransaction = () => {\r\n    if (!selectedItem || !showTransactionForm || newTransaction.quantity <= 0) {\r\n      toast.error(\"Vui lòng chỉ định số lượng hợp lệ\");\r\n      return;\r\n    }\r\n    \r\n    const newId = Math.max(...transactionHistory.map(t => t.id), 0) + 1;\r\n    const transaction = {\r\n      id: newId,\r\n      itemId: selectedItem.id,\r\n      type: showTransactionForm,\r\n      quantity: newTransaction.quantity,\r\n      date: newTransaction.date,\r\n      user: 'Người dùng hiện tại',\r\n      notes: newTransaction.notes\r\n    };\r\n    \r\n    setTransactionHistory([transaction, ...transactionHistory]);\r\n    \r\n    const updatedQuantity = showTransactionForm === 'in' \r\n      ? selectedItem.quantity + newTransaction.quantity \r\n      : Math.max(0, selectedItem.quantity - newTransaction.quantity);\r\n    \r\n    handleUpdateItem(selectedItem.id, 'quantity', updatedQuantity);\r\n    \r\n    setShowTransactionForm(null);\r\n    setNewTransaction({\r\n      quantity: 0,\r\n      notes: '',\r\n      date: new Date().toISOString().split('T')[0]\r\n    });\r\n    \r\n    toast.success(`${newTransaction.quantity} ${selectedItem.unit} ${showTransactionForm === 'in' ? 'đã được thêm vào' : 'đã được lấy ra khỏi'} kho`);\r\n  };\r\n  \r\n  const itemTransactions = selectedItem \r\n    ? transactionHistory.filter(t => t.itemId === selectedItem.id).sort((a, b) => \r\n        new Date(b.date).getTime() - new Date(a.date).getTime()\r\n      )\r\n    : [];\r\n\r\n  const inventoryColumns: Column[] = [\r\n    { id: 'name', header: 'Article', accessorKey: 'name', isEditable: true },\r\n    { id: 'category', header: 'Catégorie', accessorKey: 'category', isEditable: true },\r\n    { id: 'quantity', header: 'Quantité', accessorKey: 'quantity', type: 'number', isEditable: true },\r\n    { id: 'price', header: 'Prix unitaire', accessorKey: 'price', type: 'number', isEditable: true },\r\n    { id: 'value', header: 'Valeur totale', accessorKey: 'value', type: 'text', isEditable: false },\r\n    { id: 'status', header: 'Statut', accessorKey: 'status', type: 'text', isEditable: false },\r\n  ];\r\n\r\n  const tableData = filteredItems.map(item => ({\r\n    ...item,\r\n    value: `${(item.quantity * item.price).toFixed(2)} €`,\r\n    status: item.quantity <= item.minQuantity \r\n      ? item.quantity < item.minQuantity * 0.5 ? 'critical' : 'warning'\r\n      : 'normal'\r\n  }));\r\n\r\n  const handleTableUpdate = (rowIndex: number, columnId: string, value: any) => {\r\n    const item = filteredItems[rowIndex];\r\n    if (!item) return;\r\n    \r\n    handleUpdateItem(item.id, columnId, value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"animate-enter\">\r\n      <header className=\"flex flex-col md:flex-row md:justify-between md:items-center mb-6 gap-4\">\r\n        <div>\r\n          <h1 className=\"text-2xl font-bold mb-1\">Quản lý Kho</h1>\r\n          <p className=\"text-muted-foreground\">Quản lý kho hàng và theo dõi mức tồn kho</p>\r\n        </div>\r\n        <div className=\"flex flex-wrap gap-2\">\r\n          <Button \r\n            variant={view === 'list' ? 'default' : 'outline'}\r\n            onClick={() => setView('list')}\r\n            className=\"px-4 py-2\"\r\n          >\r\n            Danh sách\r\n          </Button>\r\n          <Button \r\n            variant={view === 'stats' ? 'default' : 'outline'}\r\n            onClick={() => setView('stats')}\r\n            className=\"px-4 py-2\"\r\n          >\r\n            <BarChart2 className=\"mr-2 h-4 w-4\" />\r\n            Thống kê\r\n          </Button>\r\n          <Button \r\n            variant=\"outline\"\r\n            onClick={handleExportData}\r\n            className=\"px-4 py-2\"\r\n          >\r\n            <FileDown className=\"mr-2 h-4 w-4\" />\r\n            Xuất\r\n          </Button>\r\n          <div className=\"relative\">\r\n            <Button \r\n              variant=\"outline\"\r\n              onClick={handleImportClick}\r\n              className=\"px-4 py-2\"\r\n            >\r\n              <FileUp className=\"mr-2 h-4 w-4\" />\r\n              Nhập\r\n            </Button>\r\n            <input \r\n              type=\"file\" \r\n              ref={fileInputRef} \r\n              onChange={handleFileChange} \r\n              accept=\".csv\"\r\n              className=\"hidden\" \r\n            />\r\n          </div>\r\n          <Button \r\n            onClick={() => setShowAddForm(true)}\r\n            className=\"ml-2\"\r\n          >\r\n            <Plus className=\"mr-2 h-4 w-4\" />\r\n            Thêm mặt hàng\r\n          </Button>\r\n        </div>\r\n      </header>\r\n\r\n      <InventoryAlerts \r\n        alerts={alerts} \r\n        onQuantityChange={handleUpdateItem} \r\n      />\r\n\r\n      {view === 'list' ? (\r\n        selectedItem ? (\r\n          <div className=\"border rounded-xl overflow-hidden\">\r\n            <div className=\"bg-agri-primary text-white p-4 flex justify-between items-center\">\r\n              <div className=\"flex items-center\">\r\n                <button \r\n                  onClick={() => setSelectedItem(null)}\r\n                  className=\"mr-3 hover:bg-white/10 p-1 rounded\"\r\n                  aria-label=\"Quay lại danh sách\"\r\n                >\r\n                  <ChevronRight className=\"h-5 w-5 transform rotate-180\" />\r\n                </button>\r\n                <span className=\"text-xl font-semibold\">{selectedItem.name}</span>\r\n              </div>\r\n              <div className=\"flex flex-wrap gap-2\">\r\n                <Button \r\n                  onClick={() => handleAddTransaction('in')}\r\n                  variant=\"outline\"\r\n                  className=\"bg-white/10 hover:bg-white/20 text-white border-none\"\r\n                >\r\n                  <ArrowDown className=\"mr-1.5 h-4 w-4\" />\r\n                  <span className=\"hidden sm:inline\">Nhập</span>\r\n                </Button>\r\n                <Button \r\n                  onClick={() => handleAddTransaction('out')}\r\n                  variant=\"outline\"\r\n                  className=\"bg-white/10 hover:bg-white/20 text-white border-none\"\r\n                >\r\n                  <ArrowUp className=\"mr-1.5 h-4 w-4\" />\r\n                  <span className=\"hidden sm:inline\">Xuất</span>\r\n                </Button>\r\n                <Button \r\n                  onClick={() => confirmDeleteItem(selectedItem.id)}\r\n                  variant=\"outline\"\r\n                  className=\"bg-white/10 hover:bg-white/20 text-white border-none\"\r\n                >\r\n                  <Trash2 className=\"mr-1.5 h-4 w-4\" />\r\n                  <span className=\"hidden sm:inline\">Xóa</span>\r\n                </Button>\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"p-6\">\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\r\n                <div className=\"bg-white rounded-lg border p-4\">\r\n                  <h3 className=\"font-medium mb-3\">Chi tiết mặt hàng</h3>\r\n                  <div className=\"space-y-2\">\r\n                    <div className=\"flex justify-between items-center\">\r\n                      <span className=\"text-muted-foreground\">Danh mục:</span>\r\n                      <input\r\n                        className=\"border rounded px-2 py-1\"\r\n                        defaultValue={selectedItem.category}\r\n                        onBlur={(e) => handleUpdateItem(selectedItem.id, 'category', e.target.value)}\r\n                      />\r\n                    </div>\r\n                    <div className=\"flex justify-between items-center\">\r\n                      <span className=\"text-muted-foreground\">Số lượng:</span>\r\n                      <div className=\"flex items-center\">\r\n                        <input\r\n                          type=\"number\"\r\n                          className=\"border rounded px-2 py-1 font-medium\"\r\n                          defaultValue={selectedItem.quantity}\r\n                          onBlur={(e) => handleUpdateItem(selectedItem.id, 'quantity', Number(e.target.value))}\r\n                        />\r\n                        <input\r\n                          className=\"border rounded px-2 py-1 ml-1\"\r\n                          defaultValue={selectedItem.unit}\r\n                          onBlur={(e) => handleUpdateItem(selectedItem.id, 'unit', e.target.value)}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"flex justify-between items-center\">\r\n                      <span className=\"text-muted-foreground\">Ngưỡng tối thiểu:</span>\r\n                      <div className=\"flex items-center\">\r\n                        <input\r\n                          type=\"number\"\r\n                          className=\"border rounded px-2 py-1\"\r\n                          defaultValue={selectedItem.minQuantity}\r\n                          onBlur={(e) => handleUpdateItem(selectedItem.id, 'minQuantity', Number(e.target.value))}\r\n                        />\r\n                        <span className=\"ml-1\">{selectedItem.unit}</span>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"flex justify-between items-center\">\r\n                      <span className=\"text-muted-foreground\">Giá đơn vị:</span>\r\n                      <div className=\"flex items-center\">\r\n                        <input\r\n                          type=\"number\"\r\n                          className=\"border rounded px-2 py-1\"\r\n                          defaultValue={selectedItem.price}\r\n                          onBlur={(e) => handleUpdateItem(selectedItem.id, 'price', Number(e.target.value))}\r\n                        />\r\n                        <span className=\"ml-1\">€/{selectedItem.unit}</span>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"flex justify-between items-center\">\r\n                      <span className=\"text-muted-foreground\">Giá trị tổng:</span>\r\n                      <span className=\"font-medium\">{(selectedItem.quantity * selectedItem.price).toFixed(2)} €</span>\r\n                    </div>\r\n                    <div className=\"flex justify-between items-center\">\r\n                      <span className=\"text-muted-foreground\">Vị trí:</span>\r\n                      <input\r\n                        className=\"border rounded px-2 py-1\"\r\n                        defaultValue={selectedItem.location}\r\n                        onBlur={(e) => handleUpdateItem(selectedItem.id, 'location', e.target.value)}\r\n                      />\r\n                    </div>\r\n                    <div className=\"flex justify-between items-center\">\r\n                      <span className=\"text-muted-foreground\">Cập nhật cuối:</span>\r\n                      <span>{new Date(selectedItem.lastUpdated).toLocaleDateString()}</span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                \r\n                <div className=\"bg-white rounded-lg border p-4\">\r\n                  <h3 className=\"font-medium mb-3\">Thống kê</h3>\r\n                  <div className=\"h-[200px]\">\r\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                      <BarChart\r\n                        data={[\r\n                          { name: 'Tồn kho hiện tại', value: selectedItem.quantity },\r\n                          { name: 'Ngưỡng tối thiểu', value: selectedItem.minQuantity }\r\n                        ]}\r\n                        margin={{ top: 10, right: 30, left: 20, bottom: 40 }}\r\n                      >\r\n                        <CartesianGrid strokeDasharray=\"3 3\" vertical={false} />\r\n                        <XAxis dataKey=\"name\" />\r\n                        <YAxis />\r\n                        <Tooltip formatter={(value) => [`${value} ${selectedItem.unit}`, '']} />\r\n                        <Bar \r\n                          dataKey=\"value\" \r\n                          fill=\"#4CAF50\" \r\n                          radius={[4, 4, 0, 0]}\r\n                          fillOpacity={1}\r\n                        />\r\n                      </BarChart>\r\n                    </ResponsiveContainer>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              \r\n              {showTransactionForm && (\r\n                <div className=\"mb-6 p-4 border rounded-lg bg-muted/10\">\r\n                  <div className=\"flex justify-between items-center mb-3\">\r\n                    <h3 className=\"font-medium\">\r\n                      {showTransactionForm === 'in' ? 'Nhập mới' : 'Xuất mới'}\r\n                    </h3>\r\n                    <Button \r\n                      variant=\"ghost\" \r\n                      onClick={() => setShowTransactionForm(null)}\r\n                      size=\"sm\"\r\n                    >\r\n                      <X className=\"h-4 w-4\" />\r\n                    </Button>\r\n                  </div>\r\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n                    <div>\r\n                      <Label htmlFor=\"quantity\">Số lượng</Label>\r\n                      <div className=\"flex items-center mt-1\">\r\n                        <Input\r\n                          id=\"quantity\"\r\n                          type=\"number\"\r\n                          value={newTransaction.quantity}\r\n                          onChange={(e) => setNewTransaction({\r\n                            ...newTransaction,\r\n                            quantity: parseInt(e.target.value) || 0\r\n                          })}\r\n                          min={0}\r\n                        />\r\n                        <span className=\"ml-2\">{selectedItem.unit}</span>\r\n                      </div>\r\n                    </div>\r\n                    <div>\r\n                      <Label htmlFor=\"date\">Ngày</Label>\r\n                      <Input\r\n                        id=\"date\"\r\n                        type=\"date\"\r\n                        value={newTransaction.date}\r\n                        onChange={(e) => setNewTransaction({\r\n                          ...newTransaction,\r\n                          date: e.target.value\r\n                        })}\r\n                        className=\"mt-1\"\r\n                      />\r\n                    </div>\r\n                    <div>\r\n                      <Label htmlFor=\"notes\">Ghi chú</Label>\r\n                      <Input\r\n                        id=\"notes\"\r\n                        value={newTransaction.notes}\r\n                        onChange={(e) => setNewTransaction({\r\n                          ...newTransaction,\r\n                          notes: e.target.value\r\n                        })}\r\n                        placeholder=\"Bình luận...\"\r\n                        className=\"mt-1\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"flex justify-end mt-4\">\r\n                    <Button \r\n                      variant=\"outline\" \r\n                      onClick={() => setShowTransactionForm(null)}\r\n                      className=\"mr-2\"\r\n                    >\r\n                      Hủy\r\n                    </Button>\r\n                    <Button onClick={handleSubmitTransaction}>\r\n                      <Save className=\"mr-2 h-4 w-4\" />\r\n                      Lưu\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              )}\r\n              \r\n              <div className=\"mt-6\">\r\n                <div className=\"flex justify-between items-center mb-3\">\r\n                  <h3 className=\"font-medium\">Lịch sử giao dịch</h3>\r\n                </div>\r\n                <div className=\"overflow-x-auto\">\r\n                  <table className=\"w-full text-sm\">\r\n                    <thead className=\"text-xs uppercase bg-muted\">\r\n                      <tr>\r\n                        <th className=\"px-4 py-2 text-left\">Ngày</th>\r\n                        <th className=\"px-4 py-2 text-left\">Loại</th>\r\n                        <th className=\"px-4 py-2 text-left\">Số lượng</th>\r\n                        <th className=\"px-4 py-2 text-left\">Người dùng</th>\r\n                        <th className=\"px-4 py-2 text-left\">Ghi chú</th>\r\n                        <th className=\"px-4 py-2 text-left\">Hành động</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      {itemTransactions.map((transaction) => (\r\n                        <tr key={transaction.id} className=\"border-t\">\r\n                          <td className=\"px-4 py-3\">{new Date(transaction.date).toLocaleDateString()}</td>\r\n                          <td className=\"px-4 py-3\">\r\n                            <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs ${\r\n                              transaction.type === 'in' \r\n                                ? 'bg-agri-success/10 text-agri-success' \r\n                                : 'bg-agri-warning/10 text-agri-warning'\r\n                            }`}>\r\n                              {transaction.type === 'in' ? (\r\n                                <>\r\n                                  <ArrowDown className=\"h-3 w-3 mr-1\" />\r\n                                  Nhập\r\n                                </>\r\n                              ) : (\r\n                                <>\r\n                                  <ArrowUp className=\"h-3 w-3 mr-1\" />\r\n                                  Xuất\r\n                                </>\r\n                              )}\r\n                            </span>\r\n                          </td>\r\n                          <td className=\"px-4 py-3\">{transaction.quantity} {selectedItem.unit}</td>\r\n                          <td className=\"px-4 py-3\">{transaction.user}</td>\r\n                          <td className=\"px-4 py-3\">\r\n                            <textarea\r\n                              className=\"w-full border rounded px-2 py-1\"\r\n                              defaultValue={transaction.notes}\r\n                              onBlur={(e) => {\r\n                                const updatedTransactions = [...transactionHistory];\r\n                                const index = updatedTransactions.findIndex(t => t.id === transaction.id);\r\n                                if (index !== -1) {\r\n                                  updatedTransactions[index] = {\r\n                                    ...updatedTransactions[index],\r\n                                    notes: e.target.value\r\n                                  };\r\n                                  setTransactionHistory(updatedTransactions);\r\n                                }\r\n                              }}\r\n                            />\r\n                          </td>\r\n                          <td className=\"px-4 py-3\">\r\n                            <button\r\n                              onClick={() => confirmDeleteTransaction(transaction.id)}\r\n                              className=\"p-1.5 hover:bg-agri-danger/10 text-agri-danger rounded\"\r\n                              title=\"Xóa giao dịch\"\r\n                            >\r\n                              <Trash2 className=\"h-4 w-4\" />\r\n                            </button>\r\n                          </td>\r\n                        </tr>\r\n                      ))}\r\n                      {itemTransactions.length === 0 && (\r\n                        <tr>\r\n                          <td colSpan={6} className=\"px-4 py-4 text-center text-muted-foreground\">\r\n                            Không có giao dịch nào được ghi nhận\r\n                          </td>\r\n                        </tr>\r\n                      )}\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <div className=\"mb-6\">\r\n              <InventoryFilters \r\n                searchTerm={searchTerm}\r\n                setSearchTerm={setSearchTerm}\r\n                categoryFilter={categoryFilter}\r\n                setCategoryFilter={setCategoryFilter}\r\n                categories={categories}\r\n                sortBy={sortBy}\r\n                setSortBy={setSortBy}\r\n                sortOrder={sortOrder}\r\n                setSortOrder={setSortOrder as () => void}\r\n              />\r\n            </div>\r\n            \r\n            <EditableTable\r\n              data={tableData}\r\n              columns={inventoryColumns}\r\n              onUpdate={handleTableUpdate}\r\n              onDelete={(rowIndex) => confirmDeleteItem(filteredItems[rowIndex].id)}\r\n              actions={[\r\n                { \r\n                  icon: <ChevronRight className=\"h-4 w-4\" />,\r\n                  label: \"Xem chi tiết\",\r\n                  onClick: (rowIndex) => setSelectedItem(filteredItems[rowIndex])\r\n                }\r\n              ]}\r\n              className=\"mb-6\"\r\n              sortable={true}\r\n            />\r\n            \r\n            {showAddForm && (\r\n              <div className=\"border rounded-xl p-6 bg-muted/5 animate-enter\">\r\n                <div className=\"flex justify-between items-center mb-4\">\r\n                  <h3 className=\"text-lg font-medium\">Thêm mặt hàng mới</h3>\r\n                  <Button \r\n                    variant=\"ghost\" \r\n                    size=\"sm\" \r\n                    onClick={() => setShowAddForm(false)}\r\n                  >\r\n                    <X className=\"h-4 w-4\" />\r\n                  </Button>\r\n                </div>\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n                  <div>\r\n                    <Label htmlFor=\"name\">Tên mặt hàng*</Label>\r\n                    <Input\r\n                      id=\"name\"\r\n                      value={newItem.name}\r\n                      onChange={(e) => setNewItem({ ...newItem, name: e.target.value })}\r\n                      className=\"mt-1\"\r\n                      placeholder=\"Vd: Hạt giống lúa mì\"\r\n                    />\r\n                  </div>\r\n                  <div>\r\n                    <Label htmlFor=\"category\">Danh mục*</Label>\r\n                    <Input\r\n                      id=\"category\"\r\n                      value={newItem.category}\r\n                      onChange={(e) => setNewItem({ ...newItem, category: e.target.value })}\r\n                      className=\"mt-1\"\r\n                      list=\"categories-list\"\r\n                      placeholder=\"Vd: Hạt giống\"\r\n                    />\r\n                    <datalist id=\"categories-list\">\r\n                      {categories\r\n                        .filter(cat => cat !== 'all')\r\n                        .map((category) => (\r\n                          <option key={category} value={category} />\r\n                        ))}\r\n                    </datalist>\r\n                  </div>\r\n                  <div>\r\n                    <Label htmlFor=\"quantity\">Số lượng ban đầu*</Label>\r\n                    <div className=\"flex mt-1\">\r\n                      <Input\r\n                        id=\"quantity\"\r\n                        type=\"number\"\r\n                        value={newItem.quantity}\r\n                        onChange={(e) => setNewItem({ ...newItem, quantity: Number(e.target.value) })}\r\n                        min={0}\r\n                      />\r\n                      <Input\r\n                        className=\"w-24 ml-2\"\r\n                        placeholder=\"Đơn vị\"\r\n                        value={newItem.unit}\r\n                        onChange={(e) => setNewItem({ ...newItem, unit: e.target.value })}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div>\r\n                    <Label htmlFor=\"minQuantity\">Ngưỡng cảnh báo tối thiểu</Label>\r\n                    <Input\r\n                      id=\"minQuantity\"\r\n                      type=\"number\"\r\n                      value={newItem.minQuantity}\r\n                      onChange={(e) => setNewItem({ ...newItem, minQuantity: Number(e.target.value) })}\r\n                      className=\"mt-1\"\r\n                      min={0}\r\n                    />\r\n                  </div>\r\n                  <div>\r\n                    <Label htmlFor=\"price\">Giá đơn vị (€)</Label>\r\n                    <Input\r\n                      id=\"price\"\r\n                      type=\"number\"\r\n                      value={newItem.price}\r\n                      onChange={(e) => setNewItem({ ...newItem, price: Number(e.target.value) })}\r\n                      className=\"mt-1\"\r\n                      min={0}\r\n                      step=\"0.01\"\r\n                    />\r\n                  </div>\r\n                  <div>\r\n                    <Label htmlFor=\"location\">Vị trí</Label>\r\n                    <Input\r\n                      id=\"location\"\r\n                      value={newItem.location}\r\n                      onChange={(e) => setNewItem({ ...newItem, location: e.target.value })}\r\n                      className=\"mt-1\"\r\n                      placeholder=\"Vd: Nhà kho chính\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"md:col-span-2 lg:col-span-3\">\r\n                    <Label htmlFor=\"notes\">Ghi chú bổ sung</Label>\r\n                    <Textarea\r\n                      id=\"notes\"\r\n                      value={newItem.notes || ''}\r\n                      onChange={(e) => setNewItem({ ...newItem, notes: e.target.value })}\r\n                      className=\"mt-1\"\r\n                      placeholder=\"Thông tin bổ sung về mặt hàng...\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div className=\"mt-6 flex justify-end\">\r\n                  <Button \r\n                    variant=\"outline\" \r\n                    onClick={() => setShowAddForm(false)} \r\n                    className=\"mr-2\"\r\n                  >\r\n                    Hủy\r\n                  </Button>\r\n                  <Button onClick={handleAddItem}>\r\n                    <Plus className=\"mr-2 h-4 w-4\" />\r\n                    Thêm mặt hàng\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )\r\n      ) : (\r\n        <InventoryStats \r\n          inventoryData={inventoryData} \r\n          categoryStats={categoryStats} \r\n        />\r\n      )}\r\n\r\n      <ConfirmDialog \r\n        open={deleteConfirmOpen} \r\n        title=\"Xóa mặt hàng\" \r\n        description=\"Bạn có chắc chắn muốn xóa mặt hàng này? Hành động này không thể hoàn tác.\"\r\n        confirmText=\"Xóa\"\r\n        cancelText=\"Hủy\"\r\n        onConfirm={handleDeleteItem}\r\n        onOpenChange={() => setDeleteConfirmOpen(false)}\r\n      />\r\n\r\n      <ConfirmDialog \r\n        open={transactionDeleteConfirmOpen} \r\n        title=\"Xóa giao dịch\" \r\n        description=\"Bạn có chắc chắn muốn xóa giao dịch này? Tồn kho sẽ được điều chỉnh tương ứng.\"\r\n        confirmText=\"Xóa\"\r\n        cancelText=\"Hủy\"\r\n        onConfirm={handleDeleteTransaction}\r\n        onOpenChange={() => setTransactionDeleteConfirmOpen(false)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Inventory;\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\Navbar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ParcelManagement.tsx","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from 'no-unused-vars').","line":125,"column":3,"severity":1,"nodeType":null,"fix":{"range":[2750,2792],"text":" "}},{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from 'no-unused-vars').","line":127,"column":3,"severity":1,"nodeType":null,"fix":{"range":[2839,2881],"text":" "}},{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from 'no-unused-vars').","line":129,"column":3,"severity":1,"nodeType":null,"fix":{"range":[2926,2968],"text":" "}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"\r\nimport React, { useState } from 'react';\r\nimport { \r\n  MapPin, \r\n  Layers, \r\n  Calendar, \r\n  Filter,\r\n  Plus,\r\n  Search,\r\n  Edit,\r\n  Trash2,\r\n  AlertCircle,\r\n  Save,\r\n  X,\r\n  Download,\r\n  Upload,\r\n  ChevronDown\r\n} from 'lucide-react';\r\nimport { toast } from 'sonner';\r\nimport { EditableTable, Column } from './ui/editable-table';\r\nimport ParcelMap from './ParcelMap';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { \r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/components/ui/select\";\r\n\r\n// Types for parcels\r\ninterface ParcelData {\r\n  id: number;\r\n  name: string;\r\n  area: number;\r\n  crop: string;\r\n  status: 'active' | 'inactive' | 'planned';\r\n  lastActivity: string;\r\n  soilType: string;\r\n  coordinates: { lat: number; lng: number };\r\n  notes?: string;\r\n  ph?: number;\r\n  organicMatter?: number;\r\n}\r\n\r\ninterface CropHistoryEntry {\r\n  year: string;\r\n  crop: string;\r\n  yield: string;\r\n  notes: string;\r\n}\r\n\r\n// Initial data for parcels\r\nconst initialParcelData: ParcelData[] = [\r\n  { \r\n    id: 1, \r\n    name: 'Lô đất Bắc', \r\n    area: 12.5, \r\n    crop: 'Lúa mì', \r\n    status: 'active', \r\n    lastActivity: '2023-08-15', \r\n    soilType: 'Đất sét', \r\n    coordinates: { lat: 45.4397, lng: 4.3872 },\r\n    ph: 6.8,\r\n    organicMatter: 3.2\r\n  },\r\n  { \r\n    id: 2, \r\n    name: 'Lô đất Đông', \r\n    area: 8.3, \r\n    crop: 'Ngô', \r\n    status: 'active', \r\n    lastActivity: '2023-08-10', \r\n    soilType: 'Đất thịt', \r\n    coordinates: { lat: 45.4412, lng: 4.3901 }\r\n  },\r\n  { \r\n    id: 3, \r\n    name: 'Lô đất Nam', \r\n    area: 15.7, \r\n    crop: 'Hướng dương', \r\n    status: 'active', \r\n    lastActivity: '2023-08-05', \r\n    soilType: 'Đất cát', \r\n    coordinates: { lat: 45.4380, lng: 4.3855 }\r\n  },\r\n  { \r\n    id: 4, \r\n    name: 'Lô đất Tây', \r\n    area: 10.2, \r\n    crop: 'Lúa mạch', \r\n    status: 'inactive', \r\n    lastActivity: '2023-07-20', \r\n    soilType: 'Đất sét thịt', \r\n    coordinates: { lat: 45.4405, lng: 4.3840 }\r\n  },\r\n  { \r\n    id: 5, \r\n    name: 'Parcelle Centrale', \r\n    area: 6.8, \r\n    crop: 'Luzerne', \r\n    status: 'planned', \r\n    lastActivity: '2023-08-01', \r\n    soilType: 'Limoneux', \r\n    coordinates: { lat: 45.4390, lng: 4.3885 }\r\n  },\r\n];\r\n\r\n// Initial crop history data\r\nconst initialCropHistory: CropHistoryEntry[] = [\r\n  { year: '2022', crop: 'Ngô', yield: '8.2 t/ha', notes: 'Mùa hè khô hạn' },\r\n  { year: '2021', crop: 'Lúa mì', yield: '7.5 t/ha', notes: '-' },\r\n  { year: '2020', crop: 'Cải dầu', yield: '3.8 t/ha', notes: 'Vấn đề sâu bệnh' }\r\n];\r\n\r\n// Component for the visual representation of a parcel\r\nconst ParcelCard = ({ \r\n  parcel, \r\n  onSelect, \r\n  onEdit,\r\n  onDelete\r\n}: { \r\n  parcel: ParcelData, \r\n  // eslint-disable-next-line no-unused-vars\r\n  onSelect: (parcel: ParcelData) => void,\r\n  // eslint-disable-next-line no-unused-vars\r\n  onEdit: (parcel: ParcelData) => void,\r\n  // eslint-disable-next-line no-unused-vars\r\n  onDelete: (id: number) => void\r\n}) => {\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'active': return 'bg-agri-success';\r\n      case 'inactive': return 'bg-agri-danger';\r\n      case 'planned': return 'bg-agri-warning';\r\n      default: return 'bg-gray-300';\r\n    }\r\n  };\r\n\r\n  const getStatusLabel = (status: string) => {\r\n    switch (status) {\r\n      case 'active': return 'Hoạt động';\r\n      case 'inactive': return 'Không hoạt động';\r\n      case 'planned': return 'Đã lên kế hoạch';\r\n      default: return 'Không xác định';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div \r\n      className=\"border rounded-xl p-4 bg-white hover:shadow-md transition-shadow cursor-pointer card-hover\"\r\n      onClick={() => onSelect(parcel)}\r\n    >\r\n      <div className=\"flex justify-between items-start mb-3\">\r\n        <h3 className=\"font-medium\">{parcel.name}</h3>\r\n        <div className={`flex items-center px-2 py-0.5 rounded-full text-xs ${getStatusColor(parcel.status)} bg-opacity-10 text-foreground`}>\r\n          <span className={`w-2 h-2 rounded-full ${getStatusColor(parcel.status)} mr-1.5`}></span>\r\n          {getStatusLabel(parcel.status)}\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"grid grid-cols-2 gap-y-2 text-sm text-muted-foreground mb-3\">\r\n        <div className=\"flex items-center\">\r\n          <Layers className=\"h-4 w-4 mr-1.5\" />\r\n          <span>{parcel.area} ha</span>\r\n        </div>\r\n        <div className=\"flex items-center\">\r\n          <Calendar className=\"h-4 w-4 mr-1.5\" />\r\n          <span>{new Date(parcel.lastActivity).toLocaleDateString()}</span>\r\n        </div>\r\n        <div className=\"col-span-2 mt-1 py-1 px-2 bg-agri-primary/5 rounded-md text-center\">\r\n          <span className=\"text-agri-primary font-medium\">{parcel.crop}</span>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"flex justify-between mt-2 pt-2 border-t border-border\">\r\n        <button \r\n          className=\"p-1.5 hover:bg-gray-100 rounded\"\r\n          onClick={(e) => {\r\n            e.stopPropagation();\r\n            onEdit(parcel);\r\n          }}\r\n        >\r\n          <Edit className=\"h-4 w-4 text-muted-foreground\" />\r\n        </button>\r\n        <button \r\n          className=\"p-1.5 hover:bg-gray-100 rounded\"\r\n          onClick={(e) => {\r\n            e.stopPropagation();\r\n            onSelect(parcel);\r\n          }}\r\n        >\r\n          <MapPin className=\"h-4 w-4 text-muted-foreground\" />\r\n        </button>\r\n        <button \r\n          className=\"p-1.5 hover:bg-gray-100 rounded text-agri-danger\"\r\n          onClick={(e) => {\r\n            e.stopPropagation();\r\n            onDelete(parcel.id);\r\n          }}\r\n        >\r\n          <Trash2 className=\"h-4 w-4\" />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ParcelManagement = () => {\r\n  const [parcels, setParcels] = useState<ParcelData[]>(initialParcelData);\r\n  const [selectedParcel, setSelectedParcel] = useState<ParcelData | null>(null);\r\n  const [editingParcel, setEditingParcel] = useState<ParcelData | null>(null);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [filter, setFilter] = useState('all');\r\n  const [sortBy, setSortBy] = useState('name');\r\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [cropHistory, setCropHistory] = useState<CropHistoryEntry[]>(initialCropHistory);\r\n  const [showAddParcelForm, setShowAddParcelForm] = useState(false);\r\n  const [newParcel, setNewParcel] = useState<Partial<ParcelData>>({\r\n    name: '',\r\n    area: 0,\r\n    crop: '',\r\n    status: 'planned',\r\n    lastActivity: new Date().toISOString().split('T')[0],\r\n    soilType: '',\r\n    coordinates: { lat: 45.4390, lng: 4.3885 }\r\n  });\r\n  const [parcelNotes, setParcelNotes] = useState<string>('');\r\n  \r\n  // Filter parcels based on search term and filter\r\n  const filteredParcels = parcels.filter(parcel => {\r\n    const matchesSearch = parcel.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                         parcel.crop.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                         parcel.soilType.toLowerCase().includes(searchTerm.toLowerCase());\r\n    \r\n    if (filter === 'all') return matchesSearch;\r\n    return matchesSearch && parcel.status === filter;\r\n  });\r\n\r\n  // Sort parcels\r\n  const sortedParcels = [...filteredParcels].sort((a, b) => {\r\n    let comparison = 0;\r\n    \r\n    switch (sortBy) {\r\n      case 'name':\r\n        comparison = a.name.localeCompare(b.name);\r\n        break;\r\n      case 'area':\r\n        comparison = a.area - b.area;\r\n        break;\r\n      case 'crop':\r\n        comparison = a.crop.localeCompare(b.crop);\r\n        break;\r\n      case 'date':\r\n        comparison = new Date(a.lastActivity).getTime() - new Date(b.lastActivity).getTime();\r\n        break;\r\n      default:\r\n        comparison = 0;\r\n    }\r\n    \r\n    return sortDirection === 'asc' ? comparison : -comparison;\r\n  });\r\n\r\n  const handleSelectParcel = (parcel: ParcelData) => {\r\n    setSelectedParcel(parcel);\r\n    setIsEditing(false);\r\n    // Set notes from the parcel\r\n    setParcelNotes(parcel.notes || '');\r\n  };\r\n\r\n  const handleEditParcel = (parcel: ParcelData) => {\r\n    setEditingParcel({...parcel});\r\n    setSelectedParcel(parcel);\r\n    setIsEditing(true);\r\n  };\r\n\r\n  const handleSaveEdit = () => {\r\n    if (editingParcel) {\r\n      // Include notes in the update\r\n      const updatedParcel = {\r\n        ...editingParcel,\r\n        notes: parcelNotes\r\n      };\r\n      \r\n      setParcels(parcels.map(p => p.id === updatedParcel.id ? updatedParcel : p));\r\n      setSelectedParcel(updatedParcel);\r\n      setIsEditing(false);\r\n      toast.success('Lô đất đã được cập nhật');\r\n    }\r\n  };\r\n\r\n  const handleCancelEdit = () => {\r\n    setIsEditing(false);\r\n    setEditingParcel(null);\r\n    // Reset notes to the original value\r\n    if (selectedParcel) {\r\n      setParcelNotes(selectedParcel.notes || '');\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (field: keyof ParcelData, value: string | number) => {\r\n    if (editingParcel) {\r\n      setEditingParcel(prev => {\r\n        if (!prev) return null;\r\n        \r\n        if (field === 'area' || field === 'ph' || field === 'organicMatter') {\r\n          return { ...prev, [field]: Number(value) };\r\n        }\r\n        \r\n        return { ...prev, [field]: value };\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleCoordinatesChange = (coordinates: { lat: number; lng: number }) => {\r\n    if (editingParcel) {\r\n      setEditingParcel({...editingParcel, coordinates});\r\n    }\r\n  };\r\n\r\n  const handleStatusChange = (status: 'active' | 'inactive' | 'planned') => {\r\n    if (editingParcel) {\r\n      setEditingParcel({...editingParcel, status});\r\n    }\r\n  };\r\n\r\n  const handleDeleteParcel = (id: number) => {\r\n    setParcels(parcels.filter(p => p.id !== id));\r\n    if (selectedParcel?.id === id) {\r\n      setSelectedParcel(null);\r\n    }\r\n    toast.success('Lô đất đã được xóa');\r\n  };\r\n\r\n  const handleAddParcel = () => {\r\n    setShowAddParcelForm(true);\r\n  };\r\n\r\n  const handleSaveNewParcel = () => {\r\n    const newId = Math.max(0, ...parcels.map(p => p.id)) + 1;\r\n    const createdParcel: ParcelData = {\r\n      id: newId,\r\n      name: newParcel.name || `Nouvelle Parcelle ${newId}`,\r\n      area: newParcel.area || 0,\r\n      crop: newParcel.crop || '',\r\n      status: newParcel.status as ParcelData['status'] || 'planned',\r\n      lastActivity: newParcel.lastActivity || new Date().toISOString().split('T')[0],\r\n      soilType: newParcel.soilType || '',\r\n      coordinates: newParcel.coordinates || { lat: 45.4390, lng: 4.3885 },\r\n    };\r\n    \r\n    setParcels([...parcels, createdParcel]);\r\n    setNewParcel({\r\n      name: '',\r\n      area: 0,\r\n      crop: '',\r\n      status: 'planned',\r\n      lastActivity: new Date().toISOString().split('T')[0],\r\n      soilType: '',\r\n      coordinates: { lat: 45.4390, lng: 4.3885 }\r\n    });\r\n    setShowAddParcelForm(false);\r\n    toast.success('Lô đất mới đã được tạo');\r\n  };\r\n\r\n  const handleNewParcelInputChange = (field: keyof ParcelData, value: string | number) => {\r\n    setNewParcel(prev => {\r\n      if (field === 'area') {\r\n        return { ...prev, [field]: Number(value) };\r\n      }\r\n      \r\n      return { ...prev, [field]: value };\r\n    });\r\n  };\r\n\r\n  const handleNewParcelCoordinatesChange = (coordinates: { lat: number; lng: number }) => {\r\n    setNewParcel({...newParcel, coordinates});\r\n  };\r\n\r\n  const handleNewParcelStatusChange = (status: 'active' | 'inactive' | 'planned') => {\r\n    setNewParcel({...newParcel, status});\r\n  };\r\n\r\n  // Crop history table columns\r\n  const cropHistoryColumns: Column[] = [\r\n    { id: 'year', header: 'Năm', accessorKey: 'year', isEditable: true, width: '100px' },\r\n    { id: 'crop', header: 'Cây trồng', accessorKey: 'crop', isEditable: true },\r\n    { id: 'yield', header: 'Năng suất', accessorKey: 'yield', isEditable: true, width: '120px' },\r\n    { id: 'notes', header: 'Ghi chú', accessorKey: 'notes', isEditable: true }\r\n  ];\r\n\r\n  const handleCropHistoryUpdate = (rowIndex: number, columnId: string, value: string) => {\r\n    const updatedHistory = [...cropHistory];\r\n    updatedHistory[rowIndex] = {\r\n      ...updatedHistory[rowIndex],\r\n      [columnId]: value\r\n    };\r\n    setCropHistory(updatedHistory);\r\n    toast.success('Lịch sử đã được cập nhật');\r\n  };\r\n\r\n  const handleAddCropHistory = (newRow: Record<string, string>) => {\r\n    setCropHistory([...cropHistory, {\r\n      year: newRow.year || new Date().getFullYear().toString(),\r\n      crop: newRow.crop || '',\r\n      yield: newRow.yield || '',\r\n      notes: newRow.notes || ''\r\n    }]);\r\n    toast.success('Đã thêm mục lịch sử');\r\n  };\r\n\r\n  const handleDeleteCropHistory = (rowIndex: number) => {\r\n    const updatedHistory = [...cropHistory];\r\n    updatedHistory.splice(rowIndex, 1);\r\n    setCropHistory(updatedHistory);\r\n    toast.success('Đã xóa mục lịch sử');\r\n  };\r\n  \r\n  const handleSort = (field: string) => {\r\n    if (sortBy === field) {\r\n      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\r\n    } else {\r\n      setSortBy(field);\r\n      setSortDirection('asc');\r\n    }\r\n  };\r\n  \r\n  const handleBulkExport = () => {\r\n    toast.success('Đã bắt đầu xuất lô đất sang định dạng CSV');\r\n  };\r\n  \r\n  const handleBulkImport = () => {\r\n    toast.success('Đã bắt đầu nhập lô đất từ CSV');\r\n  };\r\n  \r\n  const handleNotesChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    setParcelNotes(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {showAddParcelForm && (\r\n        <div className=\"mb-6 border rounded-xl p-4 bg-white\">\r\n          <div className=\"flex justify-between items-center mb-4\">\r\n            <h2 className=\"text-lg font-semibold\">Thêm lô đất mới</h2>\r\n            <button \r\n              className=\"p-1.5 hover:bg-gray-100 rounded\"\r\n              onClick={() => setShowAddParcelForm(false)}\r\n            >\r\n              <X className=\"h-4 w-4 text-muted-foreground\" />\r\n            </button>\r\n          </div>\r\n          \r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\r\n            <div>\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-muted-foreground mb-1\">Tên</label>\r\n                  <input \r\n                    type=\"text\" \r\n                    value={newParcel.name || ''} \r\n                    onChange={(e) => handleNewParcelInputChange('name', e.target.value)}\r\n                    className=\"w-full px-3 py-2 border border-input rounded-md\"\r\n                    placeholder=\"Tên lô đất\"\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-muted-foreground mb-1\">Diện tích (ha)</label>\r\n                  <input \r\n                    type=\"number\" \r\n                    value={newParcel.area || ''} \r\n                    onChange={(e) => handleNewParcelInputChange('area', e.target.value)}\r\n                    className=\"w-full px-3 py-2 border border-input rounded-md\"\r\n                    placeholder=\"Diện tích tính bằng ha\"\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-muted-foreground mb-1\">Cây trồng</label>\r\n                  <input \r\n                    type=\"text\" \r\n                    value={newParcel.crop || ''} \r\n                    onChange={(e) => handleNewParcelInputChange('crop', e.target.value)}\r\n                    className=\"w-full px-3 py-2 border border-input rounded-md\"\r\n                    placeholder=\"Cây trồng chính\"\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-muted-foreground mb-1\">Loại đất</label>\r\n                  <input \r\n                    type=\"text\" \r\n                    value={newParcel.soilType || ''} \r\n                    onChange={(e) => handleNewParcelInputChange('soilType', e.target.value)}\r\n                    className=\"w-full px-3 py-2 border border-input rounded-md\"\r\n                    placeholder=\"Loại đất\"\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-muted-foreground mb-1\">Hoạt động cuối cùng</label>\r\n                  <input \r\n                    type=\"date\" \r\n                    value={newParcel.lastActivity || ''} \r\n                    onChange={(e) => handleNewParcelInputChange('lastActivity', e.target.value)}\r\n                    className=\"w-full px-3 py-2 border border-input rounded-md\"\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-muted-foreground mb-1\">Trạng thái</label>\r\n                  <div className=\"flex space-x-2 mt-1\">\r\n                    <button \r\n                      className={`px-3 py-1.5 text-xs rounded-md ${newParcel.status === 'active' ? 'bg-agri-success text-white' : 'bg-muted'}`}\r\n                      onClick={() => handleNewParcelStatusChange('active')}\r\n                    >\r\n                      Hoạt động\r\n                    </button>\r\n                    <button \r\n                      className={`px-3 py-1.5 text-xs rounded-md ${newParcel.status === 'planned' ? 'bg-agri-warning text-white' : 'bg-muted'}`}\r\n                      onClick={() => handleNewParcelStatusChange('planned')}\r\n                    >\r\n                      Đã lên kế hoạch\r\n                    </button>\r\n                    <button \r\n                      className={`px-3 py-1.5 text-xs rounded-md ${newParcel.status === 'inactive' ? 'bg-agri-danger text-white' : 'bg-muted'}`}\r\n                      onClick={() => handleNewParcelStatusChange('inactive')}\r\n                    >\r\n                      Không hoạt động\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-muted-foreground mb-1\">Vị trí trên bản đồ</label>\r\n              <ParcelMap \r\n                coordinates={newParcel.coordinates || { lat: 45.4390, lng: 4.3885 }}\r\n                parcelName={newParcel.name || \"Lô đất mới\"}\r\n                isEditing={true}\r\n                onCoordinatesChange={handleNewParcelCoordinatesChange}\r\n              />\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"flex justify-end\">\r\n            <button \r\n              className=\"mr-2 px-4 py-2 border rounded-lg hover:bg-muted\"\r\n              onClick={() => setShowAddParcelForm(false)}\r\n            >\r\n              Hủy\r\n            </button>\r\n            <button \r\n              className=\"px-4 py-2 bg-agri-primary text-white rounded-lg hover:bg-agri-primary-dark\"\r\n              onClick={handleSaveNewParcel}\r\n            >\r\n              Tạo\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\r\n        {/* Left Column - Parcel List */}\r\n        <div className=\"lg:col-span-1 space-y-4\">\r\n          <div className=\"flex items-center justify-between mb-4\">\r\n            <h2 className=\"text-lg font-medium\">Danh sách lô đất</h2>\r\n            \r\n            <div className=\"flex space-x-2\">\r\n              <Button variant=\"outline\" size=\"sm\" onClick={handleBulkExport}>\r\n                <Download className=\"h-4 w-4 mr-1\" />\r\n                CSV\r\n              </Button>\r\n              <Button variant=\"outline\" size=\"sm\" onClick={handleBulkImport}>\r\n                <Upload className=\"h-4 w-4 mr-1\" />\r\n                CSV\r\n              </Button>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"flex gap-3 mb-4\">\r\n            <div className=\"relative flex-grow\">\r\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\r\n              <Input \r\n                type=\"text\" \r\n                placeholder=\"Tìm kiếm...\" \r\n                className=\"pl-10 pr-4 py-2 w-full\"\r\n                value={searchTerm}\r\n                onChange={(e) => setSearchTerm(e.target.value)}\r\n              />\r\n            </div>\r\n            <div className=\"relative\">\r\n              <Select value={filter} onValueChange={setFilter}>\r\n                <SelectTrigger className=\"w-[120px]\">\r\n                  <Filter className=\"h-4 w-4 mr-2\" />\r\n                  <SelectValue placeholder=\"Tous\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"all\">Tất cả</SelectItem>\r\n                  <SelectItem value=\"active\">Hoạt động</SelectItem>\r\n                  <SelectItem value=\"inactive\">Không hoạt động</SelectItem>\r\n                  <SelectItem value=\"planned\">Đã lên kế hoạch</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n          </div>\r\n          \r\n          {/* Sorting options */}\r\n          <div className=\"flex flex-wrap gap-2 mb-4\">\r\n            <Button \r\n              variant=\"ghost\" \r\n              size=\"sm\" \r\n              className={sortBy === 'name' ? 'bg-muted' : ''}\r\n              onClick={() => handleSort('name')}\r\n            >\r\n              Tên\r\n              {sortBy === 'name' && (\r\n                <ChevronDown className={`h-4 w-4 ml-1 ${sortDirection === 'desc' ? 'rotate-180' : ''}`} />\r\n              )}\r\n            </Button>\r\n            <Button \r\n              variant=\"ghost\" \r\n              size=\"sm\"\r\n              className={sortBy === 'area' ? 'bg-muted' : ''}\r\n              onClick={() => handleSort('area')}\r\n            >\r\n              Diện tích\r\n              {sortBy === 'area' && (\r\n                <ChevronDown className={`h-4 w-4 ml-1 ${sortDirection === 'desc' ? 'rotate-180' : ''}`} />\r\n              )}\r\n            </Button>\r\n            <Button \r\n              variant=\"ghost\" \r\n              size=\"sm\"\r\n              className={sortBy === 'crop' ? 'bg-muted' : ''}\r\n              onClick={() => handleSort('crop')}\r\n            >\r\n              Cây trồng\r\n              {sortBy === 'crop' && (\r\n                <ChevronDown className={`h-4 w-4 ml-1 ${sortDirection === 'desc' ? 'rotate-180' : ''}`} />\r\n              )}\r\n            </Button>\r\n            <Button \r\n              variant=\"ghost\" \r\n              size=\"sm\"\r\n              className={sortBy === 'date' ? 'bg-muted' : ''}\r\n              onClick={() => handleSort('date')}\r\n            >\r\n              Ngày\r\n              {sortBy === 'date' && (\r\n                <ChevronDown className={`h-4 w-4 ml-1 ${sortDirection === 'desc' ? 'rotate-180' : ''}`} />\r\n              )}\r\n            </Button>\r\n          </div>\r\n\r\n          <div className=\"space-y-3 max-h-[calc(100vh-350px)] overflow-y-auto pr-2 custom-scrollbar\">\r\n            {sortedParcels.length > 0 ? (\r\n              sortedParcels.map(parcel => (\r\n                <ParcelCard \r\n                  key={parcel.id} \r\n                  parcel={parcel} \r\n                  onSelect={handleSelectParcel}\r\n                  onEdit={handleEditParcel}\r\n                  onDelete={handleDeleteParcel}\r\n                />\r\n              ))\r\n            ) : (\r\n              <div className=\"text-center py-8 px-4 border border-dashed rounded-lg\">\r\n                <AlertCircle className=\"h-8 w-8 mx-auto mb-2 text-muted-foreground\" />\r\n                <p className=\"text-muted-foreground\">Không tìm thấy lô đất nào với tiêu chí này</p>\r\n              </div>\r\n            )}\r\n          </div>\r\n          \r\n          <Button \r\n            className=\"w-full mt-4\" \r\n            onClick={handleAddParcel}\r\n          >\r\n            <Plus className=\"h-4 w-4 mr-2\" />\r\n            Thêm lô đất\r\n          </Button>\r\n        </div>\r\n\r\n        {/* Right Column - Map and Details */}\r\n        <div className=\"lg:col-span-2\">\r\n          {selectedParcel ? (\r\n            <div className=\"border rounded-xl overflow-hidden h-full\">\r\n              <div className=\"bg-agri-primary text-white p-4 flex justify-between items-center\">\r\n                {isEditing ? (\r\n                  <input \r\n                    type=\"text\" \r\n                    value={editingParcel?.name || ''} \r\n                    onChange={(e) => handleInputChange('name', e.target.value)}\r\n                    className=\"px-2 py-1 bg-white/10 border border-white/30 rounded text-white text-xl w-full\"\r\n                  />\r\n                ) : (\r\n                  <h2 className=\"text-xl font-semibold\">{selectedParcel.name}</h2>\r\n                )}\r\n                \r\n                {isEditing ? (\r\n                  <div className=\"flex space-x-2\">\r\n                    <button \r\n                      onClick={handleSaveEdit}\r\n                      className=\"p-1.5 bg-white/10 hover:bg-white/20 rounded-full\"\r\n                    >\r\n                      <Save className=\"h-5 w-5 text-white\" />\r\n                    </button>\r\n                    <button \r\n                      onClick={handleCancelEdit}\r\n                      className=\"p-1.5 bg-white/10 hover:bg-white/20 rounded-full\"\r\n                    >\r\n                      <X className=\"h-5 w-5 text-white\" />\r\n                    </button>\r\n                  </div>\r\n                ) : (\r\n                  <button \r\n                    onClick={() => handleEditParcel(selectedParcel)}\r\n                    className=\"p-1.5 bg-white/10 hover:bg-white/20 rounded-full\"\r\n                  >\r\n                    <Edit className=\"h-5 w-5 text-white\" />\r\n                  </button>\r\n                )}\r\n              </div>\r\n              \r\n              <div className=\"p-4\">\r\n                <ParcelMap \r\n                  coordinates={isEditing ? (editingParcel?.coordinates || selectedParcel.coordinates) : selectedParcel.coordinates}\r\n                  parcelName={isEditing ? (editingParcel?.name || '') : selectedParcel.name}\r\n                  isEditing={isEditing}\r\n                  onCoordinatesChange={handleCoordinatesChange}\r\n                />\r\n                \r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mt-6\">\r\n                  <div className=\"border rounded-lg p-4\">\r\n                    <h3 className=\"font-medium mb-3 flex items-center\">\r\n                      <Calendar className=\"h-4 w-4 mr-2\" />\r\n                      Culture actuelle\r\n                    </h3>\r\n                    \r\n                    {isEditing ? (\r\n                      <div className=\"space-y-3\">\r\n                        <div>\r\n                          <label className=\"text-sm text-muted-foreground\">Culture</label>\r\n                          <input \r\n                            type=\"text\" \r\n                            value={editingParcel?.crop || ''} \r\n                            onChange={(e) => handleInputChange('crop', e.target.value)}\r\n                            className=\"w-full px-3 py-2 border border-input rounded-md mt-1\"\r\n                          />\r\n                        </div>\r\n                        <div>\r\n                          <label className=\"text-sm text-muted-foreground\">Statut</label>\r\n                          <div className=\"flex space-x-2 mt-1\">\r\n                            <button \r\n                              className={`px-3 py-1.5 text-xs rounded-md ${editingParcel?.status === 'active' ? 'bg-agri-success text-white' : 'bg-muted'}`}\r\n                              onClick={() => handleStatusChange('active')}\r\n                            >\r\n                              Active\r\n                            </button>\r\n                            <button \r\n                              className={`px-3 py-1.5 text-xs rounded-md ${editingParcel?.status === 'planned' ? 'bg-agri-warning text-white' : 'bg-muted'}`}\r\n                              onClick={() => handleStatusChange('planned')}\r\n                            >\r\n                              Planifiée\r\n                            </button>\r\n                            <button \r\n                              className={`px-3 py-1.5 text-xs rounded-md ${editingParcel?.status === 'inactive' ? 'bg-agri-danger text-white' : 'bg-muted'}`}\r\n                              onClick={() => handleStatusChange('inactive')}\r\n                            >\r\n                              Inactive\r\n                            </button>\r\n                          </div>\r\n                        </div>\r\n                        <div>\r\n                          <label className=\"text-sm text-muted-foreground\">Dernière activité</label>\r\n                          <input \r\n                            type=\"date\" \r\n                            value={editingParcel?.lastActivity || ''} \r\n                            onChange={(e) => handleInputChange('lastActivity', e.target.value)}\r\n                            className=\"w-full px-3 py-2 border border-input rounded-md mt-1\"\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    ) : (\r\n                      <div className=\"bg-agri-primary/10 rounded-lg p-3 text-center\">\r\n                        <span className=\"font-semibold text-agri-primary\">{selectedParcel.crop}</span>\r\n                        <p className=\"text-sm mt-1\">Dernière activité: {new Date(selectedParcel.lastActivity).toLocaleDateString()}</p>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  \r\n                  <div className=\"border rounded-lg p-4\">\r\n                    <h3 className=\"font-medium mb-3 flex items-center\">\r\n                      <Layers className=\"h-4 w-4 mr-2\" />\r\n                      Caractéristiques du sol\r\n                    </h3>\r\n                    \r\n                    {isEditing ? (\r\n                      <div className=\"space-y-3\">\r\n                        <div>\r\n                          <label className=\"text-sm text-muted-foreground\">Type de sol</label>\r\n                          <input \r\n                            type=\"text\" \r\n                            value={editingParcel?.soilType || ''} \r\n                            onChange={(e) => handleInputChange('soilType', e.target.value)}\r\n                            className=\"w-full px-3 py-2 border border-input rounded-md mt-1\"\r\n                          />\r\n                        </div>\r\n                        <div>\r\n                          <label className=\"text-sm text-muted-foreground\">pH</label>\r\n                          <input \r\n                            type=\"number\" \r\n                            step=\"0.1\"\r\n                            value={editingParcel?.ph || ''} \r\n                            onChange={(e) => handleInputChange('ph', e.target.value)}\r\n                            className=\"w-full px-3 py-2 border border-input rounded-md mt-1\"\r\n                          />\r\n                        </div>\r\n                        <div>\r\n                          <label className=\"text-sm text-muted-foreground\">Matière organique (%)</label>\r\n                          <input \r\n                            type=\"number\" \r\n                            step=\"0.1\"\r\n                            value={editingParcel?.organicMatter || ''} \r\n                            onChange={(e) => handleInputChange('organicMatter', e.target.value)}\r\n                            className=\"w-full px-3 py-2 border border-input rounded-md mt-1\"\r\n                          />\r\n                        </div>\r\n                        <div>\r\n                          <label className=\"text-sm text-muted-foreground\">Surface (ha)</label>\r\n                          <input \r\n                            type=\"number\" \r\n                            step=\"0.1\"\r\n                            value={editingParcel?.area || ''} \r\n                            onChange={(e) => handleInputChange('area', e.target.value)}\r\n                            className=\"w-full px-3 py-2 border border-input rounded-md mt-1\"\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    ) : (\r\n                      <div className=\"space-y-2\">\r\n                        <div className=\"flex justify-between\">\r\n                          <span className=\"text-sm\">Type:</span>\r\n                          <span className=\"text-sm font-medium\">{selectedParcel.soilType}</span>\r\n                        </div>\r\n                        <div className=\"flex justify-between\">\r\n                          <span className=\"text-sm\">pH:</span>\r\n                          <span className=\"text-sm font-medium\">{selectedParcel.ph || 'Non spécifié'}</span>\r\n                        </div>\r\n                        <div className=\"flex justify-between\">\r\n                          <span className=\"text-sm\">Matière organique:</span>\r\n                          <span className=\"text-sm font-medium\">{selectedParcel.organicMatter ? `${selectedParcel.organicMatter}%` : 'Non spécifié'}</span>\r\n                        </div>\r\n                        <div className=\"flex justify-between\">\r\n                          <span className=\"text-sm\">Surface:</span>\r\n                          <span className=\"text-sm font-medium\">{selectedParcel.area} ha</span>\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  \r\n                  {/* Notes section */}\r\n                  <div className=\"border rounded-lg p-4 md:col-span-2\">\r\n                    <h3 className=\"font-medium mb-3\">Notes</h3>\r\n                    <textarea\r\n                      className=\"w-full h-24 px-3 py-2 border border-input rounded-md\"\r\n                      placeholder=\"Ajouter des notes sur cette parcelle...\"\r\n                      value={parcelNotes}\r\n                      onChange={handleNotesChange}\r\n                      disabled={!isEditing}\r\n                    />\r\n                  </div>\r\n                  \r\n                  <div className=\"border rounded-lg p-4 md:col-span-2\">\r\n                    <h3 className=\"font-medium mb-3\">Historique des cultures</h3>\r\n                    <EditableTable\r\n                      data={cropHistory}\r\n                      columns={cropHistoryColumns}\r\n                      onUpdate={handleCropHistoryUpdate}\r\n                      onDelete={handleDeleteCropHistory}\r\n                      onAdd={handleAddCropHistory}\r\n                      className=\"border-none\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div className=\"border rounded-xl bg-muted h-full flex flex-col items-center justify-center p-6\">\r\n              <MapPin className=\"h-12 w-12 text-muted-foreground opacity-50 mb-4\" />\r\n              <h3 className=\"text-xl font-medium text-foreground mb-2\">Sélectionnez une parcelle</h3>\r\n              <p className=\"text-muted-foreground text-center max-w-md\">\r\n                Cliquez sur une parcelle dans la liste à gauche pour afficher ses détails et accéder à la carte\r\n              </p>\r\n              <Button \r\n                className=\"mt-6\" \r\n                onClick={handleAddParcel}\r\n              >\r\n                <Plus className=\"h-4 w-4 mr-2\" />\r\n                Ajouter une nouvelle parcelle\r\n              </Button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ParcelManagement;\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ParcelMap.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\Statistics.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":50,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1893,1896],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1893,1896],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport StatisticsHeader from './statistics/StatisticsHeader';\r\nimport ChartSelector from './statistics/ChartSelector';\r\nimport ChartFilters from './statistics/ChartFilters';\r\nimport YieldsCharts from './statistics/YieldsCharts';\r\nimport FinancialCharts from './statistics/FinancialCharts';\r\nimport EnvironmentalCharts from './statistics/EnvironmentalCharts';\r\nimport { useStatistics } from '../contexts/StatisticsContext';\r\nimport { useIsMobile } from '@/hooks/use-mobile';\r\nimport { ArrowLeft, ChevronRight } from 'lucide-react';\r\nimport { Button } from './ui/button';\r\nimport PreviewPrintButton from './common/PreviewPrintButton';\r\nimport { Breadcrumb, BreadcrumbItem, BreadcrumbLink, BreadcrumbList, BreadcrumbSeparator } from './ui/breadcrumb';\r\n\r\nconst Statistics = () => {\r\n  const { \r\n    period, \r\n    setPeriod, \r\n    cropFilter, \r\n    setCropFilter,\r\n    updateDataWithFilters,\r\n    yieldData,\r\n    financialData,\r\n    environmentalData\r\n  } = useStatistics();\r\n  \r\n  const isMobile = useIsMobile();\r\n  const [currentChart, setCurrentChart] = React.useState<'yields' | 'financial' | 'environmental'>('yields');\r\n  \r\n  const getChartTitle = () => {\r\n    switch (currentChart) {\r\n      case 'yields': return 'Tiến triển năng suất';\r\n      case 'financial': return 'Phân tích tài chính';\r\n      case 'environmental': return 'Chỉ số môi trường';\r\n      default: return 'Thống kê';\r\n    }\r\n  };\r\n  \r\n  const getChartDescription = () => {\r\n    switch (currentChart) {\r\n      case 'yields': return 'Tiến triển năng suất theo cây trồng qua các năm';\r\n      case 'financial': return 'Phân tích chi tiết hiệu suất tài chính';\r\n      case 'environmental': return 'Theo dõi chỉ số hiệu suất môi trường';\r\n      default: return 'Dữ liệu thống kê của trang trại bạn';\r\n    }\r\n  };\r\n\r\n  const handleFilterChange = (newPeriod: any, newCropFilter: string) => {\r\n    setPeriod(newPeriod);\r\n    setCropFilter(newCropFilter);\r\n    updateDataWithFilters(newPeriod, newCropFilter);\r\n  };\r\n  \r\n  // Get the current chart data based on the active chart\r\n  const getCurrentChartData = () => {\r\n    switch (currentChart) {\r\n      case 'yields':\r\n        return yieldData;\r\n      case 'financial':\r\n        return financialData.profitabilityByParcel;\r\n      case 'environmental':\r\n        return environmentalData.indicators;\r\n      default:\r\n        return [];\r\n    }\r\n  };\r\n  \r\n  // Get columns for the current chart\r\n  const getChartColumns = () => {\r\n    switch (currentChart) {\r\n      case 'yields':\r\n        return [\r\n          { key: \"name\", header: \"Culture\" },\r\n          { key: \"current\", header: \"Rendement actuel\" },\r\n          { key: \"previous\", header: \"Rendement précédent\" },\r\n          { key: \"unit\", header: \"Unité\" }\r\n        ];\r\n      case 'financial':\r\n        return [\r\n          { key: \"name\", header: \"Lô đất\" },\r\n          { key: \"profitability\", header: \"Lợi nhuận (€)\" },\r\n          { key: \"size\", header: \"Diện tích (ha)\" },\r\n          { key: \"crop\", header: \"Cây trồng\" }\r\n        ];\r\n      case 'environmental':\r\n        return [\r\n          { key: \"indicator\", header: \"Chỉ số\" },\r\n          { key: \"current\", header: \"Giá trị hiện tại\" },\r\n          { key: \"target\", header: \"Mục tiêu\" },\r\n          { key: \"trend\", header: \"Xu hướng\" },\r\n          { key: \"status\", header: \"Trạng thái\" }\r\n        ];\r\n      default:\r\n        return [];\r\n    }\r\n  };\r\n  \r\n  // Handle export for the chart filters\r\n  const handleExportData = async () => {\r\n    console.log(`Đang xuất dữ liệu ${currentChart}...`);\r\n  };\r\n  \r\n  return (\r\n    <div className=\"p-3 md:p-6 animate-enter\">\r\n      <StatisticsHeader />\r\n      \r\n      <Breadcrumb className=\"mb-4\">\r\n        <BreadcrumbList>\r\n          <BreadcrumbItem>\r\n            <BreadcrumbLink asChild>\r\n              <Link to=\"/\">Bảng điều khiển</Link>\r\n            </BreadcrumbLink>\r\n          </BreadcrumbItem>\r\n          <BreadcrumbSeparator />\r\n          <BreadcrumbItem>\r\n            <BreadcrumbLink asChild>\r\n              <Link to=\"/statistiques\">Thống kê</Link>\r\n            </BreadcrumbLink>\r\n          </BreadcrumbItem>\r\n          <BreadcrumbSeparator />\r\n          <BreadcrumbItem>\r\n            <BreadcrumbLink>{getChartTitle()}</BreadcrumbLink>\r\n          </BreadcrumbItem>\r\n        </BreadcrumbList>\r\n      </Breadcrumb>\r\n\r\n      <ChartSelector \r\n        currentChart={currentChart} \r\n        setCurrentChart={setCurrentChart} \r\n      />\r\n\r\n      <div className=\"bg-white rounded-xl border border-gray-100 p-3 md:p-6 mb-6 shadow-sm dark:bg-gray-800 dark:border-gray-700\">\r\n        <div className=\"flex flex-col md:flex-row md:justify-between md:items-center gap-3 mb-4\">\r\n          <h2 className=\"text-lg md:text-xl font-semibold text-gray-800 dark:text-gray-100\">{getChartTitle()}</h2>\r\n          \r\n          <div className=\"flex items-center gap-2\">\r\n            <ChartFilters \r\n              period={period}\r\n              setPeriod={(newPeriod) => handleFilterChange(newPeriod, cropFilter)}\r\n              cropFilter={cropFilter}\r\n              setCropFilter={(newCropFilter) => handleFilterChange(period, newCropFilter)}\r\n              onExport={handleExportData}\r\n            />\r\n            \r\n            <PreviewPrintButton\r\n              data={getCurrentChartData()}\r\n              moduleName={`statistics-${currentChart}`}\r\n              title={getChartTitle()}\r\n              columns={getChartColumns()}\r\n              className=\"bg-white border-gray-200 hover:bg-gray-50 text-xs md:text-sm h-auto py-1.5 md:py-2 dark:bg-gray-700 dark:border-gray-600 dark:hover:bg-gray-600\"\r\n              variant=\"outline\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <p className=\"text-sm md:text-base text-gray-500 dark:text-gray-300 mb-4 md:mb-6\">{getChartDescription()}</p>\r\n\r\n        <div className=\"bg-gray-50 dark:bg-gray-900 rounded-lg p-2 md:p-4 overflow-x-auto\">\r\n          <div className={`min-w-full ${isMobile ? 'min-w-[500px]' : ''}`}>\r\n            {currentChart === 'yields' && <YieldsCharts />}\r\n            {currentChart === 'financial' && <FinancialCharts />}\r\n            {currentChart === 'environmental' && <EnvironmentalCharts />}\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"mt-6 flex justify-between\">\r\n          <Button \r\n            variant=\"outline\" \r\n            size=\"sm\"\r\n            asChild\r\n          >\r\n            <Link to=\"/\">\r\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\r\n              Quay lại bảng điều khiển\r\n            </Link>\r\n          </Button>\r\n          \r\n          <Button \r\n            variant=\"outline\" \r\n            size=\"sm\"\r\n            asChild\r\n          >\r\n            <Link to=\"/rapports\">\r\n              Xem tất cả báo cáo\r\n              <ChevronRight className=\"h-4 w-4 ml-2\" />\r\n            </Link>\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Statistics;\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\admin\\AddUserDialog.tsx","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from 'no-unused-vars').","line":23,"column":18,"severity":1,"nodeType":null,"fix":{"range":[976,1013],"text":" "}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import React from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nimport * as z from 'zod';\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../ui/dialog';\r\nimport { Button } from '../ui/button';\r\nimport { Input } from '../ui/input';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';\r\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '../ui/form';\r\nimport { useUser } from '../../contexts/UserContext';\r\nimport { useToast } from '@/hooks/use-toast';\r\n\r\nconst userSchema = z.object({\r\n  name: z.string().min(2, 'Tên phải có ít nhất 2 ký tự'),\r\n  email: z.string().email('Email không hợp lệ'),\r\n  role: z.enum(['admin', 'manager', 'user'] as const),\r\n  status: z.enum(['active', 'inactive'] as const)\r\n});\r\n\r\ntype UserFormData = z.infer<typeof userSchema>;\r\n\r\ninterface AddUserDialogProps {\r\n  open: boolean; // eslint-disable-line no-unused-vars\r\n  onOpenChange: (open: boolean) => void;\r\n}\r\n\r\nconst AddUserDialog: React.FC<AddUserDialogProps> = ({ open: openProp, onOpenChange }) => {\r\n  const { addUser } = useUser();\r\n  const { toast } = useToast();\r\n\r\n  const form = useForm<UserFormData>({\r\n    resolver: zodResolver(userSchema),\r\n    defaultValues: {\r\n      name: '',\r\n      email: '',\r\n      role: 'user',\r\n      status: 'active'\r\n    }\r\n  });\r\n\r\n  const onSubmit = (data: UserFormData) => {\r\n    addUser({\r\n      name: data.name,\r\n      email: data.email,\r\n      role: data.role,\r\n      status: data.status,\r\n      twoFactorEnabled: false\r\n    });\r\n    toast({\r\n      title: \"Người dùng đã được thêm\",\r\n      description: `Tài khoản của ${data.name} đã được tạo thành công.`\r\n    });\r\n    form.reset();\r\n    onOpenChange(false);\r\n  };\r\n\r\n  return (\r\n    <Dialog open={openProp} onOpenChange={onOpenChange}>\r\n      <DialogContent className=\"sm:max-w-[425px]\">\r\n        <DialogHeader>\r\n          <DialogTitle>Thêm người dùng mới</DialogTitle>\r\n        </DialogHeader>\r\n\r\n        <Form {...form}>\r\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\r\n            <FormField\r\n              control={form.control}\r\n              name=\"name\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Tên đầy đủ</FormLabel>\r\n                  <FormControl>\r\n                    <Input placeholder=\"Nhập tên người dùng\" {...field} />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n\r\n            <FormField\r\n              control={form.control}\r\n              name=\"email\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Email</FormLabel>\r\n                  <FormControl>\r\n                    <Input type=\"email\" placeholder=\"Nhập địa chỉ email\" {...field} />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n\r\n            <FormField\r\n              control={form.control}\r\n              name=\"role\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Vai trò</FormLabel>\r\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\r\n                    <FormControl>\r\n                      <SelectTrigger>\r\n                        <SelectValue placeholder=\"Chọn vai trò\" />\r\n                      </SelectTrigger>\r\n                    </FormControl>\r\n                    <SelectContent>\r\n                      <SelectItem value=\"user\">Người dùng</SelectItem>\r\n                      <SelectItem value=\"manager\">Quản lý</SelectItem>\r\n                      <SelectItem value=\"admin\">Admin</SelectItem>\r\n                    </SelectContent>\r\n                  </Select>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n\r\n            <FormField\r\n              control={form.control}\r\n              name=\"status\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Trạng thái</FormLabel>\r\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\r\n                    <FormControl>\r\n                      <SelectTrigger>\r\n                        <SelectValue placeholder=\"Chọn trạng thái\" />\r\n                      </SelectTrigger>\r\n                    </FormControl>\r\n                    <SelectContent>\r\n                      <SelectItem value=\"active\">Hoạt động</SelectItem>\r\n                      <SelectItem value=\"inactive\">Vô hiệu hóa</SelectItem>\r\n                    </SelectContent>\r\n                  </Select>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n\r\n            <DialogFooter>\r\n              <Button type=\"button\" variant=\"outline\" onClick={() => onOpenChange(false)}>\r\n                Hủy\r\n              </Button>\r\n              <Button type=\"submit\">Thêm người dùng</Button>\r\n            </DialogFooter>\r\n          </form>\r\n        </Form>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default AddUserDialog;","usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\admin\\EditUserDialog.tsx","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from 'no-unused-vars').","line":24,"column":18,"severity":1,"nodeType":null,"fix":{"range":[1032,1069],"text":" "}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import React, { useEffect } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nimport * as z from 'zod';\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../ui/dialog';\r\nimport { Button } from '../ui/button';\r\nimport { Input } from '../ui/input';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';\r\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '../ui/form';\r\nimport { Switch } from '../ui/switch';\r\nimport { useUser } from '../../contexts/UserContext';\r\nimport { useToast } from '@/hooks/use-toast';\r\n\r\nconst userSchema = z.object({\r\n  name: z.string().min(2, 'Tên phải có ít nhất 2 ký tự'),\r\n  email: z.string().email('Email không hợp lệ'),\r\n  role: z.enum(['admin', 'manager', 'user'] as const),\r\n  status: z.enum(['active', 'inactive'] as const)\r\n});\r\n\r\ntype UserFormData = z.infer<typeof userSchema>;\r\n\r\ninterface EditUserDialogProps {\r\n  open: boolean; // eslint-disable-line no-unused-vars\r\n  onOpenChange: (open: boolean) => void;\r\n  userId: string | null;\r\n}\r\n\r\nconst EditUserDialog: React.FC<EditUserDialogProps> = ({ open: openProp, onOpenChange, userId }) => {\r\n  const { users, updateUser } = useUser();\r\n  const { toast } = useToast();\r\n\r\n  const user = users.find(u => u.id === userId) || null;\r\n\r\n  const form = useForm<UserFormData>({\r\n    resolver: zodResolver(userSchema),\r\n    defaultValues: {\r\n      name: '',\r\n      email: '',\r\n      role: 'user',\r\n      status: 'active'\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      form.reset({\r\n        name: user.name,\r\n        email: user.email,\r\n        role: user.role,\r\n        status: user.status\r\n      });\r\n    }\r\n  }, [user, form, userId]);\r\n\r\n  const onSubmit = (data: UserFormData) => {\r\n    if (!user) return;\r\n    updateUser(user.id, {\r\n      name: data.name,\r\n      email: data.email,\r\n      role: data.role,\r\n      status: data.status\r\n    });\r\n    toast({\r\n      title: 'Cập nhật người dùng',\r\n      description: `Thông tin của ${data.name} đã được cập nhật.`\r\n    });\r\n    onOpenChange(false);\r\n  };\r\n  \r\n  // Only allow disabling 2FA here. Enabling should be handled via a secure flow elsewhere.\r\n  const handle2FAChange = (checked: boolean) => {\r\n    if (!user) return;\r\n    // If user doesn't have 2FA enabled, the switch is disabled and nothing should happen\r\n    if (!user.twoFactorEnabled) return;\r\n    // If checked is true, user attempted to enable — ignore\r\n    if (checked) return;\r\n    // Disable 2FA\r\n    updateUser(user.id, { twoFactorEnabled: false });\r\n    toast({\r\n      title: '2FA đã bị tắt',\r\n      description: `Xác thực hai yếu tố cho ${user.name} đã bị tắt.`\r\n    });\r\n    form.reset({\r\n      name: user.name,\r\n      email: user.email,\r\n      role: user.role,\r\n      status: user.status\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Dialog open={openProp} onOpenChange={onOpenChange}>\r\n      <DialogContent className=\"sm:max-w-[425px]\">\r\n        <DialogHeader>\r\n          <DialogTitle>Chỉnh sửa người dùng</DialogTitle>\r\n        </DialogHeader>\r\n\r\n        <Form {...form}>\r\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\r\n            <FormField\r\n              control={form.control}\r\n              name=\"name\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Tên đầy đủ</FormLabel>\r\n                  <FormControl>\r\n                    <Input placeholder=\"Nhập tên người dùng\" {...field} />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n\r\n            <FormField\r\n              control={form.control}\r\n              name=\"email\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Email</FormLabel>\r\n                  <FormControl>\r\n                    <Input type=\"email\" placeholder=\"Nhập địa chỉ email\" {...field} />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n\r\n            <FormField\r\n              control={form.control}\r\n              name=\"role\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Vai trò</FormLabel>\r\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\r\n                    <FormControl>\r\n                      <SelectTrigger>\r\n                        <SelectValue placeholder=\"Chọn vai trò\" />\r\n                      </SelectTrigger>\r\n                    </FormControl>\r\n                    <SelectContent>\r\n                      <SelectItem value=\"user\">Người dùng</SelectItem>\r\n                      <SelectItem value=\"manager\">Quản lý</SelectItem>\r\n                      <SelectItem value=\"admin\">Admin</SelectItem>\r\n                    </SelectContent>\r\n                  </Select>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n\r\n            <FormField\r\n              control={form.control}\r\n              name=\"status\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <div className=\"flex items-start justify-between gap-4\">\r\n                    <div className=\"flex-1\">\r\n                      <FormLabel>Trạng thái</FormLabel>\r\n                      <FormControl>\r\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\r\n                          <FormControl>\r\n                            <SelectTrigger>\r\n                              <SelectValue placeholder=\"Chọn trạng thái\" />\r\n                            </SelectTrigger>\r\n                          </FormControl>\r\n                          <SelectContent>\r\n                            <SelectItem value=\"active\">Hoạt động</SelectItem>\r\n                            <SelectItem value=\"inactive\">Vô hiệu hóa</SelectItem>\r\n                          </SelectContent>\r\n                        </Select>\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </div>\r\n\r\n                    \r\n                  </div>\r\n                </FormItem>\r\n              )}\r\n            />\r\n<FormField\r\n              control={form.control}\r\n              name=\"status\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n            <div className=\"flex-shrink-0 w-40\">\r\n                      <FormLabel className=\"mb-1\">Xác thực hai yếu tố</FormLabel>\r\n                      <div className=\"flex items-center gap-3\">\r\n                        <Switch\r\n                          checked={!!user?.twoFactorEnabled}\r\n                          disabled={!user?.twoFactorEnabled}\r\n                          onCheckedChange={(val) => handle2FAChange(!!val)}\r\n                        />\r\n                      </div>\r\n                    </div></FormItem>\r\n              )}\r\n            />\r\n\r\n            <DialogFooter>\r\n              <Button type=\"button\" variant=\"outline\" onClick={() => onOpenChange(false)}>\r\n                Hủy\r\n              </Button>\r\n              <Button type=\"submit\">Lưu thay đổi</Button>\r\n            </DialogFooter>\r\n          </form>\r\n        </Form>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default EditUserDialog;\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\admin\\UserManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\common\\ImportExportButtons.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\common\\NotificationButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\common\\NotificationCenter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\common\\PreviewContainer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\common\\PreviewDialog.tsx","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from 'no-unused-vars').","line":2,"column":1,"severity":1,"nodeType":null,"fix":{"range":[2,37],"text":" "}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"\r\n/* eslint-disable no-unused-vars */\r\nimport React from 'react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Printer } from 'lucide-react';\r\nimport { useAppSettings } from '@/contexts/AppSettingsContext';\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogHeader,\r\n  DialogTitle,\r\n  DialogDescription,\r\n} from \"@/components/ui/dialog\";\r\n\r\ninterface PreviewDialogProps {\r\n  open: boolean;  \r\n  onOpenChange: (open: boolean) => void;\r\n  title?: string;\r\n  moduleName: string;\r\n  previewHTML: string;\r\n  onPrint: () => void;\r\n}\r\n\r\nconst PreviewDialog: React.FC<PreviewDialogProps> = ({\r\n  open: openProp,\r\n  onOpenChange,\r\n  title,\r\n  moduleName,\r\n  previewHTML,\r\n  onPrint\r\n}) => {\r\n  const { settings } = useAppSettings();\r\n  \r\n  return (\r\n    <Dialog open={openProp} onOpenChange={onOpenChange}>\r\n      <DialogContent className=\"max-w-4xl h-[80vh]\">\r\n        <DialogHeader>\r\n          <DialogTitle>{title || `Xem trước - ${moduleName}`}</DialogTitle>\r\n          <DialogDescription>\r\n            Xem trước trước khi in\r\n          </DialogDescription>\r\n        </DialogHeader>\r\n        <div className=\"flex-grow overflow-auto border rounded-md mt-4 bg-white\">\r\n          <iframe\r\n            srcDoc={`\r\n              <!DOCTYPE html>\r\n              <html lang=\"${settings.locale || 'vi-VN'}\">\r\n                <head>\r\n                  <meta charset=\"UTF-8\">\r\n                  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n                  <title>${title || `Xem trước - ${moduleName}`}</title>\r\n                  <style>\r\n                    :root {\r\n                      --font-family: 'Inter', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\r\n                      --primary-color: ${settings.darkMode ? '#8BADE3' : '#4CAF50'};\r\n                      --border-color: ${settings.darkMode ? '#3A3A3A' : '#e5e7eb'};\r\n                      --bg-color: ${settings.darkMode ? '#1F1F1F' : '#ffffff'};\r\n                      --text-color: ${settings.darkMode ? '#E1E1E1' : '#333333'};\r\n                      --muted-color: ${settings.darkMode ? '#A0A0A0' : '#6B7280'};\r\n                      --header-bg: ${settings.darkMode ? '#2D2D2D' : '#F9FAFB'};\r\n                    }\r\n                    \r\n                    body {\r\n                      font-family: var(--font-family);\r\n                      margin: 0;\r\n                      padding: 0;\r\n                      background-color: var(--bg-color);\r\n                      color: var(--text-color);\r\n                    }\r\n                    \r\n                    .preview-container {\r\n                      max-width: 100%;\r\n                      margin: 0 auto;\r\n                      border: 1px solid var(--border-color);\r\n                      border-radius: 8px;\r\n                      overflow: hidden;\r\n                      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);\r\n                    }\r\n                    \r\n                    .preview-header {\r\n                      background-color: var(--header-bg);\r\n                      padding: 20px;\r\n                      border-bottom: 1px solid var(--border-color);\r\n                    }\r\n                    \r\n                    .preview-header h2 {\r\n                      margin: 0;\r\n                      font-size: 20px;\r\n                      color: var(--text-color);\r\n                    }\r\n                    \r\n                    .preview-content {\r\n                      padding: 20px;\r\n                    }\r\n                    \r\n                    table {\r\n                      width: 100%;\r\n                      border-collapse: collapse;\r\n                      margin-bottom: 20px;\r\n                      font-size: 14px;\r\n                    }\r\n                    \r\n                    th {\r\n                      background-color: var(--header-bg);\r\n                      padding: 10px 15px;\r\n                      text-align: left;\r\n                      font-weight: 600;\r\n                      border-bottom: 2px solid var(--border-color);\r\n                      color: var(--text-color);\r\n                    }\r\n                    \r\n                    td {\r\n                      padding: 10px 15px;\r\n                      border-bottom: 1px solid var(--border-color);\r\n                    }\r\n                    \r\n                    tr:nth-child(even) {\r\n                      background-color: ${settings.darkMode ? '#2A2A2A' : '#f9fafb'};\r\n                    }\r\n                    \r\n                    tr:hover {\r\n                      background-color: ${settings.darkMode ? '#333333' : '#f3f4f6'};\r\n                    }\r\n                    \r\n                    .footer {\r\n                      margin-top: 30px;\r\n                      text-align: right;\r\n                      font-size: 12px;\r\n                      color: var(--muted-color);\r\n                      padding-top: 10px;\r\n                      border-top: 1px solid var(--border-color);\r\n                    }\r\n\r\n                    @media print {\r\n                      body {\r\n                        padding: 0;\r\n                        background-color: white;\r\n                        color: black;\r\n                      }\r\n                      button { display: none; }\r\n                      .preview-container {\r\n                        box-shadow: none;\r\n                        border: none;\r\n                      }\r\n                      table, th, td {\r\n                        color: black;\r\n                      }\r\n                    }\r\n                  </style>\r\n                </head>\r\n                <body>\r\n                  <div class=\"preview-container\">\r\n                    ${previewHTML}\r\n                  </div>\r\n                </body>\r\n              </html>\r\n            `}\r\n            className=\"w-full h-full border-none\"\r\n            title=\"Xem trước\"\r\n            aria-label={`Xem trước tài liệu: ${title || moduleName}`}\r\n          />\r\n        </div>\r\n        <div className=\"flex justify-end gap-2 mt-4\">\r\n          <Button \r\n            variant=\"outline\" \r\n            onClick={() => onOpenChange(false)}\r\n          >\r\n            Đóng\r\n          </Button>\r\n          <Button onClick={onPrint}>\r\n            <Printer className=\"mr-2 h-4 w-4\" aria-hidden=\"true\" />\r\n            In\r\n          </Button>\r\n        </div>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default PreviewDialog;\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\common\\PreviewPrintButton.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":48,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1204,1207],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1204,1207],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport React from 'react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Eye, Printer, FileText, Loader2 } from 'lucide-react';\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuTrigger,\r\n  DropdownMenuSeparator\r\n} from \"@/components/ui/dropdown-menu\";\r\nimport {\r\n  Tooltip,\r\n  TooltipContent,\r\n  TooltipProvider,\r\n  TooltipTrigger,\r\n} from \"@/components/ui/tooltip\";\r\nimport PreviewDialog from './PreviewDialog';\r\nimport { usePreviewActions } from '@/hooks/use-preview-actions';\r\n\r\ninterface PreviewPrintButtonProps {\r\n  data: unknown[];\r\n  moduleName: string;\r\n  className?: string;\r\n  variant?: \"default\" | \"destructive\" | \"outline\" | \"secondary\" | \"ghost\" | \"link\";\r\n  showPreview?: boolean;\r\n  columns?: { key: string, header: string }[];\r\n  title?: string;\r\n}\r\n\r\nconst PreviewPrintButton: React.FC<PreviewPrintButtonProps> = ({\r\n  data,\r\n  moduleName,\r\n  className = \"\",\r\n  variant = \"outline\",\r\n  showPreview = true,\r\n  columns,\r\n  title\r\n}) => {\r\n  const {\r\n    isActionInProgress,\r\n    previewOpen,\r\n    setPreviewOpen,\r\n    previewHTML,\r\n    handlePrint,\r\n    handleShowPreview,\r\n    handleExportPDF\r\n  } = usePreviewActions({ data: data as any, moduleName, columns, title });\r\n\r\n  const handleKeyDown = (e: React.KeyboardEvent, action: () => void) => {\r\n    if (e.key === 'Enter' || e.key === ' ') {\r\n      e.preventDefault();\r\n      action();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <DropdownMenu>\r\n        <TooltipProvider>\r\n          <Tooltip>\r\n            <TooltipTrigger asChild>\r\n              <DropdownMenuTrigger asChild>\r\n                <Button \r\n                  variant={variant} \r\n                  size=\"sm\"\r\n                  className={`transition-all ${className}`}\r\n                  disabled={isActionInProgress}\r\n                  aria-label=\"Tùy chọn xem trước và in\"\r\n                >\r\n                  {isActionInProgress ? (\r\n                    <Loader2 className=\"h-4 w-4 animate-spin\" aria-hidden=\"true\" />\r\n                  ) : (\r\n                    <Eye className=\"h-4 w-4\" aria-hidden=\"true\" />\r\n                  )}\r\n                  <span className=\"ml-2 hidden sm:inline\">Xem trước</span>\r\n                </Button>\r\n              </DropdownMenuTrigger>\r\n            </TooltipTrigger>\r\n            <TooltipContent>\r\n              <p>Xem trước và in</p>\r\n            </TooltipContent>\r\n          </Tooltip>\r\n        </TooltipProvider>\r\n        <DropdownMenuContent align=\"end\" className=\"w-56\">\r\n          {showPreview && (\r\n            <DropdownMenuItem \r\n              onClick={handleShowPreview} \r\n              className=\"cursor-pointer\"\r\n              onKeyDown={(e) => handleKeyDown(e, handleShowPreview)}\r\n            >\r\n              <Eye className=\"mr-2 h-4 w-4\" aria-hidden=\"true\" />\r\n              <span>Xem trước trên màn hình</span>\r\n            </DropdownMenuItem>\r\n          )}\r\n          <DropdownMenuItem \r\n            onClick={handlePrint} \r\n            className=\"cursor-pointer\"\r\n            onKeyDown={(e) => handleKeyDown(e, handlePrint)}\r\n          >\r\n            <Printer className=\"mr-2 h-4 w-4\" aria-hidden=\"true\" />\r\n            <span>In</span>\r\n          </DropdownMenuItem>\r\n          <DropdownMenuSeparator />\r\n          <DropdownMenuItem \r\n            onClick={handleExportPDF} \r\n            className=\"cursor-pointer\"\r\n            onKeyDown={(e) => handleKeyDown(e, handleExportPDF)}\r\n          >\r\n            <FileText className=\"mr-2 h-4 w-4\" aria-hidden=\"true\" />\r\n            <span>Xuất thành PDF</span>\r\n          </DropdownMenuItem>\r\n        </DropdownMenuContent>\r\n      </DropdownMenu>\r\n\r\n      <PreviewDialog\r\n        open={previewOpen}\r\n        onOpenChange={setPreviewOpen}\r\n        title={title}\r\n        moduleName={moduleName}\r\n        previewHTML={previewHTML}\r\n        onPrint={handlePrint}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PreviewPrintButton;\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\common\\ReportGenerationButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\common\\TechnicalSheetButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\cultures\\TaskList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\dashboard\\AlertsPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\dashboard\\ReusableDashboard.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":184,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":184,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\n// Chart helpers removed (not used here)\r\nimport { formatCurrency, formatDate, formatPercent } from '@/utils/crm-operations';\r\nimport { CircleCheckBig, TrendingDown, TrendingUp } from 'lucide-react';\r\n\r\ninterface KpiCardProps {\r\n  title: string;\r\n  value: string | number;\r\n  description?: string;\r\n  change?: number;\r\n  icon?: React.ReactNode;\r\n  onClick?: () => void;\r\n}\r\n\r\nexport const KpiCard: React.FC<KpiCardProps> = ({\r\n  title,\r\n  value,\r\n  description,\r\n  change,\r\n  icon,\r\n  onClick\r\n}) => {\r\n  const renderChangeIndicator = () => {\r\n    if (change === undefined) return null;\r\n    \r\n    if (change > 0) {\r\n      return (\r\n        <div className=\"flex items-center text-sm text-green-600\">\r\n          <TrendingUp className=\"mr-1 h-4 w-4\" />\r\n          <span>+{formatPercent(change)}</span>\r\n        </div>\r\n      );\r\n    } else if (change < 0) {\r\n      return (\r\n        <div className=\"flex items-center text-sm text-red-600\">\r\n          <TrendingDown className=\"mr-1 h-4 w-4\" />\r\n          <span>{formatPercent(change)}</span>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"flex items-center text-sm text-gray-600\">\r\n          <CircleCheckBig className=\"mr-1 h-4 w-4\" />\r\n          <span>Stable</span>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <Card className={onClick ? 'cursor-pointer hover:bg-muted/50 transition-colors' : ''} onClick={onClick}>\r\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n        <CardTitle className=\"text-sm font-medium\">{title}</CardTitle>\r\n        {icon}\r\n      </CardHeader>\r\n      <CardContent>\r\n        <div className=\"text-2xl font-bold\">{value}</div>\r\n        <div className=\"flex items-center justify-between mt-1\">\r\n          {description && <CardDescription>{description}</CardDescription>}\r\n          {renderChangeIndicator()}\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\ninterface ProgressCardProps {\r\n  title: string;\r\n  value: number;\r\n  max: number;\r\n  description?: string;\r\n  unit?: string;\r\n  icon?: React.ReactNode;\r\n}\r\n\r\nexport const ProgressCard: React.FC<ProgressCardProps> = ({\r\n  title,\r\n  value,\r\n  max,\r\n  description,\r\n  unit = '',\r\n  icon\r\n}) => {\r\n  const percentage = (value / max) * 100;\r\n  \r\n  return (\r\n    <Card>\r\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n        <CardTitle className=\"text-sm font-medium\">{title}</CardTitle>\r\n        {icon}\r\n      </CardHeader>\r\n      <CardContent className=\"space-y-2\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <span>\r\n            {value}{unit} / {max}{unit}\r\n          </span>\r\n          <span className=\"text-sm text-muted-foreground\">\r\n            {Math.round(percentage)}%\r\n          </span>\r\n        </div>\r\n        <Progress value={percentage} className=\"h-2\" />\r\n        {description && (\r\n          <CardDescription className=\"pt-1\">{description}</CardDescription>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\ninterface TabsChartProps {\r\n  title: string;\r\n  description?: string;\r\n  tabs: {\r\n    key: string;\r\n    label: string;\r\n    chart: React.ReactNode;\r\n  }[];\r\n  defaultTab?: string;\r\n}\r\n\r\nexport const TabsChart: React.FC<TabsChartProps> = ({\r\n  title,\r\n  description,\r\n  tabs,\r\n  defaultTab\r\n}) => {\r\n  return (\r\n    <Card className=\"col-span-2\">\r\n      <CardHeader>\r\n        <CardTitle>{title}</CardTitle>\r\n        {description && <CardDescription>{description}</CardDescription>}\r\n      </CardHeader>\r\n      <CardContent>\r\n        <Tabs defaultValue={defaultTab || tabs[0]?.key} className=\"w-full\">\r\n          <TabsList className=\"mb-4\">\r\n            {tabs.map((tab) => (\r\n              <TabsTrigger key={tab.key} value={tab.key}>\r\n                {tab.label}\r\n              </TabsTrigger>\r\n            ))}\r\n          </TabsList>\r\n          {tabs.map((tab) => (\r\n            <TabsContent key={tab.key} value={tab.key} className=\"h-[300px]\">\r\n              {tab.chart}\r\n            </TabsContent>\r\n          ))}\r\n        </Tabs>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\ninterface SimpleStatsProps {\r\n  title: string;\r\n  stats: Array<{\r\n    label: string;\r\n    value: string | number;\r\n  }>;\r\n}\r\n\r\nexport const SimpleStats: React.FC<SimpleStatsProps> = ({ title, stats }) => {\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>{title}</CardTitle>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <dl className=\"space-y-2\">\r\n          {stats.map((stat, index) => (\r\n            <div key={index} className=\"flex justify-between\">\r\n              <dt className=\"text-sm font-medium text-muted-foreground\">{stat.label}</dt>\r\n              <dd className=\"text-sm font-semibold\">{stat.value}</dd>\r\n            </div>\r\n          ))}\r\n        </dl>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport const ReusableDashboard = {\r\n  KpiCard,\r\n  ProgressCard,\r\n  TabsChart,\r\n  SimpleStats\r\n};\r\n\r\nexport default ReusableDashboard;\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\dashboard\\StatCards.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\dashboard\\TasksPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\data\\ImportExportControls.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\finance\\FinancialDataFilter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\finance\\FinancialSummary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\inventory\\ConfirmDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\inventory\\ImportExportFunctions.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[376,379],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[376,379],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":41,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[936,939],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[936,939],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":51,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1315,1318],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1315,1318],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":61,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1620,1623],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1620,1623],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":109,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3135,3138],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3135,3138],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport { toast } from 'sonner';\r\nimport Papa from 'papaparse';\r\n\r\nexport type InventoryItem = {\r\n  id: number;\r\n  name: string;\r\n  category: string;\r\n  quantity: number;\r\n  unit: string;\r\n  minQuantity: number;\r\n  price: number;\r\n  location: string;\r\n  lastUpdated: string;\r\n  supplier?: string;\r\n  sku?: string;\r\n  expiryDate?: string;\r\n  notes?: string;\r\n  [key: string]: any;\r\n};\r\n\r\nexport type ExportOptions = {\r\n  fileName?: string;\r\n  includeFields?: string[];\r\n  excludeFields?: string[];\r\n  dateFormat?: string;\r\n  addTimestamp?: boolean;\r\n};\r\n\r\nexport const exportInventoryToCSV = (\r\n  inventoryData: InventoryItem[], \r\n  options: ExportOptions = {}\r\n) => {\r\n  try {\r\n    // Process data based on options\r\n    let dataToExport = [...inventoryData];\r\n    \r\n    // Filter fields if specified\r\n    if (options.includeFields?.length) {\r\n      dataToExport = dataToExport.map(item => {\r\n        const filteredItem: Record<string, any> = {};\r\n        options.includeFields?.forEach(field => {\r\n          if (field in item) {\r\n            filteredItem[field] = item[field];\r\n          }\r\n        });\r\n        return filteredItem as unknown as InventoryItem;\r\n      });\r\n    } else if (options.excludeFields?.length) {\r\n      dataToExport = dataToExport.map(item => {\r\n        const filteredItem: Record<string, any> = {};\r\n        Object.keys(item).forEach(key => {\r\n          if (!options.excludeFields?.includes(key)) {\r\n            filteredItem[key] = item[key];\r\n          }\r\n        });\r\n        return filteredItem as unknown as InventoryItem;\r\n      });\r\n    }\r\n\r\n    const csv = Papa.unparse(dataToExport as any[]);\r\n    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\r\n    const link = document.createElement('a');\r\n    const url = URL.createObjectURL(blob);\r\n    \r\n    // Create filename\r\n    const timestamp = options.addTimestamp ? `_${new Date().toISOString().replace(/[:.]/g, '-')}` : '';\r\n    const defaultName = `inventaire${timestamp}.csv`;\r\n    const fileName = options.fileName || defaultName;\r\n    \r\n    link.setAttribute('href', url);\r\n    link.setAttribute('download', fileName);\r\n    link.style.visibility = 'hidden';\r\n    \r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n    \r\n    toast.success(\"Dữ liệu đã được xuất thành công\", {\r\n      description: `Tệp ${fileName} đã được tải xuống`\r\n    });\r\n    return true;\r\n  } catch (error) {\r\n    console.error(\"Export error:\", error);\r\n    toast.error(\"Lỗi khi xuất dữ liệu\");\r\n    return false;\r\n  }\r\n};\r\n\r\nexport type ImportOptions = {\r\n  validateFields?: boolean;\r\n  requiredFields?: string[];\r\n  skipDuplicateIds?: boolean;\r\n  onProgress?: (progress: number) => void;\r\n  dateFormat?: string;\r\n};\r\n\r\nexport const importInventoryFromCSV = (\r\n  file: File, \r\n  onComplete: (data: InventoryItem[]) => void,\r\n  options: ImportOptions = {}\r\n) => {\r\n  try {\r\n    const { validateFields = true, requiredFields = ['name', 'category'], skipDuplicateIds = false } = options;\r\n    \r\n    Papa.parse(file, {\r\n      header: true,\r\n      complete: (results) => {\r\n        const parsedData = results.data as any[];\r\n        \r\n        // Check if there's data to process\r\n        if (!parsedData || parsedData.length === 0 || !parsedData[0]) {\r\n          toast.error(\"Tệp nhập không chứa dữ liệu hợp lệ\");\r\n          return;\r\n        }\r\n\r\n        // Track progress\r\n        let processedCount = 0;\r\n        const totalCount = parsedData.length;\r\n        \r\n        // Validate and transform data\r\n        const validData: InventoryItem[] = parsedData\r\n          .filter(item => {\r\n            if (!validateFields) return true;\r\n            \r\n            // Check required fields\r\n            const hasRequiredFields = requiredFields.every(field => \r\n              item[field] !== undefined && item[field] !== null && item[field] !== ''\r\n            );\r\n            \r\n            if (!hasRequiredFields) {\r\n              console.warn(\"Skipping item due to missing required fields:\", item);\r\n            }\r\n            \r\n            return hasRequiredFields;\r\n          })\r\n          .map((item, index) => {\r\n            // Update progress\r\n            processedCount++;\r\n            if (options.onProgress) {\r\n              options.onProgress(Math.floor((processedCount / totalCount) * 100));\r\n            }\r\n            \r\n            return {\r\n              id: Number(item.id) || Math.max(1000, index + 1000),\r\n              name: item.name || '',\r\n              category: item.category || '',\r\n              quantity: Number(item.quantity) || 0,\r\n              unit: item.unit || 'đơn vị',\r\n              minQuantity: Number(item.minQuantity) || 0,\r\n              price: Number(item.price) || 0,\r\n              location: item.location || '',\r\n              lastUpdated: item.lastUpdated || new Date().toISOString().split('T')[0],\r\n              supplier: item.supplier || '',\r\n              sku: item.sku || '',\r\n              expiryDate: item.expiryDate || '',\r\n              notes: item.notes || ''\r\n            };\r\n          });\r\n        \r\n        if (validData.length === 0) {\r\n          toast.error(\"Không tìm thấy dữ liệu hợp lệ trong tệp\");\r\n          return;\r\n        }\r\n        \r\n        onComplete(validData);\r\n        toast.success(`${validData.length} mục đã được nhập thành công`, {\r\n          description: `Nhập dữ liệu hoàn tất từ ${file.name}`\r\n        });\r\n      },\r\n      error: (error) => {\r\n        console.error(\"Import error:\", error);\r\n  toast.error(\"Lỗi khi nhập dữ liệu\");\r\n      }\r\n    });\r\n    return true;\r\n  } catch (error) {\r\n    console.error(\"Import error:\", error);\r\n  toast.error(\"Lỗi khi nhập dữ liệu\");\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const exportInventoryToPDF = (inventoryData: InventoryItem[], fileName?: string) => {\r\n  toast.info(\"Đang chuẩn bị PDF...\");\r\n  // In a real app, you would use a library like jsPDF, pdfmake, or react-pdf\r\n  // This is a placeholder for the actual PDF generation functionality\r\n  setTimeout(() => {\r\n    toast.success(\"PDF đã được tạo thành công\", {\r\n      description: \"Tệp đã được tải xuống\"\r\n    });\r\n  }, 1500);\r\n  return true;\r\n};\r\n\r\nexport const downloadInventoryTemplate = () => {\r\n  const templateData = [\r\n    {\r\n      id: \"1\",\r\n      name: \"Nom de l'article\",\r\n      category: \"Catégorie\",\r\n      quantity: \"100\",\r\n      unit: \"unité\",\r\n      minQuantity: \"10\",\r\n      price: \"0.00\",\r\n      location: \"Emplacement\",\r\n      supplier: \"Fournisseur\",\r\n      sku: \"REF-001\",\r\n      expiryDate: \"2023-12-31\",\r\n      notes: \"Notes additionnelles\"\r\n    }\r\n  ];\r\n  \r\n  const csv = Papa.unparse(templateData);\r\n  const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\r\n  const link = document.createElement('a');\r\n  const url = URL.createObjectURL(blob);\r\n  \r\n  link.setAttribute('href', url);\r\n  link.setAttribute('download', 'mau_kho.csv');\r\n  link.style.visibility = 'hidden';\r\n  \r\n  document.body.appendChild(link);\r\n  link.click();\r\n  document.body.removeChild(link);\r\n  \r\n  toast.success(\"Mẫu kho đã được tải xuống\", {\r\n    description: \"Sử dụng mẫu này để chuẩn bị dữ liệu nhập\"\r\n  });\r\n  \r\n  return true;\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\inventory\\InventoryAlerts.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[392,395],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[392,395],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport React from 'react';\r\nimport { AlertTriangle } from 'lucide-react';\r\n// EditableField removed; using inputs for inline editing\r\n\r\ninterface InventoryAlert {\r\n  id: number;\r\n  name: string;\r\n  current: number;\r\n  min: number;\r\n  status: 'critical' | 'warning';\r\n}\r\n\r\ninterface InventoryAlertsProps {\r\n  alerts: InventoryAlert[];\r\n  onQuantityChange: (id: number, field: string, value: any) => void;\r\n}\r\n\r\nconst InventoryAlerts: React.FC<InventoryAlertsProps> = ({ alerts, onQuantityChange }) => {\r\n  if (alerts.length === 0) return null;\r\n  \r\n  return (\r\n    <div className=\"mb-6 border border-agri-warning/30 bg-agri-warning/5 rounded-xl p-4 animate-enter\">\r\n      <div className=\"flex items-center mb-3\">\r\n        <AlertTriangle className=\"h-5 w-5 text-agri-warning mr-2\" />\r\n        <h3 className=\"font-medium\">Cảnh báo tồn kho thấp</h3>\r\n      </div>\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3\">\r\n        {alerts.map(alert => (\r\n          <div \r\n            key={alert.id} \r\n            className={`p-3 rounded-lg border ${\r\n              alert.status === 'critical' \r\n                ? 'border-agri-danger/30 bg-agri-danger/5' \r\n                : 'border-agri-warning/30 bg-agri-warning/5'\r\n            }`}\r\n          >\r\n            <div className=\"flex justify-between items-center\">\r\n              <p className=\"font-medium\">{alert.name}</p>\r\n              <span \r\n                className={`text-xs px-2 py-0.5 rounded-full ${\r\n                  alert.status === 'critical' \r\n                    ? 'bg-agri-danger/10 text-agri-danger' \r\n                    : 'bg-agri-warning/10 text-agri-warning'\r\n                }`}\r\n              >\r\n                {alert.status === 'critical' ? 'Nguy cấp' : 'Cảnh báo'}\r\n              </span>\r\n            </div>\r\n            <div className=\"mt-2 text-sm\">\r\n              <span>Tồn kho hiện tại: </span>\r\n              <input\r\n                type=\"number\"\r\n                className=\"inline-block w-20 border rounded px-2 py-0.5\"\r\n                defaultValue={String(alert.current)}\r\n                onBlur={(e) => onQuantityChange(alert.id, 'quantity', Number(e.target.value))}\r\n              />\r\n              <span className=\"mx-1\">|</span>\r\n              <span>Tối thiểu: </span>\r\n              <input\r\n                type=\"number\"\r\n                className=\"inline-block w-20 border rounded px-2 py-0.5\"\r\n                defaultValue={String(alert.min)}\r\n                onBlur={(e) => onQuantityChange(alert.id, 'minQuantity', Number(e.target.value))}\r\n              />\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InventoryAlerts;\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\inventory\\InventoryFilters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\inventory\\InventoryStats.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\layout\\PageHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\layout\\PageLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\layout\\TabContainer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\parcels\\ParcelActionButtons.tsx","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from 'no-unused-vars').","line":41,"column":52,"severity":1,"nodeType":null,"fix":{"range":[1110,1147],"text":" "}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"\r\nimport React from 'react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { \r\n  Map, \r\n  Download, \r\n  Upload, \r\n  AlertTriangle, \r\n  Plus,\r\n  FileBarChart,\r\n  Layers \r\n} from 'lucide-react';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\r\nimport ReportGenerationButton from \"../common/ReportGenerationButton\";\r\nimport {\r\n  Tooltip,\r\n  TooltipContent,\r\n  TooltipProvider,\r\n  TooltipTrigger,\r\n} from \"@/components/ui/tooltip\";\r\n// useToast intentionally removed — not used in this component\r\n\r\ninterface ParcelAlert {\r\n  id: number;\r\n  parcel: string;\r\n  type: string;\r\n  severity: string;\r\n}\r\n\r\ninterface ParcelActionButtonsProps {\r\n  onExportData: () => void;\r\n  onImportData: () => void;\r\n  onOpenMap: () => void;\r\n  onAddParcel?: () => void;\r\n  onGenerateStatistics?: () => void;\r\n  onOpenLayerManager?: () => void;\r\n  activeParcelAlerts: ParcelAlert[];\r\n  weatherAlertsOpen: boolean;\r\n  setWeatherAlertsOpen: React.Dispatch<React.SetStateAction<boolean>>;\r\n  getSeverityColor: (_severity: string) => string; // eslint-disable-line no-unused-vars\r\n}\r\n\r\nconst ParcelActionButtons = ({\r\n  onExportData,\r\n  onImportData,\r\n  onOpenMap,\r\n  onAddParcel,\r\n  onGenerateStatistics,\r\n  onOpenLayerManager,\r\n  activeParcelAlerts,\r\n  weatherAlertsOpen,\r\n  setWeatherAlertsOpen,\r\n  getSeverityColor\r\n}: ParcelActionButtonsProps) => {\r\n  // toast not used here; omit destructure\r\n\r\n  return (\r\n    <div className=\"flex flex-wrap gap-3\">\r\n      <TooltipProvider>\r\n        <Tooltip>\r\n          <TooltipTrigger asChild>\r\n            <Button \r\n              variant=\"outline\" \r\n              onClick={onOpenMap}\r\n              className=\"bg-white border-gray-200 hover:bg-gray-50\"\r\n            >\r\n              <Map className=\"mr-2 h-4 w-4 text-gray-600\" />\r\n              Carte\r\n            </Button>\r\n          </TooltipTrigger>\r\n          <TooltipContent>\r\n            <p>Afficher la carte des parcelles</p>\r\n          </TooltipContent>\r\n        </Tooltip>\r\n      </TooltipProvider>\r\n      \r\n      {activeParcelAlerts.length > 0 && (\r\n        <Popover open={weatherAlertsOpen} onOpenChange={setWeatherAlertsOpen}>\r\n          <PopoverTrigger asChild>\r\n            <Button \r\n              variant=\"outline\" \r\n              className=\"relative bg-white border-gray-200 hover:bg-gray-50\"\r\n            >\r\n              <AlertTriangle className=\"mr-2 h-4 w-4 text-orange-500\" />\r\n              Cảnh báo\r\n              <span className=\"absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center\">\r\n                {activeParcelAlerts.length}\r\n              </span>\r\n            </Button>\r\n          </PopoverTrigger>\r\n          <PopoverContent className=\"w-80 p-0\">\r\n            <div className=\"p-4 border-b\">\r\n              <h4 className=\"font-semibold flex items-center\">\r\n                <AlertTriangle className=\"h-4 w-4 mr-2 text-orange-500\" />\r\n                Cảnh báo lô đất\r\n              </h4>\r\n            </div>\r\n            <div className=\"divide-y max-h-80 overflow-auto\">\r\n              {activeParcelAlerts.map(alert => (\r\n                <div key={alert.id} className=\"p-3 hover:bg-muted/20\">\r\n                  <div className=\"flex justify-between items-center\">\r\n                    <span className=\"font-medium\">{alert.parcel}</span>\r\n                    <Badge className={getSeverityColor(alert.severity)}>\r\n                      {alert.severity}\r\n                    </Badge>\r\n                  </div>\r\n                  <p className=\"text-sm text-muted-foreground\">{alert.type}</p>\r\n                </div>\r\n              ))}\r\n            </div>\r\n            <div className=\"p-2 border-t bg-muted/10\">\r\n              <Button variant=\"ghost\" size=\"sm\" className=\"w-full\" onClick={() => setWeatherAlertsOpen(false)}>\r\n                Đóng\r\n              </Button>\r\n            </div>\r\n          </PopoverContent>\r\n        </Popover>\r\n      )}\r\n      \r\n      <ReportGenerationButton \r\n        moduleName=\"parcelles\" \r\n        variant=\"outline\" \r\n        className=\"bg-white border-gray-200 hover:bg-gray-50 text-gray-800\"\r\n      />\r\n\r\n      {onGenerateStatistics && (\r\n        <TooltipProvider>\r\n          <Tooltip>\r\n            <TooltipTrigger asChild>\r\n              <Button \r\n                variant=\"outline\" \r\n                onClick={onGenerateStatistics}\r\n                className=\"bg-white border-gray-200 hover:bg-gray-50\"\r\n              >\r\n                <FileBarChart className=\"mr-2 h-4 w-4 text-gray-600\" />\r\n                Thống kê\r\n              </Button>\r\n            </TooltipTrigger>\r\n            <TooltipContent>\r\n              <p>Tạo thống kê về lô đất của bạn</p>\r\n            </TooltipContent>\r\n          </Tooltip>\r\n        </TooltipProvider>\r\n      )}\r\n\r\n      {onOpenLayerManager && (\r\n        <TooltipProvider>\r\n          <Tooltip>\r\n            <TooltipTrigger asChild>\r\n              <Button \r\n                variant=\"outline\" \r\n                onClick={onOpenLayerManager}\r\n                className=\"bg-white border-gray-200 hover:bg-gray-50\"\r\n              >\r\n                <Layers className=\"mr-2 h-4 w-4 text-gray-600\" />\r\n                Lớp\r\n              </Button>\r\n            </TooltipTrigger>\r\n            <TooltipContent>\r\n              <p>Quản lý các lớp bản đồ</p>\r\n            </TooltipContent>\r\n          </Tooltip>\r\n        </TooltipProvider>\r\n      )}\r\n      \r\n      <Button \r\n        variant=\"outline\" \r\n        onClick={onExportData}\r\n        className=\"bg-white border-gray-200 hover:bg-gray-50\"\r\n      >\r\n        <Download className=\"mr-2 h-4 w-4 text-gray-600\" />\r\n        Xuất\r\n      </Button>\r\n      \r\n      <Button \r\n        variant=\"outline\" \r\n        onClick={onImportData}\r\n        className=\"bg-white border-gray-200 hover:bg-gray-50\"\r\n      >\r\n        <Upload className=\"mr-2 h-4 w-4 text-gray-600\" />\r\n        Nhập\r\n      </Button>\r\n\r\n      {onAddParcel && (\r\n        <TooltipProvider>\r\n          <Tooltip>\r\n            <TooltipTrigger asChild>\r\n              <Button \r\n                className=\"bg-green-600 hover:bg-green-700 text-white\" \r\n                onClick={onAddParcel}\r\n              >\r\n                <Plus className=\"mr-2 h-4 w-4\" />\r\n                Thêm lô đất\r\n              </Button>\r\n            </TooltipTrigger>\r\n            <TooltipContent>\r\n              <p>Tạo lô đất mới</p>\r\n            </TooltipContent>\r\n          </Tooltip>\r\n        </TooltipProvider>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ParcelActionButtons;\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\parcels\\ParcelFilters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\parcels\\ParcelImportDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\parcels\\ParcelLayersManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\parcels\\ParcelMapDialog.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'simulateMeasurement'. Either include it or remove the dependency array.","line":126,"column":6,"nodeType":"ArrayExpression","endLine":126,"endColumn":27,"suggestions":[{"desc":"Update the dependencies array to be: [isOpen, measureMode, simulateMeasurement]","fix":{"range":[4055,4076],"text":"[isOpen, measureMode, simulateMeasurement]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\r\nimport { Button } from '@/components/ui/button';\r\nimport ParcelMap from '@/components/ParcelMap';\r\nimport { Search, ZoomIn, ZoomOut, Maximize2, Download, Layers, Ruler, MapPin, Target } from 'lucide-react';\r\nimport { toast } from 'sonner';\r\nimport {\r\n  Popover,\r\n  PopoverContent,\r\n  PopoverTrigger,\r\n} from \"@/components/ui/popover\";\r\nimport { Checkbox } from '@/components/ui/checkbox';\r\n\r\ninterface Layer {\r\n  id: string;\r\n  name: string;\r\n  enabled: boolean;\r\n  type: 'base' | 'overlay';\r\n}\r\n\r\ninterface ParcelMapDialogProps {\r\n  isOpen: boolean;\r\n  onOpenChange: (isOpen: boolean) => void;\r\n}\r\n\r\nconst ParcelMapDialog = ({ isOpen, onOpenChange }: ParcelMapDialogProps) => {\r\n  const [zoomLevel, setZoomLevel] = useState<number>(1);\r\n  const [coordinates, setCoordinates] = useState({ lat: 45.4631, lng: 4.3873 });\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [measureMode, setMeasureMode] = useState(false);\r\n  const [measureResult, setMeasureResult] = useState<string | null>(null);\r\n  const [layersOpen, setLayersOpen] = useState(false);\r\n  const [mapLayers, setMapLayers] = useState<Layer[]>([\r\n    { id: 'satellite', name: 'Vue satellite', enabled: false, type: 'base' },\r\n    { id: 'terrain', name: 'Terrain', enabled: true, type: 'base' },\r\n    { id: 'parcels', name: 'Limites parcellaires', enabled: true, type: 'overlay' },\r\n    { id: 'crops', name: 'Cultures actuelles', enabled: true, type: 'overlay' },\r\n    { id: 'soil', name: 'Types de sol', enabled: false, type: 'overlay' },\r\n    { id: 'irrigation', name: 'Irrigation', enabled: false, type: 'overlay' },\r\n  ]);\r\n  \r\n  const handleZoomIn = () => {\r\n    if (zoomLevel < 3) {\r\n      setZoomLevel(zoomLevel + 0.5);\r\n    }\r\n  };\r\n  \r\n  const handleZoomOut = () => {\r\n    if (zoomLevel > 0.5) {\r\n      setZoomLevel(zoomLevel - 0.5);\r\n    }\r\n  };\r\n  \r\n  const handleResetView = () => {\r\n    setZoomLevel(1);\r\n    setCoordinates({ lat: 45.4631, lng: 4.3873 });\r\n  };\r\n  \r\n  const handleExportMap = () => {\r\n    toast.success(\"Export de la carte\", {\r\n      description: \"La carte des parcelles a été exportée au format PDF\"\r\n    });\r\n  };\r\n\r\n  const toggleMeasureMode = () => {\r\n    const newMode = !measureMode;\r\n    setMeasureMode(newMode);\r\n    \r\n    if (newMode) {\r\n      toast.info(\"Mode mesure activé\", {\r\n        description: \"Cliquez sur la carte pour placer des points et mesurer la distance\"\r\n      });\r\n    } else {\r\n      setMeasureResult(null);\r\n    }\r\n  };\r\n\r\n  const handleLayerChange = (layerId: string, enabled: boolean) => {\r\n    setMapLayers(mapLayers.map(layer => \r\n      layer.id === layerId ? { ...layer, enabled } : layer\r\n    ));\r\n    \r\n    // Si c'est une couche de base qui est activée, désactiver les autres couches de base\r\n    if (enabled) {\r\n      const layer = mapLayers.find(l => l.id === layerId);\r\n      if (layer?.type === 'base') {\r\n        setMapLayers(mapLayers.map(l => \r\n          l.type === 'base' ? { ...l, enabled: l.id === layerId } : l\r\n        ));\r\n      }\r\n    }\r\n  };\r\n  \r\n  const handleSearch = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (!searchQuery.trim()) return;\r\n\r\n    // Simuler une recherche de parcelle sur la carte\r\n    toast.info(\"Recherche en cours\", {\r\n      description: `Recherche de la parcelle: ${searchQuery}`\r\n    });\r\n\r\n    // Simuler un résultat trouvé\r\n    setTimeout(() => {\r\n      setCoordinates({ lat: 45.4831, lng: 4.3973 });\r\n      setZoomLevel(2);\r\n      toast.success(\"Parcelle trouvée\", {\r\n        description: \"La carte a été centrée sur la parcelle recherchée\"\r\n      });\r\n    }, 1000);\r\n  };\r\n\r\n  const simulateMeasurement = () => {\r\n    if (measureMode) {\r\n      setMeasureResult(\"Distance: 245.3 mètres\");\r\n    }\r\n  };\r\n\r\n  // Activer la mesure sur la carte\r\n  useEffect(() => {\r\n    if (isOpen && measureMode) {\r\n      const timer = setTimeout(simulateMeasurement, 3000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [isOpen, measureMode]);\r\n\r\n  return (\r\n    <Dialog open={isOpen} onOpenChange={onOpenChange}>\r\n      <DialogContent className=\"max-w-4xl\">\r\n        <DialogHeader>\r\n          <DialogTitle>Carte des parcelles</DialogTitle>\r\n        </DialogHeader>\r\n        <div className=\"space-y-4\">\r\n          <div className=\"flex justify-between items-center flex-wrap gap-2\">\r\n            <form onSubmit={handleSearch} className=\"flex-grow mr-2\">\r\n              <div className=\"relative\">\r\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\r\n                <input \r\n                  type=\"text\"\r\n                  placeholder=\"Rechercher une parcelle...\"\r\n                  className=\"pl-9 pr-4 py-2 w-full border rounded-md\"\r\n                  value={searchQuery}\r\n                  onChange={(e) => setSearchQuery(e.target.value)}\r\n                />\r\n              </div>\r\n            </form>\r\n            <div className=\"flex space-x-2\">\r\n              <Button variant=\"outline\" size=\"icon\" onClick={handleZoomIn}>\r\n                <ZoomIn className=\"h-4 w-4\" />\r\n              </Button>\r\n              <Button variant=\"outline\" size=\"icon\" onClick={handleZoomOut}>\r\n                <ZoomOut className=\"h-4 w-4\" />\r\n              </Button>\r\n              <Button variant=\"outline\" size=\"icon\" onClick={handleResetView}>\r\n                <Maximize2 className=\"h-4 w-4\" />\r\n              </Button>\r\n              <Popover open={layersOpen} onOpenChange={setLayersOpen}>\r\n                <PopoverTrigger asChild>\r\n                  <Button variant=\"outline\" size=\"icon\">\r\n                    <Layers className=\"h-4 w-4\" />\r\n                  </Button>\r\n                </PopoverTrigger>\r\n                <PopoverContent className=\"w-56\">\r\n                  <div className=\"space-y-4\">\r\n                    <h4 className=\"font-medium text-sm\">Couches de base</h4>\r\n                    <div className=\"space-y-2\">\r\n                      {mapLayers.filter(l => l.type === 'base').map(layer => (\r\n                        <div key={layer.id} className=\"flex items-center space-x-2\">\r\n                          <Checkbox \r\n                            id={`layer-${layer.id}`} \r\n                            checked={layer.enabled}\r\n                            onCheckedChange={(checked) => handleLayerChange(layer.id, checked === true)}\r\n                          />\r\n                          <label \r\n                            htmlFor={`layer-${layer.id}`}\r\n                            className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\r\n                          >\r\n                            {layer.name}\r\n                          </label>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                    \r\n                    <h4 className=\"font-medium text-sm\">Couches supplémentaires</h4>\r\n                    <div className=\"space-y-2\">\r\n                      {mapLayers.filter(l => l.type === 'overlay').map(layer => (\r\n                        <div key={layer.id} className=\"flex items-center space-x-2\">\r\n                          <Checkbox \r\n                            id={`layer-${layer.id}`} \r\n                            checked={layer.enabled}\r\n                            onCheckedChange={(checked) => handleLayerChange(layer.id, checked === true)}\r\n                          />\r\n                          <label \r\n                            htmlFor={`layer-${layer.id}`}\r\n                            className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\r\n                          >\r\n                            {layer.name}\r\n                          </label>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                </PopoverContent>\r\n              </Popover>\r\n              <Button \r\n                variant={measureMode ? \"default\" : \"outline\"} \r\n                size=\"icon\" \r\n                onClick={toggleMeasureMode}\r\n                className={measureMode ? \"bg-agri-primary text-white\" : \"\"}\r\n              >\r\n                <Ruler className=\"h-4 w-4\" />\r\n              </Button>\r\n              <Button variant=\"outline\" size=\"icon\" onClick={handleExportMap}>\r\n                <Download className=\"h-4 w-4\" />\r\n              </Button>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"h-[500px] bg-gray-100 rounded-lg overflow-hidden relative\" style={{ transform: `scale(${zoomLevel})`, transformOrigin: 'center center' }}>\r\n            <ParcelMap \r\n              coordinates={coordinates}\r\n              parcelName=\"Vue d'ensemble\"\r\n              isEditing={false}\r\n              onCoordinatesChange={setCoordinates}\r\n            />\r\n            \r\n            {/* Mode de mesure - indicateurs */}\r\n            {measureMode && (\r\n              <div className=\"absolute top-2 left-2 bg-white/90 p-2 rounded-md shadow-md\">\r\n                <div className=\"flex items-center text-sm\">\r\n                  <Ruler className=\"h-4 w-4 mr-1 text-agri-primary\" />\r\n                  <span className=\"font-medium\">Mode mesure activé</span>\r\n                </div>\r\n                {measureResult && (\r\n                  <div className=\"text-sm mt-1 font-bold\">{measureResult}</div>\r\n                )}\r\n              </div>\r\n            )}\r\n            \r\n            {/* Couches actives - légende */}\r\n            <div className=\"absolute bottom-2 right-2 bg-white/90 p-2 rounded-md shadow-md max-w-xs\">\r\n              <div className=\"text-xs font-medium mb-1\">Couches actives:</div>\r\n              <div className=\"flex flex-wrap gap-1\">\r\n                {mapLayers.filter(layer => layer.enabled).map(layer => (\r\n                  <span \r\n                    key={layer.id}\r\n                    className=\"text-xs px-2 py-0.5 bg-agri-primary/10 text-agri-primary rounded-full\"\r\n                  >\r\n                    {layer.name}\r\n                  </span>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <p className=\"text-sm text-muted-foreground text-center\">\r\n            Cette vue d'ensemble montre l'emplacement de toutes vos parcelles. \r\n            Cliquez sur une parcelle spécifique pour voir plus de détails.\r\n          </p>\r\n          <div className=\"flex justify-between\">\r\n            <Button \r\n              variant=\"outline\" \r\n              onClick={() => {\r\n                navigator.geolocation.getCurrentPosition((position) => {\r\n                  const { latitude, longitude } = position.coords;\r\n                  setCoordinates({ lat: latitude, lng: longitude });\r\n                  setZoomLevel(2.5);\r\n                  toast.success(\"Localisation\", {\r\n                    description: \"Carte centrée sur votre position\"\r\n                  });\r\n                }, () => {\r\n                  toast.error(\"Localisation\", {\r\n                    description: \"Impossible d'obtenir votre position\"\r\n                  });\r\n                });\r\n              }}\r\n              className=\"gap-2\"\r\n            >\r\n              <Target className=\"h-4 w-4\" />\r\n              Ma position\r\n            </Button>\r\n            <Button onClick={() => onOpenChange(false)}>\r\n              Fermer\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default ParcelMapDialog;\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\statistics\\ChartFilters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\statistics\\ChartSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\statistics\\EnvironmentalCharts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\statistics\\FinancialCharts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\statistics\\FinancialForecast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\statistics\\StatisticsHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\statistics\\YieldsCharts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\accordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\alert-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\aspect-ratio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\badge.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":36,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":36,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\r\nimport { cva, type VariantProps } from \"class-variance-authority\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst badgeVariants = cva(\r\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default:\r\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\r\n        secondary:\r\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\r\n        destructive:\r\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\r\n        outline: \"text-foreground\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n    },\r\n  }\r\n)\r\n\r\nexport interface BadgeProps\r\n  extends React.HTMLAttributes<HTMLDivElement>,\r\n    VariantProps<typeof badgeVariants> {}\r\n\r\nfunction Badge({ className, variant, ...props }: BadgeProps) {\r\n  return (\r\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\r\n  )\r\n}\r\n\r\nexport { Badge, badgeVariants }\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\breadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\button.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":56,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":56,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\r\nimport { Slot } from \"@radix-ui/react-slot\"\r\nimport { cva, type VariantProps } from \"class-variance-authority\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst buttonVariants = cva(\r\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\r\n        destructive:\r\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\r\n        outline:\r\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\r\n        secondary:\r\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\r\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\r\n        link: \"text-primary underline-offset-4 hover:underline\",\r\n      },\r\n      size: {\r\n        default: \"h-10 px-4 py-2\",\r\n        sm: \"h-9 rounded-md px-3\",\r\n        lg: \"h-11 rounded-md px-8\",\r\n        icon: \"h-10 w-10\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n      size: \"default\",\r\n    },\r\n  }\r\n)\r\n\r\nexport interface ButtonProps\r\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\r\n    VariantProps<typeof buttonVariants> {\r\n  asChild?: boolean\r\n}\r\n\r\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\r\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\r\n    const Comp = asChild ? Slot : \"button\"\r\n    return (\r\n      <Comp\r\n        className={cn(buttonVariants({ variant, size, className }))}\r\n        ref={ref}\r\n        {...props}\r\n      />\r\n    )\r\n  }\r\n)\r\nButton.displayName = \"Button\"\r\n\r\nexport { Button, buttonVariants }\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\calendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\carousel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\chart-config.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":41,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1199,1202],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1199,1202],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport React, { useState } from 'react';\r\nimport { Settings, X, Check } from 'lucide-react';\r\n// EditableField removed — using static title/description and plain inputs in config\r\n\r\ninterface ChartConfigProps {\r\n  title: string;\r\n  description?: string;\r\n  children: React.ReactNode;\r\n  onTitleChange?: (title: string) => void;\r\n  onDescriptionChange?: (description: string) => void;\r\n  chartOptions?: {\r\n    showLegend?: boolean;\r\n    showGrid?: boolean;\r\n    showTooltip?: boolean;\r\n    chartColors?: string[];\r\n  };\r\n  onOptionsChange?: (options: unknown) => void;\r\n  className?: string;\r\n}\r\n\r\nexport const ChartConfig = ({\r\n  title,\r\n  description,\r\n  children,\r\n  onTitleChange,\r\n  onDescriptionChange,\r\n  chartOptions,\r\n  onOptionsChange,\r\n  className = ''\r\n}: ChartConfigProps) => {\r\n  const [showConfig, setShowConfig] = useState(false);\r\n  const [currentOptions, setCurrentOptions] = useState(chartOptions || {\r\n    showLegend: true,\r\n    showGrid: true,\r\n    showTooltip: true,\r\n    chartColors: ['#4CAF50', '#2196F3', '#FFC107', '#F44336', '#9C27B0']\r\n  });\r\n\r\n  const handleOptionChange = (key: string, value: unknown) => {\r\n    const newOptions = { ...currentOptions, [key]: value as any };\r\n    setCurrentOptions(newOptions);\r\n    if (onOptionsChange) {\r\n      onOptionsChange(newOptions);\r\n    }\r\n  };\r\n\r\n  const handleColorChange = (index: number, color: string) => {\r\n    const newColors = [...(currentOptions.chartColors || [])];\r\n    newColors[index] = color;\r\n    handleOptionChange('chartColors', newColors);\r\n  };\r\n\r\n  return (\r\n    <div className={`bg-white rounded-xl border overflow-hidden relative ${className}`}>\r\n      <div className=\"p-4 border-b flex justify-between items-center\">\r\n        <div>\r\n          <h3 className=\"text-lg font-medium\">{title}</h3>\r\n          \r\n          {description && (\r\n            <div className=\"mt-1 text-sm text-muted-foreground\">\r\n              {description}\r\n            </div>\r\n          )}\r\n        </div>\r\n        \r\n        {onOptionsChange && (\r\n          <button \r\n            onClick={() => setShowConfig(!showConfig)}\r\n            className=\"p-2 hover:bg-muted rounded-full\"\r\n          >\r\n            <Settings className=\"h-4 w-4 text-muted-foreground\" />\r\n          </button>\r\n        )}\r\n      </div>\r\n      \r\n      <div className=\"relative\">\r\n        {children}\r\n        \r\n        {showConfig && (\r\n          <div className=\"absolute inset-0 bg-white/90 backdrop-blur-sm p-4 flex flex-col animate-fade-in\">\r\n            <div className=\"flex justify-between items-center mb-4\">\r\n              <h4 className=\"font-medium\">Configuration du graphique</h4>\r\n              <button \r\n                onClick={() => setShowConfig(false)}\r\n                className=\"p-1.5 hover:bg-muted rounded-full\"\r\n              >\r\n                <X className=\"h-4 w-4\" />\r\n              </button>\r\n            </div>\r\n            \r\n            <div className=\"space-y-4 flex-1 overflow-auto\">\r\n              <div>\r\n                <label className=\"block text-sm font-medium mb-1\">Tiêu đề</label>\r\n                <input\r\n                  className=\"w-full border rounded-md p-2\"\r\n                  defaultValue={title}\r\n                  onBlur={(e) => onTitleChange && onTitleChange(e.target.value)}\r\n                />\r\n              </div>\r\n              \r\n              {description !== undefined && (\r\n                <div>\r\n                  <label className=\"block text-sm font-medium mb-1\">Mô tả</label>\r\n                  <textarea\r\n                    className=\"w-full border rounded-md p-2\"\r\n                    defaultValue={description}\r\n                    onBlur={(e) => onDescriptionChange && onDescriptionChange(e.target.value)}\r\n                  />\r\n                </div>\r\n              )}\r\n              \r\n              <div className=\"grid grid-cols-2 gap-4\">\r\n                <div>\r\n                  <label className=\"flex items-center text-sm font-medium mb-1\">\r\n                    <input \r\n                      type=\"checkbox\" \r\n                      checked={currentOptions.showLegend} \r\n                      onChange={(e) => handleOptionChange('showLegend', e.target.checked)}\r\n                      className=\"mr-2\"\r\n                    />\r\n                    Afficher la légende\r\n                  </label>\r\n                </div>\r\n                \r\n                <div>\r\n                  <label className=\"flex items-center text-sm font-medium mb-1\">\r\n                    <input \r\n                      type=\"checkbox\" \r\n                      checked={currentOptions.showGrid} \r\n                      onChange={(e) => handleOptionChange('showGrid', e.target.checked)}\r\n                      className=\"mr-2\"\r\n                    />\r\n                    Afficher la grille\r\n                  </label>\r\n                </div>\r\n                \r\n                <div>\r\n                  <label className=\"flex items-center text-sm font-medium mb-1\">\r\n                    <input \r\n                      type=\"checkbox\" \r\n                      checked={currentOptions.showTooltip} \r\n                      onChange={(e) => handleOptionChange('showTooltip', e.target.checked)}\r\n                      className=\"mr-2\"\r\n                    />\r\n                    Afficher les infobulles\r\n                  </label>\r\n                </div>\r\n              </div>\r\n              \r\n              <div>\r\n                <label className=\"block text-sm font-medium mb-2\">Couleurs du graphique</label>\r\n                <div className=\"flex flex-wrap gap-2\">\r\n                  {currentOptions.chartColors?.map((color, index) => (\r\n                    <div key={index} className=\"relative\">\r\n                      <input \r\n                        type=\"color\" \r\n                        value={color}\r\n                        onChange={(e) => handleColorChange(index, e.target.value)}\r\n                        className=\"w-8 h-8 rounded cursor-pointer\"\r\n                      />\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"flex justify-end mt-4 pt-2 border-t\">\r\n              <button \r\n                onClick={() => setShowConfig(false)}\r\n                className=\"px-4 py-2 bg-agri-primary text-white rounded-lg flex items-center\"\r\n              >\r\n                <Check className=\"h-4 w-4 mr-2\" />\r\n                Appliquer\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\chart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\command.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\context-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\date-range-picker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\drag-drop-container.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\drawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\editable-field.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\editable-table.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[424,427],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[424,427],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[511,514],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[511,514],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[602,605],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[602,605],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1970,1973],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1970,1973],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":78,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2066,2069],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2066,2069],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport { EditableField } from './editable-field';\r\nimport { ChevronDown, Edit, Trash2, Plus } from 'lucide-react';\r\n\r\nexport interface Column {\r\n  id: string;\r\n  header: string;\r\n  accessorKey: string;\r\n  type?: 'text' | 'number' | 'boolean' | 'select';\r\n  options?: string[];\r\n  isEditable?: boolean;\r\n  width?: string;\r\n}\r\n\r\ninterface EditableTableProps {\r\n  data: Record<string, any>[];\r\n  columns: Column[];\r\n  onUpdate: (rowIndex: number, columnId: string, value: any) => void;\r\n  onDelete?: (rowIndex: number) => void;\r\n  onAdd?: (newRow: Record<string, any>) => void;\r\n  className?: string;\r\n  sortable?: boolean;\r\n  actions?: { icon: React.ReactNode, label: string, onClick: (rowIndex: number) => void }[];\r\n}\r\n\r\nexport const EditableTable = ({\r\n  data,\r\n  columns,\r\n  onUpdate,\r\n  onDelete,\r\n  onAdd,\r\n  className = '',\r\n  sortable = true,\r\n  actions = []\r\n}: EditableTableProps) => {\r\n  const [sortBy, setSortBy] = useState('');\r\n  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('asc');\r\n\r\n  const handleSort = (columnId: string) => {\r\n    if (!sortable) return;\r\n    \r\n    if (sortBy === columnId) {\r\n      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');\r\n    } else {\r\n      setSortBy(columnId);\r\n      setSortOrder('asc');\r\n    }\r\n  };\r\n\r\n  const sortedData = [...data].sort((a, b) => {\r\n    if (!sortBy) return 0;\r\n    \r\n    const aValue = a[sortBy];\r\n    const bValue = b[sortBy];\r\n    \r\n    if (typeof aValue === 'string' && typeof bValue === 'string') {\r\n      return sortOrder === 'asc' \r\n        ? aValue.localeCompare(bValue)\r\n        : bValue.localeCompare(aValue);\r\n    }\r\n    \r\n    return sortOrder === 'asc' \r\n      ? (aValue > bValue ? 1 : -1)\r\n      : (aValue < bValue ? 1 : -1);\r\n  });\r\n\r\n  const handleAddRow = () => {\r\n    if (onAdd) {\r\n      const newRow = columns.reduce((acc, column) => {\r\n        acc[column.accessorKey] = '';\r\n        return acc;\r\n      }, {} as Record<string, any>);\r\n      \r\n      onAdd(newRow);\r\n    }\r\n  };\r\n\r\n  const getRowClass = (row: Record<string, any>) => {\r\n    if (row.status === 'critical') return 'bg-red-50';\r\n    if (row.status === 'warning') return 'bg-yellow-50';\r\n    return '';\r\n  };\r\n\r\n  const getPriorityStyle = (priority: string) => {\r\n    switch (priority) {\r\n      case 'Haute':\r\n      case 'Élevée':\r\n      case 'Urgente':\r\n        return 'bg-red-100 text-red-800';\r\n      case 'Moyenne':\r\n        return 'bg-orange-100 text-orange-800';\r\n      case 'Basse':\r\n      case 'Faible':\r\n        return 'bg-green-100 text-green-800';\r\n      default:\r\n        return 'bg-gray-100 text-gray-800';\r\n    }\r\n  };\r\n\r\n  const translatePriority = (priority: string) => {\r\n    if (!priority) return '';\r\n    switch (priority) {\r\n      case 'Haute':\r\n      case 'Élevée':\r\n      case 'Urgente':\r\n        return 'Cao';\r\n      case 'Moyenne':\r\n        return 'Trung bình';\r\n      case 'Basse':\r\n      case 'Faible':\r\n        return 'Thấp';\r\n      default:\r\n        return priority;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={`bg-white rounded-xl border overflow-hidden ${className}`}>\r\n      <div className=\"overflow-x-auto\">\r\n        <table className=\"w-full text-sm\">\r\n          <thead className=\"bg-muted text-xs uppercase\">\r\n            <tr>\r\n              {columns.map((column) => (\r\n                <th \r\n                  key={column.id} \r\n                  className={`px-4 py-3 text-left ${column.width || ''}`}\r\n                  style={{ width: column.width }}\r\n                >\r\n                  {sortable ? (\r\n                    <button \r\n                      className=\"flex items-center\" \r\n                      onClick={() => handleSort(column.accessorKey)}\r\n                    >\r\n                      {column.header}\r\n                      {sortBy === column.accessorKey && (\r\n                        <ChevronDown \r\n                          className={`h-4 w-4 ml-1 ${sortOrder === 'desc' ? 'transform rotate-180' : ''}`} \r\n                        />\r\n                      )}\r\n                    </button>\r\n                  ) : (\r\n                    column.header\r\n                  )}\r\n                </th>\r\n              ))}\r\n              {(onDelete || actions.length > 0) && (\r\n                <th className=\"px-4 py-3 text-left w-24\">Actions</th>\r\n              )}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {sortedData.map((row, rowIndex) => (\r\n              <tr key={rowIndex} className={`border-t hover:bg-muted/30 ${getRowClass(row)}`}>\r\n                {columns.map((column) => (\r\n                  <td key={`${rowIndex}-${column.id}`} className=\"px-4 py-3\">\r\n                    {column.isEditable ? (\r\n                      column.accessorKey === 'priority' ? (\r\n                        <div className={`inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium ${getPriorityStyle(row[column.accessorKey])}`}>\r\n                          <EditableField\r\n                            value={row[column.accessorKey]}\r\n                            type={column.type as 'text' | 'number' | 'date' | 'select'}\r\n                            options={column.options?.map(opt => ({ value: opt, label: opt }))}\r\n                            onSave={(value) => onUpdate(rowIndex, column.accessorKey, value)}\r\n                          />\r\n                        </div>\r\n                      ) : (\r\n                        <EditableField\r\n                          value={row[column.accessorKey]}\r\n                          type={column.type as 'text' | 'number' | 'date' | 'select'}\r\n                          options={column.options?.map(opt => ({ value: opt, label: opt }))}\r\n                          onSave={(value) => onUpdate(rowIndex, column.accessorKey, value)}\r\n                        />\r\n                      )\r\n                    ) : column.accessorKey === 'priority' ? (\r\n                      <div className={`inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium ${getPriorityStyle(row[column.accessorKey])}`}>\r\n                        {row[column.accessorKey]}\r\n                      </div>\r\n                    ) : (\r\n                      row[column.accessorKey]\r\n                    )}\r\n                  </td>\r\n                ))}\r\n                {(onDelete || actions.length > 0) && (\r\n                  <td className=\"px-4 py-3\">\r\n                    <div className=\"flex space-x-1\">\r\n                        {actions.map((action, index) => (\r\n                        <button \r\n                          key={index}\r\n                          onClick={() => action.onClick(rowIndex)}\r\n                          className=\"p-1.5 hover:bg-muted rounded\"\r\n                          title={action.label}\r\n                        >\r\n                          {action.icon}\r\n                        </button>\r\n                      ))}\r\n                      {onDelete && (\r\n                        <button \r\n                          onClick={() => onDelete(rowIndex)}\r\n                          className=\"p-1.5 hover:bg-agri-danger/10 text-agri-danger rounded\"\r\n                          title=\"Xóa\"\r\n                        >\r\n                          <Trash2 className=\"h-4 w-4\" />\r\n                        </button>\r\n                      )}\r\n                    </div>\r\n                  </td>\r\n                )}\r\n              </tr>\r\n            ))}\r\n            {data.length === 0 && (\r\n              <tr>\r\n                <td colSpan={columns.length + ((onDelete || actions.length > 0) ? 1 : 0)} className=\"px-4 py-4 text-center text-muted-foreground\">\r\n                  Không có dữ liệu\r\n                </td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      \r\n      {onAdd && (\r\n        <div className=\"p-4 border-t\">\r\n          <button \r\n            onClick={handleAddRow}\r\n            className=\"flex items-center px-4 py-2 text-sm bg-agri-primary text-white rounded-lg hover:bg-agri-primary-dark\"\r\n          >\r\n            <Plus className=\"h-4 w-4 mr-2\" />\r\n            Thêm một dòng\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\form.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":168,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":168,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\r\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\r\nimport { Slot } from \"@radix-ui/react-slot\"\r\nimport {\r\n  Controller,\r\n  ControllerProps,\r\n  FieldPath,\r\n  FieldValues,\r\n  FormProvider,\r\n  useFormContext,\r\n} from \"react-hook-form\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\nimport { Label } from \"@/components/ui/label\"\r\n\r\nconst Form = FormProvider\r\n\r\ntype FormFieldContextValue<\r\n  TFieldValues extends FieldValues = FieldValues,\r\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\r\n> = {\r\n  name: TName\r\n}\r\n\r\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\r\n  {} as FormFieldContextValue\r\n)\r\n\r\nconst FormField = <\r\n  TFieldValues extends FieldValues = FieldValues,\r\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\r\n>({\r\n  ...props\r\n}: ControllerProps<TFieldValues, TName>) => {\r\n  return (\r\n    <FormFieldContext.Provider value={{ name: props.name }}>\r\n      <Controller {...props} />\r\n    </FormFieldContext.Provider>\r\n  )\r\n}\r\n\r\nconst useFormField = () => {\r\n  const fieldContext = React.useContext(FormFieldContext)\r\n  const itemContext = React.useContext(FormItemContext)\r\n  const { getFieldState, formState } = useFormContext()\r\n\r\n  const fieldState = getFieldState(fieldContext.name, formState)\r\n\r\n  if (!fieldContext) {\r\n    throw new Error(\"useFormField should be used within <FormField>\")\r\n  }\r\n\r\n  const { id } = itemContext\r\n\r\n  return {\r\n    id,\r\n    name: fieldContext.name,\r\n    formItemId: `${id}-form-item`,\r\n    formDescriptionId: `${id}-form-item-description`,\r\n    formMessageId: `${id}-form-item-message`,\r\n    ...fieldState,\r\n  }\r\n}\r\n\r\ntype FormItemContextValue = {\r\n  id: string\r\n}\r\n\r\nconst FormItemContext = React.createContext<FormItemContextValue>(\r\n  {} as FormItemContextValue\r\n)\r\n\r\nconst FormItem = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => {\r\n  const id = React.useId()\r\n\r\n  return (\r\n    <FormItemContext.Provider value={{ id }}>\r\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\r\n    </FormItemContext.Provider>\r\n  )\r\n})\r\nFormItem.displayName = \"FormItem\"\r\n\r\nconst FormLabel = React.forwardRef<\r\n  React.ElementRef<typeof LabelPrimitive.Root>,\r\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\r\n>(({ className, ...props }, ref) => {\r\n  const { error, formItemId } = useFormField()\r\n\r\n  return (\r\n    <Label\r\n      ref={ref}\r\n      className={cn(error && \"text-destructive\", className)}\r\n      htmlFor={formItemId}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nFormLabel.displayName = \"FormLabel\"\r\n\r\nconst FormControl = React.forwardRef<\r\n  React.ElementRef<typeof Slot>,\r\n  React.ComponentPropsWithoutRef<typeof Slot>\r\n>(({ ...props }, ref) => {\r\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\r\n\r\n  return (\r\n    <Slot\r\n      ref={ref}\r\n      id={formItemId}\r\n      aria-describedby={\r\n        !error\r\n          ? `${formDescriptionId}`\r\n          : `${formDescriptionId} ${formMessageId}`\r\n      }\r\n      aria-invalid={!!error}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nFormControl.displayName = \"FormControl\"\r\n\r\nconst FormDescription = React.forwardRef<\r\n  HTMLParagraphElement,\r\n  React.HTMLAttributes<HTMLParagraphElement>\r\n>(({ className, ...props }, ref) => {\r\n  const { formDescriptionId } = useFormField()\r\n\r\n  return (\r\n    <p\r\n      ref={ref}\r\n      id={formDescriptionId}\r\n      className={cn(\"text-sm text-muted-foreground\", className)}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nFormDescription.displayName = \"FormDescription\"\r\n\r\nconst FormMessage = React.forwardRef<\r\n  HTMLParagraphElement,\r\n  React.HTMLAttributes<HTMLParagraphElement>\r\n>(({ className, children, ...props }, ref) => {\r\n  const { error, formMessageId } = useFormField()\r\n  const body = error ? String(error?.message) : children\r\n\r\n  if (!body) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <p\r\n      ref={ref}\r\n      id={formMessageId}\r\n      className={cn(\"text-sm font-medium text-destructive\", className)}\r\n      {...props}\r\n    >\r\n      {body}\r\n    </p>\r\n  )\r\n})\r\nFormMessage.displayName = \"FormMessage\"\r\n\r\nexport {\r\n  useFormField,\r\n  Form,\r\n  FormItem,\r\n  FormLabel,\r\n  FormControl,\r\n  FormDescription,\r\n  FormMessage,\r\n  FormField,\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\hover-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\html-editor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\input-otp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\menubar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\navigation-menu.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":119,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":119,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\r\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\r\nimport { cva } from \"class-variance-authority\"\r\nimport { ChevronDown } from \"lucide-react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst NavigationMenu = React.forwardRef<\r\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\r\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\r\n>(({ className, children, ...props }, ref) => (\r\n  <NavigationMenuPrimitive.Root\r\n    ref={ref}\r\n    className={cn(\r\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\r\n      className\r\n    )}\r\n    {...props}\r\n  >\r\n    {children}\r\n    <NavigationMenuViewport />\r\n  </NavigationMenuPrimitive.Root>\r\n))\r\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\r\n\r\nconst NavigationMenuList = React.forwardRef<\r\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\r\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\r\n>(({ className, ...props }, ref) => (\r\n  <NavigationMenuPrimitive.List\r\n    ref={ref}\r\n    className={cn(\r\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\r\n\r\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\r\n\r\nconst navigationMenuTriggerStyle = cva(\r\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\"\r\n)\r\n\r\nconst NavigationMenuTrigger = React.forwardRef<\r\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\r\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\r\n>(({ className, children, ...props }, ref) => (\r\n  <NavigationMenuPrimitive.Trigger\r\n    ref={ref}\r\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\r\n    {...props}\r\n  >\r\n    {children}{\" \"}\r\n    <ChevronDown\r\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\r\n      aria-hidden=\"true\"\r\n    />\r\n  </NavigationMenuPrimitive.Trigger>\r\n))\r\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\r\n\r\nconst NavigationMenuContent = React.forwardRef<\r\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\r\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\r\n>(({ className, ...props }, ref) => (\r\n  <NavigationMenuPrimitive.Content\r\n    ref={ref}\r\n    className={cn(\r\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\r\n\r\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\r\n\r\nconst NavigationMenuViewport = React.forwardRef<\r\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\r\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\r\n>(({ className, ...props }, ref) => (\r\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\r\n    <NavigationMenuPrimitive.Viewport\r\n      className={cn(\r\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\r\n        className\r\n      )}\r\n      ref={ref}\r\n      {...props}\r\n    />\r\n  </div>\r\n))\r\nNavigationMenuViewport.displayName =\r\n  NavigationMenuPrimitive.Viewport.displayName\r\n\r\nconst NavigationMenuIndicator = React.forwardRef<\r\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\r\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\r\n>(({ className, ...props }, ref) => (\r\n  <NavigationMenuPrimitive.Indicator\r\n    ref={ref}\r\n    className={cn(\r\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\r\n      className\r\n    )}\r\n    {...props}\r\n  >\r\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\r\n  </NavigationMenuPrimitive.Indicator>\r\n))\r\nNavigationMenuIndicator.displayName =\r\n  NavigationMenuPrimitive.Indicator.displayName\r\n\r\nexport {\r\n  navigationMenuTriggerStyle,\r\n  NavigationMenu,\r\n  NavigationMenuList,\r\n  NavigationMenuItem,\r\n  NavigationMenuContent,\r\n  NavigationMenuTrigger,\r\n  NavigationMenuLink,\r\n  NavigationMenuIndicator,\r\n  NavigationMenuViewport,\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\pagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\radio-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\resizable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\sidebar.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":760,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":760,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\r\nimport { Slot } from \"@radix-ui/react-slot\"\r\nimport { VariantProps, cva } from \"class-variance-authority\"\r\nimport { PanelLeft } from \"lucide-react\"\r\n\r\nimport { useIsMobile } from \"@/hooks/use-mobile\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Input } from \"@/components/ui/input\"\r\nimport { Separator } from \"@/components/ui/separator\"\r\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\r\nimport { Skeleton } from \"@/components/ui/skeleton\"\r\nimport {\r\n  Tooltip,\r\n  TooltipContent,\r\n  TooltipProvider,\r\n  TooltipTrigger,\r\n} from \"@/components/ui/tooltip\"\r\n\r\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\r\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\r\nconst SIDEBAR_WIDTH = \"16rem\"\r\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\r\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\r\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\r\n\r\ntype SidebarContext = {\r\n  state: \"expanded\" | \"collapsed\"\r\n  open: boolean\r\n  setOpen: (open: boolean) => void\r\n  openMobile: boolean\r\n  setOpenMobile: (open: boolean) => void\r\n  isMobile: boolean\r\n  toggleSidebar: () => void\r\n}\r\n\r\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\r\n\r\nfunction useSidebar() {\r\n  const context = React.useContext(SidebarContext)\r\n  if (!context) {\r\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\r\n  }\r\n\r\n  return context\r\n}\r\n\r\nconst SidebarProvider = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\"> & {\r\n    defaultOpen?: boolean\r\n    open?: boolean\r\n    onOpenChange?: (open: boolean) => void\r\n  }\r\n>(\r\n  (\r\n    {\r\n      defaultOpen = true,\r\n      open: openProp,\r\n      onOpenChange: setOpenProp,\r\n      className,\r\n      style,\r\n      children,\r\n      ...props\r\n    },\r\n    ref\r\n  ) => {\r\n    const isMobile = useIsMobile()\r\n    const [openMobile, setOpenMobile] = React.useState(false)\r\n\r\n    // This is the internal state of the sidebar.\r\n    // We use openProp and setOpenProp for control from outside the component.\r\n    const [_open, _setOpen] = React.useState(defaultOpen)\r\n    const open = openProp ?? _open\r\n    const setOpen = React.useCallback(\r\n      (value: boolean | ((value: boolean) => boolean)) => {\r\n        const openState = typeof value === \"function\" ? value(open) : value\r\n        if (setOpenProp) {\r\n          setOpenProp(openState)\r\n        } else {\r\n          _setOpen(openState)\r\n        }\r\n\r\n        // This sets the cookie to keep the sidebar state.\r\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\r\n      },\r\n      [setOpenProp, open]\r\n    )\r\n\r\n    // Helper to toggle the sidebar.\r\n    const toggleSidebar = React.useCallback(() => {\r\n      return isMobile\r\n        ? setOpenMobile((open) => !open)\r\n        : setOpen((open) => !open)\r\n    }, [isMobile, setOpen, setOpenMobile])\r\n\r\n    // Adds a keyboard shortcut to toggle the sidebar.\r\n    React.useEffect(() => {\r\n      const handleKeyDown = (event: KeyboardEvent) => {\r\n        if (\r\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\r\n          (event.metaKey || event.ctrlKey)\r\n        ) {\r\n          event.preventDefault()\r\n          toggleSidebar()\r\n        }\r\n      }\r\n\r\n      window.addEventListener(\"keydown\", handleKeyDown)\r\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\r\n    }, [toggleSidebar])\r\n\r\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\r\n    // This makes it easier to style the sidebar with Tailwind classes.\r\n    const state = open ? \"expanded\" : \"collapsed\"\r\n\r\n    const contextValue = React.useMemo<SidebarContext>(\r\n      () => ({\r\n        state,\r\n        open,\r\n        setOpen,\r\n        isMobile,\r\n        openMobile,\r\n        setOpenMobile,\r\n        toggleSidebar,\r\n      }),\r\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\r\n    )\r\n\r\n    return (\r\n      <SidebarContext.Provider value={contextValue}>\r\n        <TooltipProvider delayDuration={0}>\r\n          <div\r\n            style={\r\n              {\r\n                \"--sidebar-width\": SIDEBAR_WIDTH,\r\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\r\n                ...style,\r\n              } as React.CSSProperties\r\n            }\r\n            className={cn(\r\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\r\n              className\r\n            )}\r\n            ref={ref}\r\n            {...props}\r\n          >\r\n            {children}\r\n          </div>\r\n        </TooltipProvider>\r\n      </SidebarContext.Provider>\r\n    )\r\n  }\r\n)\r\nSidebarProvider.displayName = \"SidebarProvider\"\r\n\r\nconst Sidebar = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\"> & {\r\n    side?: \"left\" | \"right\"\r\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\r\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\r\n  }\r\n>(\r\n  (\r\n    {\r\n      side = \"left\",\r\n      variant = \"sidebar\",\r\n      collapsible = \"offcanvas\",\r\n      className,\r\n      children,\r\n      ...props\r\n    },\r\n    ref\r\n  ) => {\r\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\r\n\r\n    if (collapsible === \"none\") {\r\n      return (\r\n        <div\r\n          className={cn(\r\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\r\n            className\r\n          )}\r\n          ref={ref}\r\n          {...props}\r\n        >\r\n          {children}\r\n        </div>\r\n      )\r\n    }\r\n\r\n    if (isMobile) {\r\n      return (\r\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\r\n          <SheetContent\r\n            data-sidebar=\"sidebar\"\r\n            data-mobile=\"true\"\r\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\r\n            style={\r\n              {\r\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\r\n              } as React.CSSProperties\r\n            }\r\n            side={side}\r\n          >\r\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\r\n          </SheetContent>\r\n        </Sheet>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        className=\"group peer hidden md:block text-sidebar-foreground\"\r\n        data-state={state}\r\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\r\n        data-variant={variant}\r\n        data-side={side}\r\n      >\r\n        {/* This is what handles the sidebar gap on desktop */}\r\n        <div\r\n          className={cn(\r\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\r\n            \"group-data-[collapsible=offcanvas]:w-0\",\r\n            \"group-data-[side=right]:rotate-180\",\r\n            variant === \"floating\" || variant === \"inset\"\r\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\r\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\r\n          )}\r\n        />\r\n        <div\r\n          className={cn(\r\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\r\n            side === \"left\"\r\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\r\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\r\n            // Adjust the padding for floating and inset variants.\r\n            variant === \"floating\" || variant === \"inset\"\r\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\r\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\r\n            className\r\n          )}\r\n          {...props}\r\n        >\r\n          <div\r\n            data-sidebar=\"sidebar\"\r\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\r\n          >\r\n            {children}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n)\r\nSidebar.displayName = \"Sidebar\"\r\n\r\nconst SidebarTrigger = React.forwardRef<\r\n  React.ElementRef<typeof Button>,\r\n  React.ComponentProps<typeof Button>\r\n>(({ className, onClick, ...props }, ref) => {\r\n  const { toggleSidebar } = useSidebar()\r\n\r\n  return (\r\n    <Button\r\n      ref={ref}\r\n      data-sidebar=\"trigger\"\r\n      variant=\"ghost\"\r\n      size=\"icon\"\r\n      className={cn(\"h-7 w-7\", className)}\r\n      onClick={(event) => {\r\n        onClick?.(event)\r\n        toggleSidebar()\r\n      }}\r\n      {...props}\r\n    >\r\n      <PanelLeft />\r\n      <span className=\"sr-only\">Toggle Sidebar</span>\r\n    </Button>\r\n  )\r\n})\r\nSidebarTrigger.displayName = \"SidebarTrigger\"\r\n\r\nconst SidebarRail = React.forwardRef<\r\n  HTMLButtonElement,\r\n  React.ComponentProps<\"button\">\r\n>(({ className, ...props }, ref) => {\r\n  const { toggleSidebar } = useSidebar()\r\n\r\n  return (\r\n    <button\r\n      ref={ref}\r\n      data-sidebar=\"rail\"\r\n      aria-label=\"Toggle Sidebar\"\r\n      tabIndex={-1}\r\n      onClick={toggleSidebar}\r\n      title=\"Toggle Sidebar\"\r\n      className={cn(\r\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\r\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\r\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\r\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\r\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\r\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarRail.displayName = \"SidebarRail\"\r\n\r\nconst SidebarInset = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"main\">\r\n>(({ className, ...props }, ref) => {\r\n  return (\r\n    <main\r\n      ref={ref}\r\n      className={cn(\r\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\r\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarInset.displayName = \"SidebarInset\"\r\n\r\nconst SidebarInput = React.forwardRef<\r\n  React.ElementRef<typeof Input>,\r\n  React.ComponentProps<typeof Input>\r\n>(({ className, ...props }, ref) => {\r\n  return (\r\n    <Input\r\n      ref={ref}\r\n      data-sidebar=\"input\"\r\n      className={cn(\r\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarInput.displayName = \"SidebarInput\"\r\n\r\nconst SidebarHeader = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\">\r\n>(({ className, ...props }, ref) => {\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      data-sidebar=\"header\"\r\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarHeader.displayName = \"SidebarHeader\"\r\n\r\nconst SidebarFooter = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\">\r\n>(({ className, ...props }, ref) => {\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      data-sidebar=\"footer\"\r\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarFooter.displayName = \"SidebarFooter\"\r\n\r\nconst SidebarSeparator = React.forwardRef<\r\n  React.ElementRef<typeof Separator>,\r\n  React.ComponentProps<typeof Separator>\r\n>(({ className, ...props }, ref) => {\r\n  return (\r\n    <Separator\r\n      ref={ref}\r\n      data-sidebar=\"separator\"\r\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarSeparator.displayName = \"SidebarSeparator\"\r\n\r\nconst SidebarContent = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\">\r\n>(({ className, ...props }, ref) => {\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      data-sidebar=\"content\"\r\n      className={cn(\r\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarContent.displayName = \"SidebarContent\"\r\n\r\nconst SidebarGroup = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\">\r\n>(({ className, ...props }, ref) => {\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      data-sidebar=\"group\"\r\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarGroup.displayName = \"SidebarGroup\"\r\n\r\nconst SidebarGroupLabel = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\r\n>(({ className, asChild = false, ...props }, ref) => {\r\n  const Comp = asChild ? Slot : \"div\"\r\n\r\n  return (\r\n    <Comp\r\n      ref={ref}\r\n      data-sidebar=\"group-label\"\r\n      className={cn(\r\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\r\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\r\n\r\nconst SidebarGroupAction = React.forwardRef<\r\n  HTMLButtonElement,\r\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\r\n>(({ className, asChild = false, ...props }, ref) => {\r\n  const Comp = asChild ? Slot : \"button\"\r\n\r\n  return (\r\n    <Comp\r\n      ref={ref}\r\n      data-sidebar=\"group-action\"\r\n      className={cn(\r\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\r\n        // Increases the hit area of the button on mobile.\r\n        \"after:absolute after:-inset-2 after:md:hidden\",\r\n        \"group-data-[collapsible=icon]:hidden\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\r\n\r\nconst SidebarGroupContent = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\">\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    data-sidebar=\"group-content\"\r\n    className={cn(\"w-full text-sm\", className)}\r\n    {...props}\r\n  />\r\n))\r\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\r\n\r\nconst SidebarMenu = React.forwardRef<\r\n  HTMLUListElement,\r\n  React.ComponentProps<\"ul\">\r\n>(({ className, ...props }, ref) => (\r\n  <ul\r\n    ref={ref}\r\n    data-sidebar=\"menu\"\r\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\r\n    {...props}\r\n  />\r\n))\r\nSidebarMenu.displayName = \"SidebarMenu\"\r\n\r\nconst SidebarMenuItem = React.forwardRef<\r\n  HTMLLIElement,\r\n  React.ComponentProps<\"li\">\r\n>(({ className, ...props }, ref) => (\r\n  <li\r\n    ref={ref}\r\n    data-sidebar=\"menu-item\"\r\n    className={cn(\"group/menu-item relative\", className)}\r\n    {...props}\r\n  />\r\n))\r\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\r\n\r\nconst sidebarMenuButtonVariants = cva(\r\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\r\n        outline:\r\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\r\n      },\r\n      size: {\r\n        default: \"h-8 text-sm\",\r\n        sm: \"h-7 text-xs\",\r\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n      size: \"default\",\r\n    },\r\n  }\r\n)\r\n\r\nconst SidebarMenuButton = React.forwardRef<\r\n  HTMLButtonElement,\r\n  React.ComponentProps<\"button\"> & {\r\n    asChild?: boolean\r\n    isActive?: boolean\r\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\r\n  } & VariantProps<typeof sidebarMenuButtonVariants>\r\n>(\r\n  (\r\n    {\r\n      asChild = false,\r\n      isActive = false,\r\n      variant = \"default\",\r\n      size = \"default\",\r\n      tooltip,\r\n      className,\r\n      ...props\r\n    },\r\n    ref\r\n  ) => {\r\n    const Comp = asChild ? Slot : \"button\"\r\n    const { isMobile, state } = useSidebar()\r\n\r\n    const button = (\r\n      <Comp\r\n        ref={ref}\r\n        data-sidebar=\"menu-button\"\r\n        data-size={size}\r\n        data-active={isActive}\r\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\r\n        {...props}\r\n      />\r\n    )\r\n\r\n    if (!tooltip) {\r\n      return button\r\n    }\r\n\r\n    if (typeof tooltip === \"string\") {\r\n      tooltip = {\r\n        children: tooltip,\r\n      }\r\n    }\r\n\r\n    return (\r\n      <Tooltip>\r\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\r\n        <TooltipContent\r\n          side=\"right\"\r\n          align=\"center\"\r\n          hidden={state !== \"collapsed\" || isMobile}\r\n          {...tooltip}\r\n        />\r\n      </Tooltip>\r\n    )\r\n  }\r\n)\r\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\r\n\r\nconst SidebarMenuAction = React.forwardRef<\r\n  HTMLButtonElement,\r\n  React.ComponentProps<\"button\"> & {\r\n    asChild?: boolean\r\n    showOnHover?: boolean\r\n  }\r\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\r\n  const Comp = asChild ? Slot : \"button\"\r\n\r\n  return (\r\n    <Comp\r\n      ref={ref}\r\n      data-sidebar=\"menu-action\"\r\n      className={cn(\r\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\r\n        // Increases the hit area of the button on mobile.\r\n        \"after:absolute after:-inset-2 after:md:hidden\",\r\n        \"peer-data-[size=sm]/menu-button:top-1\",\r\n        \"peer-data-[size=default]/menu-button:top-1.5\",\r\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\r\n        \"group-data-[collapsible=icon]:hidden\",\r\n        showOnHover &&\r\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\r\n\r\nconst SidebarMenuBadge = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\">\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    data-sidebar=\"menu-badge\"\r\n    className={cn(\r\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\r\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\r\n      \"peer-data-[size=sm]/menu-button:top-1\",\r\n      \"peer-data-[size=default]/menu-button:top-1.5\",\r\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\r\n      \"group-data-[collapsible=icon]:hidden\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\r\n\r\nconst SidebarMenuSkeleton = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\"> & {\r\n    showIcon?: boolean\r\n  }\r\n>(({ className, showIcon = false, ...props }, ref) => {\r\n  // Random width between 50 to 90%.\r\n  const width = React.useMemo(() => {\r\n    return `${Math.floor(Math.random() * 40) + 50}%`\r\n  }, [])\r\n\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      data-sidebar=\"menu-skeleton\"\r\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\r\n      {...props}\r\n    >\r\n      {showIcon && (\r\n        <Skeleton\r\n          className=\"size-4 rounded-md\"\r\n          data-sidebar=\"menu-skeleton-icon\"\r\n        />\r\n      )}\r\n      <Skeleton\r\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\r\n        data-sidebar=\"menu-skeleton-text\"\r\n        style={\r\n          {\r\n            \"--skeleton-width\": width,\r\n          } as React.CSSProperties\r\n        }\r\n      />\r\n    </div>\r\n  )\r\n})\r\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\r\n\r\nconst SidebarMenuSub = React.forwardRef<\r\n  HTMLUListElement,\r\n  React.ComponentProps<\"ul\">\r\n>(({ className, ...props }, ref) => (\r\n  <ul\r\n    ref={ref}\r\n    data-sidebar=\"menu-sub\"\r\n    className={cn(\r\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\r\n      \"group-data-[collapsible=icon]:hidden\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\r\n\r\nconst SidebarMenuSubItem = React.forwardRef<\r\n  HTMLLIElement,\r\n  React.ComponentProps<\"li\">\r\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\r\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\r\n\r\nconst SidebarMenuSubButton = React.forwardRef<\r\n  HTMLAnchorElement,\r\n  React.ComponentProps<\"a\"> & {\r\n    asChild?: boolean\r\n    size?: \"sm\" | \"md\"\r\n    isActive?: boolean\r\n  }\r\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\r\n  const Comp = asChild ? Slot : \"a\"\r\n\r\n  return (\r\n    <Comp\r\n      ref={ref}\r\n      data-sidebar=\"menu-sub-button\"\r\n      data-size={size}\r\n      data-active={isActive}\r\n      className={cn(\r\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\r\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\r\n        size === \"sm\" && \"text-xs\",\r\n        size === \"md\" && \"text-sm\",\r\n        \"group-data-[collapsible=icon]:hidden\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\r\n\r\nexport {\r\n  Sidebar,\r\n  SidebarContent,\r\n  SidebarFooter,\r\n  SidebarGroup,\r\n  SidebarGroupAction,\r\n  SidebarGroupContent,\r\n  SidebarGroupLabel,\r\n  SidebarHeader,\r\n  SidebarInput,\r\n  SidebarInset,\r\n  SidebarMenu,\r\n  SidebarMenuAction,\r\n  SidebarMenuBadge,\r\n  SidebarMenuButton,\r\n  SidebarMenuItem,\r\n  SidebarMenuSkeleton,\r\n  SidebarMenuSub,\r\n  SidebarMenuSubButton,\r\n  SidebarMenuSubItem,\r\n  SidebarProvider,\r\n  SidebarRail,\r\n  SidebarSeparator,\r\n  SidebarTrigger,\r\n  useSidebar,\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\sonner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\toaster.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\toggle-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\toggle.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":43,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":43,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\r\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\r\nimport { cva, type VariantProps } from \"class-variance-authority\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst toggleVariants = cva(\r\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"bg-transparent\",\r\n        outline:\r\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\r\n      },\r\n      size: {\r\n        default: \"h-10 px-3\",\r\n        sm: \"h-9 px-2.5\",\r\n        lg: \"h-11 px-5\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n      size: \"default\",\r\n    },\r\n  }\r\n)\r\n\r\nconst Toggle = React.forwardRef<\r\n  React.ElementRef<typeof TogglePrimitive.Root>,\r\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\r\n    VariantProps<typeof toggleVariants>\r\n>(({ className, variant, size, ...props }, ref) => (\r\n  <TogglePrimitive.Root\r\n    ref={ref}\r\n    className={cn(toggleVariants({ variant, size, className }))}\r\n    {...props}\r\n  />\r\n))\r\n\r\nToggle.displayName = TogglePrimitive.Root.displayName\r\n\r\nexport { Toggle, toggleVariants }\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\components\\ui\\use-toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\contexts\\AppSettingsContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":27,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":27,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":36,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1032,1035],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1032,1035],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":47,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1378,1381],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1378,1381],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, ReactNode } from 'react';\r\n\r\ninterface AppSettings {\r\n  darkMode: boolean;\r\n  locale: string;\r\n  // Add other settings here\r\n}\r\n\r\ninterface AppSettingsContextType {\r\n  settings: AppSettings;\r\n  updateSetting: (key: string, value: unknown) => void;\r\n  updateNestedSetting: (section: string, key: string, value: unknown) => void;\r\n}\r\n\r\nconst defaultSettings: AppSettings = {\r\n  darkMode: false,\r\n  locale: 'vi-VN',\r\n  // Default values for other settings\r\n};\r\n\r\nconst AppSettingsContext = createContext<AppSettingsContextType>({\r\n  settings: defaultSettings,\r\n  updateSetting: () => {},\r\n  updateNestedSetting: () => {},\r\n});\r\n\r\nexport const useAppSettings = () => useContext(AppSettingsContext);\r\n\r\ninterface AppSettingsProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AppSettingsProvider: React.FC<AppSettingsProviderProps> = ({ children }) => {\r\n  const [settings, setSettings] = useState<AppSettings>(defaultSettings);\r\n\r\n  const updateSetting = (key: string, value: any) => {\r\n    // Prevent darkMode from being changed - keep it always false\r\n    if (key === 'darkMode') return;\r\n\r\n    setSettings(prevSettings => ({\r\n      ...prevSettings,\r\n      [key]: value,\r\n    }));\r\n  };\r\n\r\n  // Fix the updateNestedSetting function with proper typing\r\n  const updateNestedSetting = (section: string, key: string, value: any) => {\r\n    setSettings((prevSettings) => {\r\n      // Create a copy of the current settings\r\n      const updatedSettings = { ...prevSettings };\r\n      \r\n      // Safely handle the nested section\r\n      const sectionData = updatedSettings[section] as Record<string, unknown>;\r\n      \r\n      // If the section exists, update it\r\n      // Guard: don't allow updating darkMode via nested calls\r\n      if (section === 'darkMode') return prevSettings;\r\n\r\n      if (sectionData) {\r\n        // Create a new object for the section to avoid direct mutation\r\n        updatedSettings[section] = {\r\n          ...sectionData,\r\n          [key]: value\r\n        };\r\n      }\r\n      \r\n      return updatedSettings;\r\n    });\r\n  };\r\n\r\n  // Always expose darkMode as false regardless of internal state\r\n  const exposedSettings = { ...settings, darkMode: false };\r\n\r\n  return (\r\n    <AppSettingsContext.Provider value={{ settings: exposedSettings, updateSetting, updateNestedSetting }}>\r\n      {children}\r\n    </AppSettingsContext.Provider>\r\n  );\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\contexts\\CRMContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[386,389],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[386,389],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[442,445],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[442,445],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":38,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":38,"endColumn":20}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport React, { createContext, useContext, ReactNode } from 'react';\r\nimport useCRMContext from '../hooks/use-crm-context';\r\n\r\n// Création du contexte avec les types appropriés\r\ninterface CRMContextType {\r\n  lastSync: Date;\r\n  isRefreshing: boolean;\r\n  companyName: string;\r\n  activeModules: string[];\r\n  syncDataAcrossCRM: () => void;\r\n  updateModuleData: (moduleName: string, data: any) => void;\r\n  getModuleData: (moduleName: string) => any;\r\n  exportModuleData: (moduleName: string, format: 'csv' | 'excel' | 'pdf', customData?: unknown[]) => Promise<boolean>;\r\n  importModuleData: (moduleName: string, file: File) => Promise<boolean>;\r\n  printModuleData: (moduleName: string, options?: Record<string, unknown>) => Promise<boolean>;\r\n}\r\n\r\nconst CRMContext = createContext<CRMContextType | undefined>(undefined);\r\n\r\n// Props pour le provider\r\ninterface CRMProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\n// Provider qui va envelopper notre application\r\nexport const CRMProvider: React.FC<CRMProviderProps> = ({ children }) => {\r\n  const crmContext = useCRMContext();\r\n  \r\n  return (\r\n    <CRMContext.Provider value={crmContext}>\r\n      {children}\r\n    </CRMContext.Provider>\r\n  );\r\n};\r\n\r\n// Hook personnalisé pour utiliser le contexte\r\nexport const useCRM = () => {\r\n  const context = useContext(CRMContext);\r\n  \r\n  if (context === undefined) {\r\n    throw new Error('useCRM doit être utilisé à l\\'intérieur d\\'un CRMProvider');\r\n  }\r\n  \r\n  return context;\r\n};\r\n\r\nexport default CRMContext;\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\contexts\\StatisticsContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":47,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1093,1096],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1093,1096],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":80,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":80,"endColumn":27}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\n// Kiểu dữ liệu cho các thông số thống kê\r\nexport interface YieldData {\r\n  name: string;\r\n  current: number;\r\n  previous: number;\r\n  unit: string;\r\n}\r\n\r\nexport interface FinancialData {\r\n  name: string;\r\n  profitability: number;\r\n  size: number;\r\n  crop: string;\r\n}\r\n\r\nexport interface CostData {\r\n  name: string;\r\n  value: number;\r\n  color: string;\r\n}\r\n\r\nexport interface EnvironmentalData {\r\n  indicator: string;\r\n  current: number;\r\n  target: number;\r\n  trend: string;\r\n  status: 'Đạt' | 'Đang tiến triển' | 'Chậm tiến độ';\r\n}\r\n\r\ninterface StatisticsContextType {\r\n  // Dữ liệu về sản lượng\r\n  yieldData: YieldData[];\r\n  setYieldData: React.Dispatch<React.SetStateAction<YieldData[]>>;\r\n  \r\n  // Dữ liệu tài chính\r\n  financialData: {\r\n    profitabilityByParcel: FinancialData[];\r\n    costAnalysis: CostData[];\r\n      revenueByMonth: unknown[];\r\n  };\r\n  setFinancialData: React.Dispatch<React.SetStateAction<{\r\n    profitabilityByParcel: FinancialData[];\r\n    costAnalysis: CostData[];\r\n    revenueByMonth: any[];\r\n  }>>;\r\n  \r\n  // Dữ liệu môi trường\r\n  environmentalData: {\r\n    indicators: EnvironmentalData[];\r\n    carbonFootprint: number;\r\n    waterUsage: number;\r\n    biodiversity: number;\r\n  };\r\n  setEnvironmentalData: React.Dispatch<React.SetStateAction<{\r\n    indicators: EnvironmentalData[];\r\n    carbonFootprint: number;\r\n    waterUsage: number;\r\n    biodiversity: number;\r\n  }>>;\r\n  \r\n  // Dữ liệu dự báo\r\n  forecastData: unknown[];\r\n  setForecastData: React.Dispatch<React.SetStateAction<unknown[]>>;\r\n  \r\n  // Khoảng thời gian và bộ lọc\r\n  period: 'day' | 'week' | 'month' | 'year';\r\n  setPeriod: React.Dispatch<React.SetStateAction<'day' | 'week' | 'month' | 'year'>>;\r\n  cropFilter: string;\r\n  setCropFilter: React.Dispatch<React.SetStateAction<string>>;\r\n  \r\n  // Hàm cập nhật dữ liệu theo bộ lọc\r\n  updateDataWithFilters: (period: string, crop: string) => void;\r\n}\r\n\r\nconst StatisticsContext = createContext<StatisticsContextType | undefined>(undefined);\r\n\r\nexport const useStatistics = () => {\r\n  const context = useContext(StatisticsContext);\r\n  if (context === undefined) {\r\n    throw new Error('useStatistics must be used within a StatisticsProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\n// Données initiales\r\nconst initialYieldData: YieldData[] = [\r\n  { name: 'Mía', current: 85, previous: 75, unit: 't/ha' },\r\n  { name: 'Chuối', current: 32, previous: 30, unit: 't/ha' },\r\n  { name: 'Dứa', current: 45, previous: 48, unit: 't/ha' },\r\n  { name: 'Khoai môn', current: 18, previous: 15, unit: 't/ha' },\r\n  { name: 'Gỗ', current: 22, previous: 20, unit: 't/ha' }\r\n];\r\n\r\nconst initialProfitabilityData: FinancialData[] = [\r\n  { name: 'Thửa Bắc', profitability: 1250, size: 12.5, crop: 'Mía' },\r\n  { name: 'Thửa Đông', profitability: 980, size: 8.3, crop: 'Chuối' },\r\n  { name: 'Thửa Nam', profitability: 1580, size: 15.7, crop: 'Dứa' },\r\n  { name: 'Thửa Tây', profitability: 850, size: 10.2, crop: 'Khoai môn' },\r\n  { name: 'Thửa Trung tâm', profitability: 920, size: 6.8, crop: 'Gỗ' }\r\n];\r\n\r\nconst initialCostData: CostData[] = [\r\n  { name: 'Hạt giống', value: 1800, color: '#4CAF50' },\r\n  { name: 'Phân bón', value: 2200, color: '#8D6E63' },\r\n  { name: 'Thuốc BVTV', value: 1500, color: '#FFC107' },\r\n  { name: 'Nhiên liệu', value: 1200, color: '#2196F3' },\r\n  { name: 'Nhân công', value: 3500, color: '#673AB7' },\r\n  { name: 'Cơ giới hóa', value: 2800, color: '#E91E63' },\r\n  { name: 'Khác', value: 900, color: '#9E9E9E' }\r\n];\r\n\r\nconst initialRevenueData = [\r\n  { month: 'Thg 1', revenue: 28500, expenses: 20100, profit: 8400 },\r\n  { month: 'Thg 2', revenue: 30200, expenses: 21800, profit: 8400 },\r\n  { month: 'Thg 3', revenue: 32800, expenses: 22400, profit: 10400 },\r\n  { month: 'Thg 4', revenue: 35500, expenses: 23100, profit: 12400 },\r\n  { month: 'Thg 5', revenue: 38200, expenses: 23500, profit: 14700 },\r\n  { month: 'Thg 6', revenue: 37800, expenses: 22900, profit: 14900 },\r\n  { month: 'Thg 7', revenue: 42500, expenses: 24200, profit: 18300 },\r\n  { month: 'Thg 8', revenue: 44800, expenses: 25300, profit: 19500 },\r\n  { month: 'Thg 9', revenue: 40200, expenses: 24800, profit: 15400 },\r\n  { month: 'Thg 10', revenue: 38200, expenses: 23100, profit: 15100 },\r\n  { month: 'Thg 11', revenue: 36500, expenses: 22500, profit: 14000 },\r\n  { month: 'Thg 12', revenue: 41200, expenses: 25800, profit: 15400 }\r\n];\r\n\r\nconst initialEnvironmentalIndicators: EnvironmentalData[] = [\r\n  { indicator: 'Phát thải CO2 (t/ha)', current: 2.8, target: 2.5, trend: '-5%', status: 'Đang tiến triển' },\r\n  { indicator: 'Tiêu thụ nước (m³/ha)', current: 350, target: 320, trend: '-8%', status: 'Đạt' },\r\n  { indicator: 'Sử dụng đầu vào (kg/ha)', current: 180, target: 150, trend: '-12%', status: 'Đang tiến triển' },\r\n  { indicator: 'Diện tích canh tác hữu cơ (%)', current: 15, target: 25, trend: '+5%', status: 'Đang tiến triển' },\r\n  { indicator: 'Đa dạng sinh học (loài/ha)', current: 12, target: 15, trend: '+12%', status: 'Đạt' }\r\n];\r\n\r\nexport const StatisticsProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [yieldData, setYieldData] = useState<YieldData[]>(initialYieldData);\r\n  const [financialData, setFinancialData] = useState({\r\n    profitabilityByParcel: initialProfitabilityData,\r\n    costAnalysis: initialCostData,\r\n    revenueByMonth: initialRevenueData\r\n  });\r\n  const [environmentalData, setEnvironmentalData] = useState({\r\n    indicators: initialEnvironmentalIndicators,\r\n    carbonFootprint: -15,\r\n    waterUsage: -8,\r\n    biodiversity: 12\r\n  });\r\n  const [forecastData, setForecastData] = useState(initialRevenueData);\r\n  const [period, setPeriod] = useState<'day' | 'week' | 'month' | 'year'>('year');\r\n  const [cropFilter, setCropFilter] = useState('all');\r\n  \r\n  // Fonction pour mettre à jour les données en fonction des filtres\r\n  const updateDataWithFilters = (period: string, crop: string) => {\r\n    // Filtrer les données de rendement par culture si nécessaire\r\n    if (crop !== 'all') {\r\n      const filteredYieldData = initialYieldData.filter(item => item.name === crop);\r\n      setYieldData(filteredYieldData);\r\n      \r\n      // Filtrer également les données financières par culture\r\n      const filteredProfitabilityData = initialProfitabilityData.filter(item => item.crop === crop);\r\n      setFinancialData(prev => ({\r\n        ...prev,\r\n        profitabilityByParcel: filteredProfitabilityData\r\n      }));\r\n    } else {\r\n      setYieldData(initialYieldData);\r\n      setFinancialData(prev => ({\r\n        ...prev,\r\n        profitabilityByParcel: initialProfitabilityData\r\n      }));\r\n    }\r\n    \r\n    // Vous pourriez également ajuster les autres données en fonction de la période\r\n  };\r\n  \r\n  // Mettre à jour les données lorsque les filtres changent\r\n  useEffect(() => {\r\n    updateDataWithFilters(period, cropFilter);\r\n  }, [period, cropFilter]);\r\n  \r\n  return (\r\n    <StatisticsContext.Provider \r\n      value={{ \r\n        yieldData, \r\n        setYieldData,\r\n        financialData,\r\n        setFinancialData,\r\n        environmentalData,\r\n        setEnvironmentalData,\r\n        forecastData,\r\n        setForecastData,\r\n        period,\r\n        setPeriod,\r\n        cropFilter,\r\n        setCropFilter,\r\n        updateDataWithFilters\r\n      }}\r\n    >\r\n      {children}\r\n    </StatisticsContext.Provider>\r\n  );\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\contexts\\UserContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":156,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":156,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3772,3775],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3772,3775],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":198,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":198,"endColumn":21}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, ReactNode } from 'react';\r\n\r\nexport type UserRole = 'admin' | 'user' | 'manager';\r\n\r\nexport interface User {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  role: UserRole;\r\n  status: 'active' | 'inactive';\r\n  twoFactorEnabled: boolean;\r\n  createdAt: string;\r\n  lastLogin?: string;\r\n}\r\n\r\ninterface UserContextType {\r\n  currentUser: User | null;\r\n  users: User[];\r\n  currentRole: UserRole;\r\n  setCurrentRole: (role: UserRole) => void;\r\n  addUser: (userData: Omit<User, 'id' | 'createdAt'>) => void;\r\n  updateUser: (id: string, updates: Partial<User>) => void;\r\n  deleteUser: (id: string) => void;\r\n  getUsersByRole: (role: UserRole) => User[];\r\n  isAdmin: boolean;\r\n}\r\n\r\nconst UserContext = createContext<UserContextType | undefined>(undefined);\r\n\r\nconst initialUsers: User[] = [\r\n  {\r\n    id: '1',\r\n    name: 'Nguyễn Văn Admin',\r\n    email: 'admin@agri.com',\r\n    role: 'admin',\r\n    status: 'active',\r\n    twoFactorEnabled: true,\r\n    createdAt: '2024-01-01',\r\n    lastLogin: '2024-09-22'\r\n  },\r\n  {\r\n    id: '2',\r\n    name: 'Trần Thị Nông Dân',\r\n    email: 'farmer@agri.com',\r\n    role: 'user',\r\n    status: 'active',\r\n    twoFactorEnabled: false,\r\n    createdAt: '2024-02-01',\r\n    lastLogin: '2024-09-20'\r\n  },\r\n  {\r\n    id: '3',\r\n    name: 'Lê Văn Quản Lý',\r\n    email: 'manager@agri.com',\r\n    role: 'manager',\r\n    status: 'active',\r\n    twoFactorEnabled: false,\r\n    createdAt: '2024-03-01',\r\n    lastLogin: '2024-09-21'\r\n  }\r\n  ,\r\n  {\r\n    id: '4',\r\n    name: 'Phạm Thị Hồng',\r\n    email: 'pham.hong@example.com',\r\n    role: 'user',\r\n    status: 'active',\r\n    twoFactorEnabled: false,\r\n    createdAt: '2024-04-12',\r\n    lastLogin: '2024-09-18'\r\n  },\r\n  {\r\n    id: '5',\r\n    name: 'Ngô Văn B',\r\n    email: 'ngovanb@example.com',\r\n    role: 'user',\r\n    status: 'inactive',\r\n    twoFactorEnabled: false,\r\n    createdAt: '2024-05-03',\r\n    lastLogin: '2024-07-20'\r\n  },\r\n  {\r\n    id: '6',\r\n    name: 'Bùi Thị C',\r\n    email: 'buitc@example.com',\r\n    role: 'manager',\r\n    status: 'active',\r\n    twoFactorEnabled: true,\r\n    createdAt: '2024-06-15',\r\n    lastLogin: '2024-09-15'\r\n  },\r\n  {\r\n    id: '7',\r\n    name: 'Trịnh Văn D',\r\n    email: 'trinhvd@example.com',\r\n    role: 'user',\r\n    status: 'active',\r\n    twoFactorEnabled: false,\r\n    createdAt: '2024-07-01',\r\n    lastLogin: '2024-08-22'\r\n  },\r\n  {\r\n    id: '8',\r\n    name: 'Lưu Thị E',\r\n    email: 'luite@example.com',\r\n    role: 'user',\r\n    status: 'inactive',\r\n    twoFactorEnabled: false,\r\n    createdAt: '2024-07-20',\r\n    lastLogin: '2024-07-21'\r\n  },\r\n  {\r\n    id: '9',\r\n    name: 'Hoàng Văn F',\r\n    email: 'hoangvf@example.com',\r\n    role: 'manager',\r\n    status: 'active',\r\n    twoFactorEnabled: true,\r\n    createdAt: '2024-08-05',\r\n    lastLogin: '2024-09-10'\r\n  },\r\n  {\r\n    id: '10',\r\n    name: 'Đặng Thị G',\r\n    email: 'dangtg@example.com',\r\n    role: 'user',\r\n    status: 'active',\r\n    twoFactorEnabled: false,\r\n    createdAt: '2024-08-25',\r\n    lastLogin: '2024-09-02'\r\n  },\r\n  {\r\n    id: '11',\r\n    name: 'Phan Văn H',\r\n    email: 'phanvh@example.com',\r\n    role: 'user',\r\n    status: 'active',\r\n    twoFactorEnabled: false,\r\n    createdAt: '2024-09-01',\r\n    lastLogin: '2024-09-05'\r\n  }\r\n];\r\n\r\ninterface UserProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const UserProvider: React.FC<UserProviderProps> = ({ children }) => {\r\n  const [users, setUsers] = useState<User[]>(initialUsers);\r\n  const [currentRole, setCurrentRole] = useState<UserRole>('user');\r\n  const [currentUser, setCurrentUser] = useState<User | null>(initialUsers[0]); // Default to admin for demo\r\n\r\n  const addUser = (userData: Omit<User, 'id' | 'createdAt'>) => {\r\n    const newUser: User = {\r\n      ...userData,\r\n      twoFactorEnabled: (userData as any)?.twoFactorEnabled ?? false,\r\n      id: Date.now().toString(),\r\n      createdAt: new Date().toISOString().split('T')[0]\r\n    };\r\n    setUsers(prev => [...prev, newUser]);\r\n  };\r\n\r\n  const updateUser = (id: string, updates: Partial<User>) => {\r\n    setUsers(prev => prev.map(user =>\r\n      user.id === id ? { ...user, ...updates } : user\r\n    ));\r\n  };\r\n\r\n  const deleteUser = (id: string) => {\r\n    setUsers(prev => prev.filter(user => user.id !== id));\r\n  };\r\n\r\n  const getUsersByRole = (role: UserRole) => {\r\n    return users.filter(user => user.role === role);\r\n  };\r\n\r\n  const isAdmin = currentRole === 'admin';\r\n\r\n  const value: UserContextType = {\r\n    currentUser,\r\n    users,\r\n    currentRole,\r\n    setCurrentRole,\r\n    addUser,\r\n    updateUser,\r\n    deleteUser,\r\n    getUsersByRole,\r\n    isAdmin\r\n  };\r\n\r\n  return (\r\n    <UserContext.Provider value={value}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useUser = () => {\r\n  const context = useContext(UserContext);\r\n  if (context === undefined) {\r\n    throw new Error('useUser must be used within a UserProvider');\r\n  }\r\n  return context;\r\n};","usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\hooks\\use-crm-context.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":22,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1136,1139],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1136,1139],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":118,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":118,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4884,4887],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4884,4887],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":140,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":140,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5502,5505],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5502,5505],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":206,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":206,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7522,7525],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7522,7525],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\r\nimport { exportToCSV, exportToExcel, exportToPDF, importFromCSV, printData } from '../utils/crm-data-operations';\r\n\r\n// Kiểu cho context CRM toàn cục\r\ninterface CRMContextState {\r\n  lastSync: Date;\r\n  isRefreshing: boolean;\r\n  companyName: string;\r\n  activeModules: string[];\r\n  syncDataAcrossCRM: () => void;\r\n  updateModuleData: (moduleName: string, data: Record<string, unknown>) => void;\r\n  getModuleData: (moduleName: string) => Record<string, unknown> | undefined;\r\n  exportModuleData: (moduleName: string, format: 'csv' | 'excel' | 'pdf', customData?: unknown[]) => Promise<boolean>;\r\n  importModuleData: (moduleName: string, file: File) => Promise<boolean>;\r\n  printModuleData: (moduleName: string, options?: Record<string, unknown>) => Promise<boolean>;\r\n}\r\n\r\n// Hook personnalisé pour gérer le contexte global du CRM\r\nexport const useCRMContext = (): CRMContextState => {\r\n  const [lastSync, setLastSync] = useState<Date>(new Date());\r\n  const [isRefreshing, setIsRefreshing] = useState<boolean>(false);\r\n  const [moduleData, setModuleData] = useState<Record<string, any>>({\r\n    parcelles: {\r\n      items: [\r\n        { id: 1, nom: \"Thửa Bắc\", surface: 12.5, culture: \"Mía\", statut: \"Đang trồng\" },\r\n        { id: 2, nom: \"Thửa Nam\", surface: 8.3, culture: \"Chuối\", statut: \"Đang thu hoạch\" },\r\n        { id: 3, nom: \"Thửa Đông\", surface: 5.2, culture: \"Dứa\", statut: \"Chuẩn bị\" }\r\n      ],\r\n      columns: [\r\n        { key: \"id\", header: \"ID\" },\r\n        { key: \"nom\", header: \"Tên\" },\r\n        { key: \"surface\", header: \"Diện tích (ha)\" },\r\n        { key: \"culture\", header: \"Cây trồng\" },\r\n        { key: \"statut\", header: \"Trạng thái\" }\r\n      ]\r\n    },\r\n    cultures: {\r\n      items: [\r\n        { id: 1, nom: \"Mía\", variete: \"R579\", dateDebut: \"2023-03-15\", dateFin: \"2024-03-15\" },\r\n        { id: 2, nom: \"Chuối\", variete: \"Grande Naine\", dateDebut: \"2023-02-10\", dateFin: \"2023-12-10\" },\r\n        { id: 3, nom: \"Dứa\", variete: \"MD-2\", dateDebut: \"2023-05-05\", dateFin: \"2024-06-01\" }\r\n      ],\r\n      columns: [\r\n        { key: \"id\", header: \"ID\" },\r\n        { key: \"nom\", header: \"Cây trồng\" },\r\n        { key: \"variete\", header: \"Giống\" },\r\n        { key: \"dateDebut\", header: \"Ngày bắt đầu\" },\r\n        { key: \"dateFin\", header: \"Ngày kết thúc\" }\r\n      ]\r\n    },\r\n    finances: {\r\n      items: [\r\n        { id: 1, type: \"revenu\", montant: 15000, description: \"Bán vụ thu hoạch mía\", date: \"2023-06-15\" },\r\n        { id: 2, type: \"depense\", montant: 5000, description: \"Mua phân bón\", date: \"2023-05-10\" },\r\n        { id: 3, type: \"revenu\", montant: 8500, description: \"Bán chuối\", date: \"2023-07-20\" }\r\n      ],\r\n      columns: [\r\n        { key: \"id\", header: \"ID\" },\r\n        { key: \"date\", header: \"Ngày\" },\r\n        { key: \"type\", header: \"Loại\" },\r\n        { key: \"description\", header: \"Mô tả\" },\r\n        { key: \"montant\", header: \"Số tiền (€)\" }\r\n      ]\r\n    },\r\n    statistiques: {\r\n      items: [\r\n        { periode: \"2023-T1\", cultureId: 1, rendement: 8.2, revenus: 12500, couts: 4200 },\r\n        { periode: \"2023-T2\", cultureId: 1, rendement: 8.5, revenus: 13000, couts: 4100 },\r\n        { periode: \"2023-T1\", cultureId: 2, rendement: 15.3, revenus: 7800, couts: 2100 }\r\n      ],\r\n      columns: [\r\n        { key: \"periode\", header: \"Kỳ\" },\r\n        { key: \"cultureId\", header: \"ID Cây trồng\" },\r\n        { key: \"rendement\", header: \"Năng suất (t/ha)\" },\r\n        { key: \"revenus\", header: \"Doanh thu (€)\" },\r\n        { key: \"couts\", header: \"Chi phí (€)\" }\r\n      ]\r\n    },\r\n    inventaire: {\r\n      items: [\r\n        { id: 1, nom: \"Phân NPK\", categorie: \"Vật tư\", quantite: 500, unite: \"kg\", prix: 2.5 },\r\n        { id: 2, nom: \"Thuốc sinh học\", categorie: \"Vật tư\", quantite: 50, unite: \"L\", prix: 18.75 },\r\n        { id: 3, nom: \"Máy kéo\", categorie: \"Thiết bị\", quantite: 2, unite: \"chiếc\", prix: 25000 }\r\n      ],\r\n      columns: [\r\n        { key: \"id\", header: \"ID\" },\r\n        { key: \"nom\", header: \"Tên\" },\r\n        { key: \"categorie\", header: \"Loại\" },\r\n        { key: \"quantite\", header: \"Số lượng\" },\r\n        { key: \"unite\", header: \"Đơn vị\" },\r\n        { key: \"prix\", header: \"Đơn giá (€)\" }\r\n      ]\r\n    }\r\n  });\r\n  const [activeModules, setActiveModules] = useState<string[]>([\r\n    'parcelles',\r\n    'cultures',\r\n    'finances',\r\n    'statistiques',\r\n    'inventaire'\r\n  ]);\r\n  \r\n  // Nom de l'entreprise\r\n  const companyName = 'Agri Dom';\r\n\r\n  // Synchronisation des données à travers tous les modules du CRM\r\n  const syncDataAcrossCRM = useCallback(() => {\r\n    setIsRefreshing(true);\r\n    \r\n    // Simuler un temps de synchronisation\r\n    setTimeout(() => {\r\n      setLastSync(new Date());\r\n      setIsRefreshing(false);\r\n    }, 1500);\r\n  }, []);\r\n\r\n  // Mettre à jour les données d'un module spécifique\r\n  const updateModuleData = useCallback((moduleName: string, data: any) => {\r\n    setModuleData(prevData => ({\r\n      ...prevData,\r\n      [moduleName]: {\r\n        ...prevData[moduleName],\r\n        ...data\r\n      }\r\n    }));\r\n    \r\n    // Mettre à jour la date de dernière synchronisation\r\n    setLastSync(new Date());\r\n  }, []);\r\n\r\n  // Récupérer les données d'un module spécifique\r\n  const getModuleData = useCallback((moduleName: string) => {\r\n    return moduleData[moduleName] || {};\r\n  }, [moduleData]);\r\n\r\n  // Export module data to specified format\r\n  const exportModuleData = useCallback(async (\r\n    moduleName: string, \r\n    format: 'csv' | 'excel' | 'pdf',\r\n    customData?: any[]\r\n  ): Promise<boolean> => {\r\n    // Use custom data if provided, otherwise get from module\r\n    const data = customData || getModuleData(moduleName)?.items;\r\n    \r\n    if (!data || !Array.isArray(data) || data.length === 0) {\r\n      return false;\r\n    }\r\n    \r\n    try {\r\n      let success = false;\r\n      \r\n      // Handle special cases like technical sheets and guides\r\n      if (moduleName === 'fiche_technique') {\r\n        return await exportToPDF(data, `${companyName}_fiche_technique`, {\r\n          title: `${companyName} - Fiche Technique`,\r\n          landscape: false,\r\n          template: 'technical_sheet'\r\n        });\r\n      } else if (moduleName === 'guide_cultures') {\r\n        return true;\r\n      }\r\n      \r\n      // Standard formats\r\n      switch (format) {\r\n        case 'csv':\r\n          success = exportToCSV(data, `${companyName}_${moduleName}`);\r\n          break;\r\n        case 'excel':\r\n          success = exportToExcel(data, `${companyName}_${moduleName}`);\r\n          break;\r\n        case 'pdf':\r\n          success = await exportToPDF(data, `${companyName}_${moduleName}`);\r\n          break;\r\n        default:\r\n          return false;\r\n      }\r\n      \r\n      return success;\r\n    } catch (error) {\r\n      console.error(`Error exporting ${moduleName} data:`, error);\r\n      return false;\r\n    }\r\n  }, [getModuleData, companyName]);\r\n\r\n  // Import module data\r\n  const importModuleData = useCallback(async (moduleName: string, file: File): Promise<boolean> => {\r\n    try {\r\n      const importedData = await importFromCSV(file);\r\n      \r\n      if (importedData && importedData.length > 0) {\r\n        updateModuleData(moduleName, {\r\n          items: importedData\r\n        });\r\n        \r\n        return true;\r\n      }\r\n      \r\n      return false;\r\n    } catch (error) {\r\n      console.error(`Error importing ${moduleName} data:`, error);\r\n      return false;\r\n    }\r\n  }, [updateModuleData]);\r\n\r\n  // Print module data\r\n  const printModuleData = useCallback(async (moduleName: string, options?: any): Promise<boolean> => {\r\n    const data = getModuleData(moduleName);\r\n    \r\n    if (!data || !data.items || !Array.isArray(data.items) || data.items.length === 0) {\r\n      return false;\r\n    }\r\n    \r\n    const moduleNames: Record<string, string> = {\r\n      parcelles: \"Thửa đất\",\r\n      cultures: \"Cây trồng\",\r\n      finances: \"Tài chính\",\r\n      statistiques: \"Thống kê\",\r\n      inventaire: \"Tồn kho\",\r\n      fiche_technique: \"Phiếu kỹ thuật\"\r\n    };\r\n    \r\n    const title = `${companyName} - ${moduleNames[moduleName] || moduleName}`;\r\n    \r\n    try {\r\n      return await printData(\r\n        data.items,\r\n        title,\r\n        data.columns || Object.keys(data.items[0]).map(key => ({ key, header: key })),\r\n        options\r\n      );\r\n    } catch (error) {\r\n      console.error(`Error printing ${moduleName} data:`, error);\r\n      return false;\r\n    }\r\n  }, [getModuleData, companyName]);\r\n\r\n  // Synchronisation initiale au chargement\r\n  useEffect(() => {\r\n    const initialSync = setTimeout(() => {\r\n      syncDataAcrossCRM();\r\n    }, 1000);\r\n    \r\n    return () => clearTimeout(initialSync);\r\n  }, [syncDataAcrossCRM]);\r\n\r\n  return {\r\n    lastSync,\r\n    isRefreshing,\r\n    companyName,\r\n    activeModules,\r\n    syncDataAcrossCRM,\r\n    updateModuleData,\r\n    getModuleData,\r\n    exportModuleData,\r\n    importModuleData,\r\n    printModuleData\r\n  };\r\n};\r\n\r\nexport default useCRMContext;\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\hooks\\use-data-operations.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[485,488],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[485,488],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport { useState, useCallback } from 'react';\r\nimport { toast } from 'sonner';\r\nimport { enhancedExport, enhancedImport, searchInData, filterByDateRange, generateUniqueId } from '../utils/crm-operations';\r\nimport { DateRange } from 'react-day-picker';\r\n\r\ninterface UseDataOperationsProps<T> {\r\n  initialData?: T[];\r\n  idField?: string;\r\n  dateField?: string;\r\n  requiredFields?: string[];\r\n  searchFields?: string[];\r\n}\r\n\r\nexport function useDataOperations<T extends Record<string, any>>({\r\n  initialData = [], \r\n  idField = 'id', \r\n  dateField = 'date', \r\n  requiredFields = [],\r\n  searchFields = []\r\n}: UseDataOperationsProps<T> = {}) {\r\n  const [data, setData] = useState<T[]>(initialData);\r\n  const [filteredData, setFilteredData] = useState<T[]>(initialData);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [dateRange, setDateRange] = useState<DateRange | undefined>();\r\n\r\n  // CRUD operations\r\n  const addItem = useCallback((item: Omit<T, typeof idField>) => {\r\n    const newItem = {\r\n      ...item,\r\n      [idField]: generateUniqueId(),\r\n    } as T;\r\n    \r\n    setData(prev => [...prev, newItem]);\r\n  setFilteredData(prev => [...prev, newItem]);\r\n  toast.success(\"Thêm mục thành công\");\r\n    \r\n    return newItem;\r\n  }, [idField]);\r\n\r\n  const updateItem = useCallback((id: number | string, updates: Partial<T>) => {\r\n    setData(prev => \r\n      prev.map(item => \r\n        item[idField] === id ? { ...item, ...updates } : item\r\n      )\r\n    );\r\n    \r\n    setFilteredData(prev => \r\n      prev.map(item => \r\n        item[idField] === id ? { ...item, ...updates } : item\r\n      )\r\n    );\r\n    \r\n  toast.success(\"Cập nhật mục thành công\");\r\n  }, [idField]);\r\n\r\n  const deleteItem = useCallback((id: number | string) => {\r\n    setData(prev => prev.filter(item => item[idField] !== id));\r\n    setFilteredData(prev => prev.filter(item => item[idField] !== id));\r\n  toast.success(\"Xóa mục thành công\");\r\n  }, [idField]);\r\n\r\n  const bulkDelete = useCallback((ids: (number | string)[]) => {\r\n    setData(prev => prev.filter(item => !ids.includes(item[idField])));\r\n    setFilteredData(prev => prev.filter(item => !ids.includes(item[idField])));\r\n  toast.success(`${ids.length} mục đã được xóa thành công`);\r\n  }, [idField]);\r\n\r\n  // Search and filter operations\r\n  const handleSearch = useCallback((term: string) => {\r\n    setSearchTerm(term);\r\n    \r\n    let filtered = data;\r\n    \r\n    // Apply search filter if term is provided\r\n    if (term) {\r\n      filtered = searchInData(filtered, term, searchFields);\r\n    }\r\n    \r\n    // Apply date filter if date range is set\r\n    if (dateRange?.from || dateRange?.to) {\r\n      filtered = filterByDateRange(\r\n        filtered, \r\n        dateRange.from ?? null, \r\n        dateRange.to ?? null, \r\n        dateField\r\n      );\r\n    }\r\n    \r\n    setFilteredData(filtered);\r\n  }, [data, searchFields, dateRange, dateField]);\r\n\r\n  const handleDateRangeChange = useCallback((range: DateRange | undefined) => {\r\n    setDateRange(range);\r\n    \r\n    let filtered = data;\r\n    \r\n    // Apply search filter if term is provided\r\n    if (searchTerm) {\r\n      filtered = searchInData(filtered, searchTerm, searchFields);\r\n    }\r\n    \r\n    // Apply date filter if date range is set\r\n    if (range?.from || range?.to) {\r\n      filtered = filterByDateRange(\r\n        filtered, \r\n        range.from ?? null, \r\n        range.to ?? null, \r\n        dateField\r\n      );\r\n    } else {\r\n      // If no date range, just apply search\r\n      filtered = searchTerm ? searchInData(data, searchTerm, searchFields) : data;\r\n    }\r\n    \r\n    setFilteredData(filtered);\r\n  }, [data, searchTerm, searchFields, dateField]);\r\n\r\n  // Import/Export operations\r\n  const handleExport = useCallback(async (\r\n    format: 'csv' | 'excel' | 'pdf',\r\n    fileName: string,\r\n    customData?: T[],\r\n    options = {}\r\n  ) => {\r\n    const dataToExport = customData || filteredData;\r\n    return enhancedExport(dataToExport, format, fileName, options);\r\n  }, [filteredData]);\r\n\r\n  const handleImport = useCallback((\r\n    file: File,\r\n  customValidation?: (row: unknown) => boolean\r\n  ) => {\r\n    setIsLoading(true);\r\n    \r\n    return enhancedImport(\r\n      file,\r\n      (importedData) => {\r\n  setData(prev => [...prev, ...(importedData as T[])]);\r\n  setFilteredData(prev => [...prev, ...(importedData as T[])]);\r\n        setIsLoading(false);\r\n      },\r\n      requiredFields,\r\n      customValidation\r\n    ).catch(() => {\r\n      setIsLoading(false);\r\n      return false;\r\n    });\r\n  }, [requiredFields]);\r\n\r\n  // Bulk operations\r\n  const bulkUpdate = useCallback((ids: (number | string)[], updates: Partial<T>) => {\r\n    setData(prev => \r\n      prev.map(item => \r\n        ids.includes(item[idField]) ? { ...item, ...updates } : item\r\n      )\r\n    );\r\n    \r\n    setFilteredData(prev => \r\n      prev.map(item => \r\n        ids.includes(item[idField]) ? { ...item, ...updates } : item\r\n      )\r\n    );\r\n    \r\n  toast.success(`${ids.length} mục đã được cập nhật thành công`);\r\n  }, [idField]);\r\n\r\n  // Reset filters\r\n  const resetFilters = useCallback(() => {\r\n    setSearchTerm('');\r\n    setDateRange(undefined);\r\n    setFilteredData(data);\r\n  }, [data]);\r\n\r\n  // Set all data at once (useful for init or reset)\r\n  const setAllData = useCallback((newData: T[]) => {\r\n    setData(newData);\r\n    setFilteredData(newData);\r\n  }, []);\r\n\r\n  return {\r\n    data,\r\n    filteredData,\r\n    isLoading,\r\n    searchTerm,\r\n    dateRange,\r\n    addItem,\r\n    updateItem,\r\n    deleteItem,\r\n    bulkDelete,\r\n    bulkUpdate,\r\n    handleSearch,\r\n    handleDateRangeChange,\r\n    handleExport,\r\n    handleImport,\r\n    resetFilters,\r\n    setAllData\r\n  };\r\n}\r\n\r\nexport default useDataOperations;\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\hooks\\use-form-operations.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[549,552],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[549,552],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":38,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1150,1153],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1150,1153],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":61,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1846,1849],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1846,1849],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":97,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2985,2988],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2985,2988],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport { useState, useCallback, useRef } from 'react';\r\nimport { toast } from 'sonner';\r\nimport { isValidEmail } from '../utils/crm-operations';\r\n\r\ninterface FieldValidation {\r\n  required?: boolean;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  pattern?: RegExp;\r\n  isEmail?: boolean;\r\n  isNumber?: boolean;\r\n  min?: number;\r\n  max?: number;\r\n  custom?: (value: unknown) => boolean;\r\n  errorMessage?: string;\r\n}\r\n\r\ninterface ValidationConfig {\r\n  [key: string]: FieldValidation;\r\n}\r\n\r\nexport const useFormOperations = <T extends Record<string, any>>(\r\n  initialValues: T,\r\n  validationConfig: ValidationConfig = {}\r\n) => {\r\n  const [values, setValues] = useState<T>(initialValues);\r\n  const [errors, setErrors] = useState<Record<string, string>>({});\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [isDirty, setIsDirty] = useState(false);\r\n  const formRef = useRef<HTMLFormElement>(null);\r\n  \r\n  // Handle input change\r\n  const handleChange = useCallback((\r\n    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>\r\n  ) => {\r\n    const { name, value, type } = e.target;\r\n    let processedValue: any = value;\r\n    \r\n    // Handle different input types\r\n    if (type === 'number') {\r\n      processedValue = value === '' ? '' : Number(value);\r\n    } else if (type === 'checkbox') {\r\n      processedValue = (e.target as HTMLInputElement).checked;\r\n    }\r\n    \r\n    setValues(prev => ({ ...prev, [name]: processedValue }));\r\n    setIsDirty(true);\r\n    \r\n    // Clear error when field is edited\r\n    if (errors[name]) {\r\n      setErrors(prev => {\r\n        const newErrors = { ...prev };\r\n        delete newErrors[name];\r\n        return newErrors;\r\n      });\r\n    }\r\n  }, [errors]);\r\n  \r\n  // Set a specific field value programmatically\r\n  const setFieldValue = useCallback((field: keyof T, value: any) => {\r\n    setValues(prev => ({ ...prev, [field]: value }));\r\n    setIsDirty(true);\r\n    \r\n    // Clear error when field is set\r\n    if (errors[field as string]) {\r\n      setErrors(prev => {\r\n        const newErrors = { ...prev };\r\n        delete newErrors[field as string];\r\n        return newErrors;\r\n      });\r\n    }\r\n  }, [errors]);\r\n  \r\n  // Handle blur event for immediate validation\r\n  const handleBlur = useCallback((e: React.FocusEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {\r\n    const { name, value } = e.target;\r\n    \r\n    // Validate field on blur if it has validation rules\r\n    if (validationConfig[name]) {\r\n      const validation = validationConfig[name];\r\n      const error = validateField(name, value, validation);\r\n      \r\n      if (error) {\r\n        setErrors(prev => ({ ...prev, [name]: error }));\r\n      } else {\r\n        setErrors(prev => {\r\n          const newErrors = { ...prev };\r\n          delete newErrors[name];\r\n          return newErrors;\r\n        });\r\n      }\r\n    }\r\n  }, [validationConfig]);\r\n  \r\n  // Validate a single field\r\n  const validateField = (field: string, value: any, rules: FieldValidation): string | null => {\r\n    if (rules.required && (!value && value !== false && value !== 0)) {\r\n      return rules.errorMessage || `Trường này là bắt buộc`;\r\n    }\r\n    \r\n    if (value !== null && value !== undefined) {\r\n      const strValue = String(value);\r\n      \r\n      if (rules.minLength && strValue.length < rules.minLength) {\r\n  return rules.errorMessage || `Yêu cầu tối thiểu ${rules.minLength} ký tự`;\r\n      }\r\n      \r\n      if (rules.maxLength && strValue.length > rules.maxLength) {\r\n  return rules.errorMessage || `Tối đa ${rules.maxLength} ký tự`;\r\n      }\r\n      \r\n      if (rules.pattern && !rules.pattern.test(strValue)) {\r\n  return rules.errorMessage || `Định dạng không hợp lệ`;\r\n      }\r\n      \r\n      if (rules.isEmail && !isValidEmail(strValue)) {\r\n  return rules.errorMessage || `Email không hợp lệ`;\r\n      }\r\n      \r\n      if (rules.isNumber) {\r\n        const numValue = Number(value);\r\n        if (isNaN(numValue)) {\r\n          return rules.errorMessage || `Vui lòng nhập một số hợp lệ`;\r\n        }\r\n        \r\n          if (rules.min !== undefined && numValue < rules.min) {\r\n          return rules.errorMessage || `Giá trị tối thiểu là ${rules.min}`;\r\n        }\r\n        \r\n          if (rules.max !== undefined && numValue > rules.max) {\r\n          return rules.errorMessage || `Giá trị tối đa là ${rules.max}`;\r\n        }\r\n      }\r\n      \r\n      if (rules.custom && !rules.custom(value)) {\r\n  return rules.errorMessage || `Giá trị không hợp lệ`;\r\n      }\r\n    }\r\n    \r\n    return null;\r\n  };\r\n  \r\n  // Validate all form fields\r\n  const validateForm = useCallback((): boolean => {\r\n    const newErrors: Record<string, string> = {};\r\n    let isValid = true;\r\n    \r\n    // Validate each field with configured rules\r\n    Object.entries(validationConfig).forEach(([field, rules]) => {\r\n      const error = validateField(field, values[field], rules);\r\n      if (error) {\r\n        newErrors[field] = error;\r\n        isValid = false;\r\n      }\r\n    });\r\n    \r\n    setErrors(newErrors);\r\n    return isValid;\r\n  }, [values, validationConfig]);\r\n  \r\n  // Handle form submission\r\n  const handleSubmit = useCallback((\r\n    onSubmit: (values: T) => void | Promise<void>\r\n  ) => async (e?: React.FormEvent) => {\r\n    if (e) {\r\n      e.preventDefault();\r\n    }\r\n    \r\n    setIsSubmitting(true);\r\n    \r\n    // Validate all fields\r\n    const isValid = validateForm();\r\n    \r\n    if (isValid) {\r\n      try {\r\n        await onSubmit(values);\r\n        setIsDirty(false);\r\n      } catch (error) {\r\n        console.error('Form submission error:', error);\r\n        toast.error('Lỗi khi gửi biểu mẫu');\r\n      }\r\n    } else {\r\n      toast.error('Vui lòng sửa các lỗi trong biểu mẫu');\r\n      \r\n      // Focus the first field with error\r\n      if (formRef.current) {\r\n        const firstErrorField = Object.keys(errors)[0];\r\n        const element = formRef.current.elements.namedItem(firstErrorField);\r\n        if (element && 'focus' in element) {\r\n          (element as HTMLElement).focus();\r\n        }\r\n      }\r\n    }\r\n    \r\n    setIsSubmitting(false);\r\n  }, [values, errors, validateForm]);\r\n  \r\n  // Reset form to initial or specific values\r\n  const resetForm = useCallback((newValues?: T) => {\r\n    setValues(newValues || initialValues);\r\n    setErrors({});\r\n    setIsDirty(false);\r\n  }, [initialValues]);\r\n  \r\n  return {\r\n    values,\r\n    errors,\r\n    isSubmitting,\r\n    isDirty,\r\n    formRef,\r\n    handleChange,\r\n    handleBlur,\r\n    handleSubmit,\r\n    setFieldValue,\r\n    resetForm,\r\n    validateForm,\r\n    validateField\r\n  };\r\n};\r\n\r\nexport default useFormOperations;\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\hooks\\use-mobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\hooks\\use-notifications.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":88,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":91,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[844,847],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[844,847],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\r\nimport { toast } from 'sonner';\r\n\r\nexport type NotificationType = 'info' | 'success' | 'warning' | 'error';\r\n\r\nexport interface Notification {\r\n  id: number;\r\n  type: NotificationType;\r\n  title: string;\r\n  message: string;\r\n  read: boolean;\r\n  date: Date;\r\n}\r\n\r\nconst STORAGE_KEY = 'crm_notifications';\r\nconst MAX_NOTIFICATIONS = 50;\r\n\r\nexport const useNotifications = () => {\r\n  const [notifications, setNotifications] = useState<Notification[]>([]);\r\n  const [unreadCount, setUnreadCount] = useState(0);\r\n  \r\n  // Load notifications from localStorage on init\r\n  useEffect(() => {\r\n    try {\r\n      const storedNotifications = localStorage.getItem(STORAGE_KEY);\r\n      if (storedNotifications) {\r\n        const parsedNotifications = JSON.parse(storedNotifications).map((notification: any) => ({\r\n          ...notification,\r\n          date: new Date(notification.date)\r\n        }));\r\n        \r\n        setNotifications(parsedNotifications);\r\n        setUnreadCount(parsedNotifications.filter((note: Notification) => !note.read).length);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to load notifications:', error);\r\n    }\r\n  }, []);\r\n  \r\n  // Save notifications to localStorage whenever they change\r\n  useEffect(() => {\r\n    try {\r\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(notifications));\r\n    } catch (error) {\r\n      console.error('Failed to save notifications:', error);\r\n    }\r\n  }, [notifications]);\r\n  \r\n  // Add a new notification\r\n  const addNotification = useCallback((\r\n    title: string,\r\n    message: string,\r\n    type: NotificationType = 'info',\r\n    showToast = true\r\n  ): Notification => {\r\n    const newNotification: Notification = {\r\n      id: Date.now(),\r\n      title,\r\n      message,\r\n      type,\r\n      read: false,\r\n      date: new Date()\r\n    };\r\n    \r\n    // Add to notifications and keep only the most recent MAX_NOTIFICATIONS\r\n    setNotifications(prev => [newNotification, ...prev].slice(0, MAX_NOTIFICATIONS));\r\n    setUnreadCount(prev => prev + 1);\r\n    \r\n    // Show a toast if requested\r\n    if (showToast) {\r\n      toast[type](title, { description: message });\r\n    }\r\n    \r\n    return newNotification;\r\n  }, []);\r\n  \r\n  // Mark a notification as read\r\n  const markAsRead = useCallback((id: number) => {\r\n    setNotifications(prev => \r\n      prev.map(notification => \r\n        notification.id === id \r\n          ? { ...notification, read: true } \r\n          : notification\r\n      )\r\n    );\r\n    \r\n    setUnreadCount(prev => Math.max(0, prev - 1));\r\n  }, []);\r\n  \r\n  // Mark all notifications as read\r\n  const markAllAsRead = useCallback(() => {\r\n    setNotifications(prev => \r\n      prev.map(notification => ({ ...notification, read: true }))\r\n    );\r\n    \r\n    setUnreadCount(0);\r\n  }, []);\r\n  \r\n  // Delete a notification\r\n  const deleteNotification = useCallback((id: number) => {\r\n    setNotifications(prev => {\r\n      const notification = prev.find(n => n.id === id);\r\n      if (notification && !notification.read) {\r\n        setUnreadCount(prevCount => Math.max(0, prevCount - 1));\r\n      }\r\n      return prev.filter(n => n.id !== id);\r\n    });\r\n  }, []);\r\n  \r\n  // Clear all notifications\r\n  const clearAllNotifications = useCallback(() => {\r\n    setNotifications([]);\r\n    setUnreadCount(0);\r\n  }, []);\r\n  \r\n  return {\r\n    notifications,\r\n    unreadCount,\r\n    addNotification,\r\n    markAsRead,\r\n    markAllAsRead,\r\n    deleteNotification,\r\n    clearAllNotifications\r\n  };\r\n};\r\n\r\nexport default useNotifications;\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\hooks\\use-page-metadata.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\hooks\\use-preview-actions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\hooks\\use-toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\lib\\utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\pages\\AdminPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\pages\\DonatePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\pages\\FinancePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\pages\\Index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\pages\\NewsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\pages\\NotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\pages\\ParametresPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\pages\\RapportsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\pages\\StatsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\utils\\analytics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\utils\\crm-data-operations.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[151,154],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[151,154],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1054,1057],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1054,1057],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":50,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1495,1498],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1495,1498],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":50,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1529,1532],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1529,1532],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":104,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3281,3284],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3281,3284],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":210,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":210,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7258,7261],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7258,7261],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":287,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":287,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10092,10095],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10092,10095],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":343,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":343,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11882,11885],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11882,11885],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":348,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":348,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12060,12063],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12060,12063],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":372,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":372,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12624,12627],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12624,12627],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":375,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":375,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12710,12713],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12710,12713],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { toast } from 'sonner';\r\nimport Papa from 'papaparse';\r\n\r\n/**\r\n * Export any module data to CSV format\r\n */\r\nexport const exportToCSV = (data: any[], fileName: string): boolean => {\r\n  try {\r\n    // Convert data to CSV format\r\n    const csv = Papa.unparse(data);\r\n    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\r\n    const link = document.createElement('a');\r\n    const url = URL.createObjectURL(blob);\r\n    \r\n    link.setAttribute('href', url);\r\n    link.setAttribute('download', `${fileName}_${new Date().toISOString().split('T')[0]}.csv`);\r\n    link.style.visibility = 'hidden';\r\n    \r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n    \r\n    toast.success(\"Dữ liệu đã được xuất thành công ở định dạng CSV\");\r\n    return true;\r\n  } catch (error) {\r\n    console.error(\"Export error:\", error);\r\n    toast.error(\"Lỗi khi xuất dữ liệu\");\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Export data to Excel format (simulated with CSV for now)\r\n */\r\nexport const exportToExcel = (data: any[], fileName: string): boolean => {\r\n  try {\r\n    // For now, we'll use CSV as a stand-in for Excel\r\n    // In a production app, you'd use a library like xlsx\r\n    return exportToCSV(data, fileName);\r\n  } catch (error) {\r\n    console.error(\"Export error:\", error);\r\n    toast.error(\"Erreur lors de l'exportation des données\");\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Export data to PDF format\r\n */\r\nexport const exportToPDF = async (data: any[], fileName: string, options: any = {}): Promise<boolean> => {\r\n  try {\r\n    // Show toast notification\r\n    toast.info(\"Đang tạo PDF...\");\r\n    \r\n    // Create HTML content based on template type\r\n    let htmlContent = '';\r\n    \r\n    if (options.template === 'technical_sheet' && data.length > 0) {\r\n      // Create technical sheet layout\r\n      const item = data[0];\r\n      htmlContent = createTechnicalSheetHTML(item, options.title || 'Fiche Technique');\r\n    } else if (options.template === 'report' && data.length > 0) {\r\n      // Create report layout\r\n      htmlContent = createReportHTML(data, options.title || fileName, options.columns || []);\r\n    } else {\r\n      // Create standard table-based layout\r\n      htmlContent = createTableBasedHTML(data, options.title || fileName, options.columns || []);\r\n    }\r\n    \r\n    // Create and open print window\r\n    const printWindow = window.open('', '_blank');\r\n    \r\n    if (!printWindow) {\r\n      toast.error(\"Không thể mở cửa sổ in\");\r\n      return false;\r\n    }\r\n    \r\n    // Write content and trigger print\r\n    printWindow.document.open();\r\n    printWindow.document.write(htmlContent);\r\n    printWindow.document.close();\r\n    \r\n    // Wait a moment for styles to load then print\r\n    setTimeout(() => {\r\n      try {\r\n        printWindow.focus();\r\n        printWindow.print();\r\n        toast.success(\"PDF được tạo thành công\");\r\n      } catch (printError) {\r\n        console.error(\"Print error:\", printError);\r\n        toast.error(\"Lỗi khi in PDF\");\r\n      }\r\n    }, 1000);\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error(\"PDF export error:\", error);\r\n    toast.error(\"Lỗi khi tạo PDF\");\r\n    return false;\r\n  }\r\n};\r\n\r\n// Helper function to create technical sheet HTML\r\nconst createTechnicalSheetHTML = (item: any, title: string): string => {\r\n  return `\r\n    <!DOCTYPE html>\r\n    <html>\r\n      <head>\r\n        <title>${title}</title>\r\n        <meta charset=\"UTF-8\">\r\n        <style>\r\n          body { font-family: Arial, sans-serif; margin: 0; padding: 20px; }\r\n          .technical-sheet { max-width: 800px; margin: 0 auto; border: 1px solid #ddd; padding: 20px; }\r\n          .technical-sheet-header { text-align: center; margin-bottom: 30px; }\r\n          h1 { color: #2e7d32; }\r\n          .section { margin-bottom: 20px; }\r\n          .section h2 { color: #1565c0; border-bottom: 1px solid #eee; padding-bottom: 5px; }\r\n          .property-grid { display: grid; grid-template-columns: repeat(2, 1fr); gap: 15px; }\r\n          .property { margin-bottom: 10px; }\r\n          .property-label { font-weight: bold; display: block; }\r\n          .notes { background: #f5f5f5; padding: 15px; border-radius: 5px; }\r\n          @media print {\r\n            body { padding: 0; }\r\n            .technical-sheet { border: none; }\r\n          }\r\n        </style>\r\n      </head>\r\n      <body>\r\n        <div class=\"technical-sheet\">\r\n          <div class=\"technical-sheet-header\">\r\n            <h1>${item.nom || 'Culture'}</h1>\r\n            <p><em>${item.nomScientifique || ''}</em></p>\r\n          </div>\r\n          \r\n          <div class=\"section\">\r\n            <h2>Informations générales</h2>\r\n            <div class=\"property-grid\">\r\n              <div class=\"property\">\r\n                <span class=\"property-label\">Famille:</span>\r\n                ${item.famille || ''}\r\n              </div>\r\n              <div class=\"property\">\r\n                <span class=\"property-label\">Origine:</span>\r\n                ${item.origine || ''}\r\n              </div>\r\n              <div class=\"property\">\r\n                <span class=\"property-label\">Type:</span>\r\n                ${item.type || ''}\r\n              </div>\r\n              <div class=\"property\">\r\n                <span class=\"property-label\">Saison de culture:</span>\r\n                ${item.saisonCulture || ''}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"section\">\r\n            <h2>Conditions de culture</h2>\r\n            <div class=\"property-grid\">\r\n              <div class=\"property\">\r\n                <span class=\"property-label\">Type de sol:</span>\r\n                ${item.typeSol || ''}\r\n              </div>\r\n              <div class=\"property\">\r\n                <span class=\"property-label\">Besoin en eau:</span>\r\n                ${item.besoinEau || ''}\r\n              </div>\r\n              <div class=\"property\">\r\n                <span class=\"property-label\">Fertilisation:</span>\r\n                ${item.fertilisation || ''}\r\n              </div>\r\n              <div class=\"property\">\r\n                <span class=\"property-label\">Période de récolte:</span>\r\n                ${item.periodeRecolte || ''}\r\n              </div>\r\n              <div class=\"property\">\r\n                <span class=\"property-label\">Rendement par hectare:</span>\r\n                ${item.rendementHectare || ''}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"section\">\r\n            <h2>Problèmes phytosanitaires</h2>\r\n            <div class=\"property-grid\">\r\n              <div class=\"property\">\r\n                <span class=\"property-label\">Ravageurs:</span>\r\n                ${item.ravageurs || ''}\r\n              </div>\r\n              <div class=\"property\">\r\n                <span class=\"property-label\">Maladies:</span>\r\n                ${item.maladies || ''}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"section\">\r\n            <h2>Notes</h2>\r\n            <div class=\"notes\">\r\n              ${item.notes || 'Aucune note disponible'}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </body>\r\n    </html>\r\n  `;\r\n};\r\n\r\n// Helper function to create enhanced report HTML\r\nconst createReportHTML = (data: any[], title: string, columns: { key: string, header: string }[]): string => {\r\n  // Generate table headers\r\n  const tableHeaders = columns\r\n    .map(col => `<th>${col.header}</th>`)\r\n    .join('');\r\n    \r\n  // Generate table rows\r\n  const tableRows = data.map((row) => {\r\n    const cells = columns.map((column) => \r\n      `<td>${typeof row[column.key] === 'object' ? JSON.stringify(row[column.key]) : row[column.key] || ''}</td>`\r\n    ).join('');\r\n    return `<tr>${cells}</tr>`;\r\n  }).join('');\r\n\r\n  const currentDate = new Date().toLocaleDateString('fr-FR', {\r\n    year: 'numeric',\r\n    month: 'long',\r\n    day: 'numeric'\r\n  });\r\n  \r\n  return `\r\n    <!DOCTYPE html>\r\n    <html>\r\n      <head>\r\n        <title>${title}</title>\r\n        <meta charset=\"UTF-8\">\r\n        <style>\r\n          body { font-family: Arial, sans-serif; margin: 0; padding: 20px; }\r\n          .report { max-width: 100%; margin: 0 auto; }\r\n          .report-header { display: flex; justify-content: space-between; margin-bottom: 30px; border-bottom: 2px solid #4CAF50; padding-bottom: 10px; }\r\n          .report-title { margin: 0; color: #2e7d32; }\r\n          .report-date { text-align: right; color: #666; }\r\n          .report-summary { background-color: #f9f9f9; padding: 15px; margin-bottom: 20px; border-radius: 4px; }\r\n          h1 { color: #2e7d32; }\r\n          table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }\r\n          th { background-color: #4CAF50; color: white; text-align: left; padding: 10px; }\r\n          td { padding: 8px; text-align: left; border-bottom: 1px solid #ddd; }\r\n          tr:nth-child(even) { background-color: #f2f2f2; }\r\n          .footer { margin-top: 30px; text-align: center; font-size: 0.9em; color: #666; border-top: 1px solid #ddd; padding-top: 10px; }\r\n          @media print {\r\n            body { padding: 0; }\r\n            .report { border: none; }\r\n          }\r\n        </style>\r\n      </head>\r\n      <body>\r\n        <div class=\"report\">\r\n          <div class=\"report-header\">\r\n            <h1 class=\"report-title\">${title}</h1>\r\n            <div class=\"report-date\">\r\n              <p>Date: ${currentDate}</p>\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"report-summary\">\r\n            <p>Ce rapport contient ${data.length} enregistrement${data.length > 1 ? 's' : ''} au total.</p>\r\n          </div>\r\n          \r\n          <table>\r\n            <thead>\r\n              <tr>${tableHeaders}</tr>\r\n            </thead>\r\n            <tbody>\r\n              ${tableRows}\r\n            </tbody>\r\n          </table>\r\n          \r\n          <div class=\"footer\">\r\n            <p>Agri Dom - Rapport généré le ${currentDate}</p>\r\n          </div>\r\n        </div>\r\n      </body>\r\n    </html>\r\n  `;\r\n};\r\n\r\n// Helper function to create table-based HTML\r\nconst createTableBasedHTML = (data: any[], title: string, columns: { key: string, header: string }[]): string => {\r\n  // Generate table headers\r\n  const tableHeaders = columns\r\n    .map(col => `<th>${col.header}</th>`)\r\n    .join('');\r\n    \r\n  // Generate table rows\r\n  const tableRows = data.map((row) => {\r\n    const cells = columns.map((column) => \r\n      `<td>${typeof row[column.key] === 'object' ? JSON.stringify(row[column.key]) : row[column.key] || ''}</td>`\r\n    ).join('');\r\n    return `<tr>${cells}</tr>`;\r\n  }).join('');\r\n  \r\n  return `\r\n    <!DOCTYPE html>\r\n    <html>\r\n      <head>\r\n        <title>${title}</title>\r\n        <meta charset=\"UTF-8\">\r\n        <style>\r\n          body { font-family: Arial, sans-serif; margin: 0; padding: 20px; }\r\n          h1 { text-align: center; margin-bottom: 20px; }\r\n          table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }\r\n          th, td { padding: 8px; text-align: left; border-bottom: 1px solid #ddd; }\r\n          th { background-color: #f2f2f2; }\r\n          .print-header { display: flex; justify-content: space-between; margin-bottom: 20px; }\r\n          .print-date { text-align: right; font-size: 0.9em; color: #666; }\r\n          @media print {\r\n            body { padding: 0; }\r\n          }\r\n        </style>\r\n      </head>\r\n      <body>\r\n        <div class=\"print-header\">\r\n          <h1>${title}</h1>\r\n          <div class=\"print-date\">\r\n            <p>Date: ${new Date().toLocaleDateString()}</p>\r\n          </div>\r\n        </div>\r\n        <table>\r\n          <thead>\r\n            <tr>${tableHeaders}</tr>\r\n          </thead>\r\n          <tbody>\r\n            ${tableRows}\r\n          </tbody>\r\n        </table>\r\n      </body>\r\n    </html>\r\n  `;\r\n};\r\n\r\n/**\r\n * Import data from CSV file\r\n */\r\nexport const importFromCSV = (file: File): Promise<any[]> => {\r\n  return new Promise((resolve, reject) => {\r\n    Papa.parse(file, {\r\n      header: true,\r\n      complete: (results) => {\r\n        const parsedData = results.data as any[];\r\n        \r\n        if (parsedData.length === 0) {\r\n          toast.error(\"Không tìm thấy dữ liệu hợp lệ trong tệp\");\r\n          reject(\"No valid data found\");\r\n          return;\r\n        }\r\n        \r\n        toast.success(`${parsedData.length} bản ghi đã được nhập thành công`);\r\n        resolve(parsedData);\r\n      },\r\n      error: (error) => {\r\n        console.error(\"Import error:\", error);\r\n        toast.error(\"Lỗi khi nhập dữ liệu\");\r\n        reject(error);\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * Print data\r\n */\r\nexport const printData = (\r\n  data: any[], \r\n  title: string, \r\n  columns: { key: string, header: string }[],\r\n  options: any = {}\r\n): Promise<boolean> => {\r\n  return new Promise((resolve) => {\r\n    try {\r\n      let htmlContent;\r\n      \r\n      // For technical sheet template\r\n      if (options.template === 'technical_sheet' && data.length > 0) {\r\n        // For technical sheet\r\n        htmlContent = createTechnicalSheetHTML(data[0], title);\r\n      } else if (options.template === 'report' && data.length > 0) {\r\n        // For report\r\n        htmlContent = createReportHTML(data, title, columns);\r\n      } else {\r\n        // Default table-based print template\r\n        htmlContent = createTableBasedHTML(data, title, columns);\r\n      }\r\n      \r\n      // Create print window\r\n      const printWindow = window.open('', '_blank');\r\n      \r\n      if (!printWindow) {\r\n        toast.error(\"Impossible d'ouvrir la fenêtre d'impression\");\r\n        resolve(false);\r\n        return;\r\n      }\r\n      \r\n      // Write to print window\r\n      printWindow.document.open();\r\n      printWindow.document.write(htmlContent);\r\n      printWindow.document.close();\r\n      \r\n      // Auto print after a short delay\r\n      setTimeout(() => {\r\n        try {\r\n          printWindow.focus();\r\n          printWindow.print();\r\n          toast.success(\"Document prêt pour impression\");\r\n          resolve(true);\r\n        } catch (printError) {\r\n          console.error(\"Print error:\", printError);\r\n          toast.error(\"Erreur lors de l'impression\");\r\n          resolve(false);\r\n        }\r\n      }, 1000);\r\n      \r\n    } catch (error) {\r\n      console.error(\"Print error:\", error);\r\n      toast.error(\"Erreur lors de la préparation de l'impression\");\r\n      resolve(false);\r\n    }\r\n  });\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\utils\\crm-operations.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":46,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1184,1187],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1184,1187],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":53,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1394,1397],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1394,1397],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":53,"column":87,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":90,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1445,1448],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1445,1448],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":77,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2118,2121],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2118,2121],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":81,"column":4,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":7,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2216,2219],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2216,2219],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":110,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2897,2900],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2897,2900],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":110,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2935,2938],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2935,2938],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":169,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":169,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4631,4634],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4631,4634],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":213,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":213,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5700,5703],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5700,5703],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":215,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":215,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5773,5776],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5773,5776],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":270,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":270,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7345,7348],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7345,7348],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":270,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":270,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7355,7358],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7355,7358],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { toast } from 'sonner';\r\nimport { exportToCSV, exportToExcel, exportToPDF, importFromCSV } from './crm-data-operations';\r\n\r\n/**\r\n * Format date to localized string\r\n */\r\nexport const formatDate = (date: Date | string): string => {\r\n  if (!date) return '';\r\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\r\n  return dateObj.toLocaleDateString('fr-FR', {\r\n    year: 'numeric',\r\n    month: 'long',\r\n    day: 'numeric'\r\n  });\r\n};\r\n\r\n/**\r\n * Format currency with euro symbol\r\n */\r\nexport const formatCurrency = (amount: number): string => {\r\n  return new Intl.NumberFormat('fr-FR', {\r\n    style: 'currency',\r\n    currency: 'EUR',\r\n    minimumFractionDigits: 2\r\n  }).format(amount);\r\n};\r\n\r\n/**\r\n * Calculate percentage change between two values\r\n */\r\nexport const calculatePercentChange = (current: number, previous: number): number => {\r\n  if (previous === 0) return 0;\r\n  return ((current - previous) / previous) * 100;\r\n};\r\n\r\n/**\r\n * Format percentage with symbol\r\n */\r\nexport const formatPercent = (value: number): string => {\r\n  return `${value.toFixed(1)}%`;\r\n};\r\n\r\n/**\r\n * Calculate total from array of objects\r\n */\r\nexport const calculateTotal = (items: any[], field: string): number => {\r\n  return items.reduce((sum, item) => sum + (Number(item[field]) || 0), 0);\r\n};\r\n\r\n/**\r\n * General search function for filtering data\r\n */\r\nexport const searchInData = (data: any[], searchTerm: string, fields: string[] = []): any[] => {\r\n  if (!searchTerm || searchTerm.trim() === '') return data;\r\n  \r\n  const term = searchTerm.toLowerCase().trim();\r\n  return data.filter(item => {\r\n    // If specific fields are provided, search only in those fields\r\n    if (fields.length > 0) {\r\n      return fields.some(field => {\r\n        const value = item[field];\r\n        return value && String(value).toLowerCase().includes(term);\r\n      });\r\n    }\r\n    \r\n    // Otherwise search in all fields\r\n    return Object.values(item).some(value => \r\n      value && String(value).toLowerCase().includes(term)\r\n    );\r\n  });\r\n};\r\n\r\n/**\r\n * Filter data by date range\r\n */\r\nexport const filterByDateRange = (\r\n  data: any[], \r\n  startDate?: Date | null, \r\n  endDate?: Date | null, \r\n  dateField: string = 'date'\r\n): any[] => {\r\n  if (!startDate && !endDate) return data;\r\n  \r\n  return data.filter(item => {\r\n    if (!item[dateField]) return false;\r\n    \r\n    const itemDate = new Date(item[dateField]);\r\n    if (startDate && endDate) {\r\n      return itemDate >= startDate && itemDate <= endDate;\r\n    } else if (startDate) {\r\n      return itemDate >= startDate;\r\n    } else if (endDate) {\r\n      return itemDate <= endDate;\r\n    }\r\n    \r\n    return true;\r\n  });\r\n};\r\n\r\n/**\r\n * Generate unique ID for new items\r\n */\r\nexport const generateUniqueId = (): number => {\r\n  return Math.floor(Date.now() + Math.random() * 1000);\r\n};\r\n\r\n/**\r\n * Group data by field\r\n */\r\nexport const groupByField = (data: any[], field: string): Record<string, any[]> => {\r\n  return data.reduce((groups, item) => {\r\n    const key = item[field] || 'undefined';\r\n    if (!groups[key]) {\r\n      groups[key] = [];\r\n    }\r\n    groups[key].push(item);\r\n    return groups;\r\n  }, {});\r\n};\r\n\r\n/**\r\n * Get status color based on status value\r\n */\r\nexport const getStatusColor = (status: string): string => {\r\n  const statusColors: Record<string, string> = {\r\n    'active': 'bg-green-100 text-green-800',\r\n    'inactive': 'bg-gray-100 text-gray-800',\r\n    'pending': 'bg-yellow-100 text-yellow-800',\r\n    'completed': 'bg-blue-100 text-blue-800',\r\n    'cancelled': 'bg-red-100 text-red-800',\r\n    'En culture': 'bg-green-100 text-green-800',\r\n    'En récolte': 'bg-blue-100 text-blue-800',\r\n    'En préparation': 'bg-yellow-100 text-yellow-800',\r\n    'Atteint': 'bg-green-100 text-green-800',\r\n    'En progrès': 'bg-blue-100 text-blue-800',\r\n    'En retard': 'bg-red-100 text-red-800'\r\n  };\r\n  \r\n  return statusColors[status.toLowerCase()] || 'bg-gray-100 text-gray-800';\r\n};\r\n\r\n/**\r\n * Validate email format\r\n */\r\nexport const isValidEmail = (email: string): boolean => {\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  return emailRegex.test(email);\r\n};\r\n\r\n/**\r\n * Format phone number for French format\r\n */\r\nexport const formatPhoneNumber = (phoneNumber: string): string => {\r\n  // Remove all non-digits\r\n  const cleaned = phoneNumber.replace(/\\D/g, '');\r\n  \r\n  // Format as XX XX XX XX XX (French format)\r\n  if (cleaned.length === 10) {\r\n    return cleaned.replace(/(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/, '$1 $2 $3 $4 $5');\r\n  }\r\n  \r\n  return phoneNumber;\r\n};\r\n\r\n/**\r\n * Enhanced data export with feedback\r\n */\r\nexport const enhancedExport = async (\r\n  data: any[], \r\n  format: 'csv' | 'excel' | 'pdf',\r\n  fileName: string,\r\n  options = {}\r\n): Promise<boolean> => {\r\n  if (!data || data.length === 0) {\r\n      toast.error(\"Không có dữ liệu để xuất\");\r\n    return false;\r\n  }\r\n  \r\n  toast.info(`Préparation de l'export au format ${format.toUpperCase()}...`);\r\n  \r\n  try {\r\n    let success = false;\r\n    \r\n    switch (format) {\r\n      case 'csv':\r\n        success = exportToCSV(data, fileName);\r\n        break;\r\n      case 'excel':\r\n        success = exportToExcel(data, fileName);\r\n        break;\r\n      case 'pdf':\r\n        success = await exportToPDF(data, fileName, options);\r\n        break;\r\n    }\r\n    \r\n    if (success) {\r\n        toast.success(`Xuất ${format.toUpperCase()} thành công`);\r\n    }\r\n    \r\n    return success;\r\n  } catch (error) {\r\n    console.error(`Error exporting data:`, error);\r\n      toast.error(`Lỗi khi xuất định dạng ${format.toUpperCase()}`);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Enhanced data import with validation\r\n */\r\nexport const enhancedImport = async (\r\n  file: File,\r\n  onComplete: (data: any[]) => void,\r\n  requiredFields: string[] = [],\r\n  validateRow?: (row: any) => boolean\r\n): Promise<boolean> => {\r\n  if (!file) {\r\n      toast.error(\"Không có tệp được chọn\");\r\n    return false;\r\n  }\r\n  \r\n  toast.info(\"Importation en cours...\");\r\n  \r\n  try {\r\n    const data = await importFromCSV(file);\r\n    \r\n    if (!data || data.length === 0) {\r\n        toast.error(\"Không tìm thấy dữ liệu hợp lệ trong tệp\");\r\n      return false;\r\n    }\r\n    \r\n    // Validate required fields\r\n    if (requiredFields.length > 0) {\r\n      const invalidRows = data.filter(row => \r\n        !requiredFields.every(field => row[field] !== undefined && row[field] !== null && row[field] !== '')\r\n      );\r\n      \r\n      if (invalidRows.length > 0) {\r\n          toast.warning(`${invalidRows.length} dòng bị bỏ qua do thiếu trường bắt buộc`);\r\n      }\r\n    }\r\n    \r\n    // Apply custom validation\r\n    let validData = data;\r\n    if (validateRow) {\r\n      validData = data.filter(validateRow);\r\n      if (validData.length < data.length) {\r\n          toast.warning(`${data.length - validData.length} dòng bị bỏ qua do không hợp lệ`);\r\n      }\r\n    }\r\n    \r\n    if (validData.length === 0) {\r\n        toast.error(\"Không có dữ liệu hợp lệ sau khi xác thực\");\r\n      return false;\r\n    }\r\n    \r\n    onComplete(validData);\r\n      toast.success(`${validData.length} bản ghi đã được nhập thành công`);\r\n    return true;\r\n  } catch (error) {\r\n    console.error(\"Import error:\", error);\r\n    toast.error(\"Erreur lors de l'importation des données\");\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Debounce function for search inputs\r\n */\r\nexport const debounce = <F extends (...args: any[]) => any>(\r\n  fn: F,\r\n  delay: number\r\n): ((...args: Parameters<F>) => void) => {\r\n  let timeoutId: ReturnType<typeof setTimeout> | null = null;\r\n  \r\n  return function(...args: Parameters<F>) {\r\n    if (timeoutId) {\r\n      clearTimeout(timeoutId);\r\n    }\r\n    \r\n    timeoutId = setTimeout(() => {\r\n      fn(...args);\r\n    }, delay);\r\n  };\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\utils\\preview-generator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\Github\\agri-dom-1086\\src\\vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
